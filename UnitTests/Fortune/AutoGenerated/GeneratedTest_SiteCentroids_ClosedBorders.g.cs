using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using static SharpVoronoiLib.UnitTests.CommonTestUtilities;

#pragma warning disable
// ReSharper disable All

namespace SharpVoronoiLib.UnitTests;

/// <summary>
/// These tests assert that <see cref="VoronoiSite"/>`s have expected the expected centroid point.
/// Specifically, that the <see cref="VoronoiSite.Centroid"/> matches the centroid of its closed polygon <see cref="VoronoiSite.Cell"/>.
/// These tests are run with generating the border edges, i.e. <see cref="BorderEdgeGeneration.MakeBorderEdges"/>.
/// </summary>
/// <remarks>
/// This is an AUTO-GENERATED test fixture class from UnitTestGenerator.
/// This is one of the several auto-generated fixture classes each checking a different part of the algorithm's result.
/// It contains a bunch of known Voronoi site layouts, including many edge cases.
/// </remarks>
[Parallelizable(ParallelScope.All)]
[TestFixture]
public class GeneratedTest_SiteCentroids_ClosedBorders
{
    [Test]
    public void NoPoints()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume


        // Assert

        // There are no sites, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume


        // Assert

        // There are no sites, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume


        // Assert

        // There are no sites, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume


        // Assert

        // There are no sites, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        1                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointInMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        1                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointInMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        1                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointInMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void OnePointOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |         1                                       |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 0), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         1              ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 300), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |         1                                       |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 700), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |         1                                       |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 800), // #1
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                        1                        |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 300), // #1
        };

        //  500 Y-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        1                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 600), // #1
        };

        //  800 Y-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                        1                        |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1000), // #1
        };

        // 1200 Y-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                        1                        |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 500), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                       1         |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 0), // #1
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●              1         |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 300), // #1
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                       1         |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 700), // #1
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                       1         |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 200), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                        1                        |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -300), // #1
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                        1                        |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 0), // #1
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●              1                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 400), // #1
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                        1                        |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void OnePointArbitrary()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 700), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |         1                                       |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointArbitrary_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 200), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |         1                                       |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointArbitrary_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 500), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |         1                                       |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointArbitrary_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 900), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |         1                                       |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Z-X-Y-W is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 800), // #1
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                  1              |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 300), // #1
        };

        //  500 Y-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                  1              |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 600), // #1
        };

        //  800 Y-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                  1              |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 1000), // #1
        };

        // 1200 Y-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                  1              |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Y-W-Z is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 300), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                       1         |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -200), // #1
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                       1         |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 100), // #1
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                       1         |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 500), // #1
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                       1         |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 200), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |              1                                  |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -300), // #1
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |              1                                  |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 0), // #1
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●    1                                  |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 400), // #1
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |              1                                  |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in W-Z-X-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderCentered()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 1                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderCentered_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 0), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 1                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderCentered_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 300), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 1                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderCentered_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 700), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 1                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1000), // #1
        };

        // 1000 Y------------------------1------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 500), // #1
        };

        //  500 Y------------------------1------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 800), // #1
        };

        //  800 Y------------------------1------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1200), // #1
        };

        // 1200 Y------------------------1------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 500), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 0), // #1
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        1
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 300), // #1
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 1
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 700), // #1
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 1
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X------------------------1------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -500), // #1
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X------------------------1------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -200), // #1
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X------------------------1------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 200), // #1
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X------------------------1------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 700), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 1                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderOffset_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 200), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 1                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 500), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 1                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointOnBorderOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 900), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 1                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1000), // #1
        };

        // 1000 Y----------------------------------1--------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 500), // #1
        };

        //  500 Y----------------------------------1--------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 800), // #1
        };

        //  800 Y----------------------------------1--------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 1200), // #1
        };

        // 1200 Y----------------------------------1--------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 300), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 1
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -200), // #1
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 1
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 100), // #1
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 1
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 500), // #1
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X--------------1----------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -500), // #1
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X--------------1----------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, -200), // #1
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X--------------1----------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 200), // #1
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X--------------1----------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 700), // #1
        };

        // 1000 Z-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 1
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 200), // #1
        };

        //  500 Z-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 1
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 500), // #1
        };

        //  800 Z-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 900), // #1
        };

        // 1200 Z-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 1
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 0), // #1
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y----------------------------------1--------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -500), // #1
        };

        //  500 W-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y----------------------------------1--------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -200), // #1
        };

        //  800 W-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y----------------------------------1--------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 200), // #1
        };

        // 1200 W-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y----------------------------------1--------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 300), // #1
        };

        // 1000 Y-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 1                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -200), // #1
        };

        //  500 Y-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 1                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 100), // #1
        };

        //  800 Y-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 1                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 500), // #1
        };

        // 1200 Y-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 1                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1000), // #1
        };

        // 1000 X--------------1----------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 500), // #1
        };

        //  500 X--------------1----------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 800), // #1
        };

        //  800 X--------------1----------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1200), // #1
        };

        // 1200 X--------------1----------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in X-Z-W-Y is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void OnePointInCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 1-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void OnePointInCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -500), // #1
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 1-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void OnePointInCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 1-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void OnePointInCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 1-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
        };

        // 1000 1-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
        };

        //  500 1-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
        };

        //  800 1-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
        };

        // 1200 1-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
        };

        // 1000 W-------------------------------------------------1
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
        };

        //  500 W-------------------------------------------------1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
        };

        //  800 W-------------------------------------------------1
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 1200), // #1
        };

        // 1200 W-------------------------------------------------1
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -500), // #1
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, -200), // #1
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 200), // #1
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z

        // Assert

        // Centroid of #1 in Y-W-Z-X is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 300), // #2
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        2                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(0, -200), // #2
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                        1                        |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 A-------------------------------------------------B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                        2                        |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 100), // #2
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        1                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 A-------------------------------------------------B
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                        2                        |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(700, 500), // #2
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                        1                        |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        2                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(300, 500), // #2
        };

        // 1000 Y------------------------A------------------------X
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              2         |         1              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(-200, 0), // #2
        };

        //  500 Y------------------------A------------------------X
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |              2         |         1              |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 W------------------------B------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(100, 300), // #2
        };

        //  800 Y------------------------A------------------------X
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              2         |         1              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 W------------------------B------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(500, 700), // #2
        };

        // 1200 Y------------------------A------------------------X
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              2         |         1              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 W------------------------B------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                        1                        |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        2                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 850) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                        1                        |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 A-------------------------------------------------B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        2                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 350) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, -150) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-150.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                        1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        2                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 650) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 150) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(700, 700), // #2
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                        1                        |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 A-------------------------------------------------B
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        2                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 1050) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 550) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
        };

        // 1000 Y----------------------------------A--------------X
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                                  |              |
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                                  |              |
        //      |                                  |              |
        //  500 |                        2         |         1    |
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 W----------------------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(850, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(350, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 0), // #2
        };

        //  500 Y----------------------------------A--------------X
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 |                        2         |         1    |
        //      |                                  |              |
        // -100 |                                  |              |
        //      |                                  |              |
        // -200 |                                  |              |
        //      |                                  |              |
        // -300 |                                  |              |
        //      |                                  |              |
        // -400 |                                  |              |
        //      |                                  |              |
        // -500 W----------------------------------B--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(350, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(-150, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 300), // #2
        };

        //  800 Y----------------------------------A--------------X
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                                  |              |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                        2         |         1    |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 |         ●                        |              |
        //      |                                  |              |
        // -100 |                                  |              |
        //      |                                  |              |
        // -200 W----------------------------------B--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(650, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(150, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(700, 700), // #2
        };

        // 1200 Y----------------------------------A--------------X
        //      |                                  |              |
        // 1100 |                                  |              |
        //      |                                  |              |
        // 1000 |                                  |              |
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                                  |              |
        //      |                                  |              |
        //  700 |                        2         |         1    |
        //      |                                  |              |
        //  600 |                                  |              |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 W----------------------------------B--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(1050, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-Y-W-B is at ~(550, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 100), // #3
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                        1                        |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        2                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 C-------------------------------------------------D
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                        3                        |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 850) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in D-C-Y-W is at ~(500, 150) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(0, -400), // #3
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                        1                        |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 A-------------------------------------------------B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        2                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 C-------------------------------------------------D
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                        3                        |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 350) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in D-C-Y-W is at ~(0, -350) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(300, -100), // #3
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                        1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        2                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 C-------------------------------------------------D
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                        3                        |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 650) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in D-C-Y-W is at ~(300, -50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(700, 300), // #3
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                        1                        |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 A-------------------------------------------------B
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        2                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 C-------------------------------------------------D
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        3                        |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 1050) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in D-C-Y-W is at ~(700, 350) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 500), // #3
        };

        // 1000 Y--------------C-------------------A--------------X
        //      |              |                   |              |
        //  900 |              |                   |              |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 |              |                   |              |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |    3         |         2         |         1    |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 W--------------D-------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(850, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in C-Y-W-D is at ~(150, 500) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-400, 0), // #3
        };

        //  500 Y--------------C-------------------A--------------X
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 |    3         |         2         |         1    |
        //      |              |                   |              |
        // -100 |              |                   |              |
        //      |              |                   |              |
        // -200 |              |                   |              |
        //      |              |                   |              |
        // -300 |              |                   |              |
        //      |              |                   |              |
        // -400 |              |                   |              |
        //      |              |                   |              |
        // -500 W--------------D-------------------B--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(350, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in C-Y-W-D is at ~(-350, 0) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 300), // #3
        };

        //  800 Y--------------C-------------------A--------------X
        //      |              |                   |              |
        //  700 |              |                   |              |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |              |                   |              |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |    3         |         2         |         1    |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 |         ●    |                   |              |
        //      |              |                   |              |
        // -100 |              |                   |              |
        //      |              |                   |              |
        // -200 W--------------D-------------------B--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(650, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in C-Y-W-D is at ~(-50, 300) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 700), // #3
        };

        // 1200 Y--------------C-------------------A--------------X
        //      |              |                   |              |
        // 1100 |              |                   |              |
        //      |              |                   |              |
        // 1000 |              |                   |              |
        //      |              |                   |              |
        //  900 |              |                   |              |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 |    3         |         2         |         1    |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |              |                   |              |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 W--------------D-------------------B--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(1050, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in C-Y-W-D is at ~(350, 700) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 800), // #1
            new VoronoiSite(500, 600), // #2
            new VoronoiSite(500, 400), // #3
            new VoronoiSite(500, 200), // #4
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                        1                        |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                        2                        |
        //      |                                                 |
        //  500 C-------------------------------------------------D
        //      |                                                 |
        //  400 |                        3                        |
        //      |                                                 |
        //  300 E-------------------------------------------------F
        //      |                                                 |
        //  200 |                        4                        |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 300), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 300), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 850) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(500, 600) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #3 in D-C-E-F is at ~(500, 400) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #4 in F-E-Y-W is at ~(500, 150) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 300), // #1
            new VoronoiSite(0, 100), // #2
            new VoronoiSite(0, -100), // #3
            new VoronoiSite(0, -300), // #4
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        1                        |
        //      |                                                 |
        //  200 A-------------------------------------------------B
        //      |                                                 |
        //  100 |                        2                        |
        //      |                                                 |
        //    0 C-------------------------------------------------D
        //      |                                                 |
        // -100 |                        3                        |
        //      |                                                 |
        // -200 E-------------------------------------------------F
        //      |                                                 |
        // -300 |                        4                        |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -500, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 350) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(0, 100) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #3 in D-C-E-F is at ~(0, -100) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
        // Centroid of #4 in F-E-Y-W is at ~(0, -350) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 600), // #1
            new VoronoiSite(300, 400), // #2
            new VoronoiSite(300, 200), // #3
            new VoronoiSite(300, 0), // #4
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                        1                        |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                        2                        |
        //      |                                                 |
        //  300 C-------------------------------------------------D
        //      |                                                 |
        //  200 |                        3                        |
        //      |                                                 |
        //  100 E-------------------------------------------------F
        //      |                                                 |
        //    0 |         ●              4                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, 100), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 100), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 650) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(300, 400) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #3 in D-C-E-F is at ~(300, 200) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #4 in F-E-Y-W is at ~(300, -50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1000), // #1
            new VoronoiSite(700, 800), // #2
            new VoronoiSite(700, 600), // #3
            new VoronoiSite(700, 400), // #4
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                        1                        |
        //      |                                                 |
        //  900 A-------------------------------------------------B
        //      |                                                 |
        //  800 |                        2                        |
        //      |                                                 |
        //  700 C-------------------------------------------------D
        //      |                                                 |
        //  600 |                        3                        |
        //      |                                                 |
        //  500 E-------------------------------------------------F
        //      |                                                 |
        //  400 |                        4                        |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 500), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 1050) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #2 in B-A-C-D is at ~(700, 800) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #3 in D-C-E-F is at ~(700, 600) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #4 in F-E-Y-W is at ~(700, 350) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 500), // #1
            new VoronoiSite(600, 500), // #2
            new VoronoiSite(400, 500), // #3
            new VoronoiSite(200, 500), // #4
        };

        // 1000 Y--------------E---------C---------A--------------X
        //      |              |         |         |              |
        //  900 |              |         |         |              |
        //      |              |         |         |              |
        //  800 |              |         |         |              |
        //      |              |         |         |              |
        //  700 |              |         |         |              |
        //      |              |         |         |              |
        //  600 |              |         |         |              |
        //      |              |         |         |              |
        //  500 |         4    |    3    |    2    |    1         |
        //      |              |         |         |              |
        //  400 |              |         |         |              |
        //      |              |         |         |              |
        //  300 |              |         |         |              |
        //      |              |         |         |              |
        //  200 |              |         |         |              |
        //      |              |         |         |              |
        //  100 |              |         |         |              |
        //      |              |         |         |              |
        //    0 W--------------F---------D---------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 1000), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(850, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(600, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in C-E-F-D is at ~(400, 500) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in E-Y-W-F is at ~(150, 500) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 0), // #1
            new VoronoiSite(100, 0), // #2
            new VoronoiSite(-100, 0), // #3
            new VoronoiSite(-300, 0), // #4
        };

        //  500 Y--------------E---------C---------A--------------X
        //      |              |         |         |              |
        //  400 |              |         |         |              |
        //      |              |         |         |              |
        //  300 |              |         |         |              |
        //      |              |         |         |              |
        //  200 |              |         |         |              |
        //      |              |         |         |              |
        //  100 |              |         |         |              |
        //      |              |         |         |              |
        //    0 |         4    |    3    |    2    |    1         |
        //      |              |         |         |              |
        // -100 |              |         |         |              |
        //      |              |         |         |              |
        // -200 |              |         |         |              |
        //      |              |         |         |              |
        // -300 |              |         |         |              |
        //      |              |         |         |              |
        // -400 |              |         |         |              |
        //      |              |         |         |              |
        // -500 W--------------F---------D---------B--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -200, -500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(350, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(100, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in C-E-F-D is at ~(-100, 0) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #4 in E-Y-W-F is at ~(-350, 0) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 300), // #1
            new VoronoiSite(400, 300), // #2
            new VoronoiSite(200, 300), // #3
            new VoronoiSite(0, 300), // #4
        };

        //  800 Y--------------E---------C---------A--------------X
        //      |              |         |         |              |
        //  700 |              |         |         |              |
        //      |              |         |         |              |
        //  600 |              |         |         |              |
        //      |              |         |         |              |
        //  500 |              |         |         |              |
        //      |              |         |         |              |
        //  400 |              |         |         |              |
        //      |              |         |         |              |
        //  300 |         4    |    3    |    2    |    1         |
        //      |              |         |         |              |
        //  200 |              |         |         |              |
        //      |              |         |         |              |
        //  100 |              |         |         |              |
        //      |              |         |         |              |
        //    0 |         ●    |         |         |              |
        //      |              |         |         |              |
        // -100 |              |         |         |              |
        //      |              |         |         |              |
        // -200 W--------------F---------D---------B--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 800), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 100, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(650, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(400, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in C-E-F-D is at ~(200, 300) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in E-Y-W-F is at ~(-50, 300) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 700), // #1
            new VoronoiSite(800, 700), // #2
            new VoronoiSite(600, 700), // #3
            new VoronoiSite(400, 700), // #4
        };

        // 1200 Y--------------E---------C---------A--------------X
        //      |              |         |         |              |
        // 1100 |              |         |         |              |
        //      |              |         |         |              |
        // 1000 |              |         |         |              |
        //      |              |         |         |              |
        //  900 |              |         |         |              |
        //      |              |         |         |              |
        //  800 |              |         |         |              |
        //      |              |         |         |              |
        //  700 |         4    |    3    |    2    |    1         |
        //      |              |         |         |              |
        //  600 |              |         |         |              |
        //      |              |         |         |              |
        //  500 |              |         |         |              |
        //      |              |         |         |              |
        //  400 |              |         |         |              |
        //      |              |         |         |              |
        //  300 |              |         |         |              |
        //      |              |         |         |              |
        //  200 W--------------F---------D---------B--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 1200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-B-Z is at ~(1050, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-C-D-B is at ~(800, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in C-E-F-D is at ~(600, 700) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #4 in E-Y-W-F is at ~(350, 700) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 300), // #2
        };

        // 1000 X------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |              1                  ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                  2              |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(333, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in B-A-Y is at ~(667, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(200, -200), // #2
        };

        //  500 X------------------------------------------------#B
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |              1                  ,·'             |
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 |                       ,·'                       |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 |             ,·'                  2              |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 A#------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(-167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in B-A-Y is at ~(167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(500, 100), // #2
        };

        //  800 X------------------------------------------------#B
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |              1                  ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                  2              |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 A#------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(133, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in B-A-Y is at ~(467, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 500), // #2
        };

        // 1200 X------------------------------------------------#B
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |              1                  ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                  2              |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 A#------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(533, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in B-A-Y is at ~(867, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 300), // #2
        };

        // 1000 A#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                  1              |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |              2                  '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B is at ~(667, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in A-Y-B is at ~(333, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, -200), // #2
        };

        //  500 A#------------------------------------------------X
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,                  1              |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |                       '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 |              2                  '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 Y------------------------------------------------#B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B is at ~(167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in A-Y-B is at ~(-167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 100), // #2
        };

        //  800 A#------------------------------------------------X
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,                  1              |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |              2                  '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 Y------------------------------------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B is at ~(467, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in A-Y-B is at ~(133, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 500), // #2
        };

        // 1200 A#------------------------------------------------X
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,                  1              |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |              2                  '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 Y------------------------------------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-A-B is at ~(867, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in A-Y-B is at ~(533, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(600, 400), // #2
        };

        // 1000 X--------------------------------------#B---------Z
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |         1                  ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                  2                   |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 A'                                                |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(267, 733) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #2 in Z-B-A-Y-W is at ~(610, 390) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(609.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(390.20).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(100, -100), // #2
        };

        //  500 X--------------------------------------#B---------Z
        //      |                                    ,'           |
        //  400 |                                 ,·'             |
        //      |                               ,'                |
        //  300 |         1                  ,·'                  |
        //      |                          ,'                     |
        //  200 |                       ,·'                       |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 |             ,·'        ●                        |
        //      |           ,'                                    |
        // -100 |        ,·'                  2                   |
        //      |      ,'                                         |
        // -200 |   ,·'                                           |
        //      | ,'                                              |
        // -300 A'                                                |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(-233, 233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
        // Centroid of #2 in Z-B-A-Y-W is at ~(110, -110) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(109.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-109.80).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(400, 200), // #2
        };

        //  800 X--------------------------------------#B---------Z
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |         1                  ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                  2                   |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A'        ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(67, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in Z-B-A-Y-W is at ~(410, 190) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(409.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(190.20).Within(0.01));
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(800, 600), // #2
        };

        // 1200 X--------------------------------------#B---------Z
        //      |                                    ,'           |
        // 1100 |                                 ,·'             |
        //      |                               ,'                |
        // 1000 |         1                  ,·'                  |
        //      |                          ,'                     |
        //  900 |                       ,·'                       |
        //      |                     ,'                          |
        //  800 |                  ,·'                            |
        //      |                ,'                               |
        //  700 |             ,·'                                 |
        //      |           ,'                                    |
        //  600 |        ,·'                  2                   |
        //      |      ,'                                         |
        //  500 |   ,·'                                           |
        //      | ,'                                              |
        //  400 A'                                                |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(467, 933) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #2 in Z-B-A-Y-W is at ~(810, 590) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(809.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(590.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(400, 400), // #2
        };

        // 1000 Y---------A#--------------------------------------X
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                  1         |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                   2                  '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 |                                                'B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(733, 733) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(390, 390) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(390.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(390.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, -100), // #2
        };

        //  500 Y---------A#--------------------------------------X
        //      |           ',                                    |
        //  400 |             '·,                                 |
        //      |                ',                               |
        //  300 |                  '·,                  1         |
        //      |                     ',                          |
        //  200 |                       '·,                       |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 |                        ●        '·,             |
        //      |                                    ',           |
        // -100 |                   2                  '·,        |
        //      |                                         ',      |
        // -200 |                                           '·,   |
        //      |                                              ', |
        // -300 |                                                'B
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(233, 233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(-110, -110) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-109.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-109.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(200, 200), // #2
        };

        //  800 Y---------A#--------------------------------------X
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                  1         |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                   2                  '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 |         ●                                      'B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(533, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(190, 190) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(190.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(190.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(600, 600), // #2
        };

        // 1200 Y---------A#--------------------------------------X
        //      |           ',                                    |
        // 1100 |             '·,                                 |
        //      |                ',                               |
        // 1000 |                  '·,                  1         |
        //      |                     ',                          |
        //  900 |                       '·,                       |
        //      |                          ',                     |
        //  800 |                            '·,                  |
        //      |                               ',                |
        //  700 |                                 '·,             |
        //      |                                    ',           |
        //  600 |                   2                  '·,        |
        //      |                                         ',      |
        //  500 |                                           '·,   |
        //      |                                              ', |
        //  400 |                                                'B
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(933, 933) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(590, 590) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(590.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(590.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(400, 600), // #2
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                ,A
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                   2                  ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                  1         |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 Z---------B#--------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(733, 267) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(390, 610) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(390.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(609.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -300), // #1
            new VoronoiSite(-100, 100), // #2
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                ,A
        //      |                                              ,' |
        //  200 |                                           ,·'   |
        //      |                                         ,'      |
        //  100 |                   2                  ,·'        |
        //      |                                    ,'           |
        //    0 |                        ●        ,·'             |
        //      |                               ,'                |
        // -100 |                            ,·'                  |
        //      |                          ,'                     |
        // -200 |                       ,·'                       |
        //      |                     ,'                          |
        // -300 |                  ,·'                  1         |
        //      |                ,'                               |
        // -400 |             ,·'                                 |
        //      |           ,'                                    |
        // -500 Z---------B#--------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(233, -233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(-110, 110) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-109.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(109.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 0), // #1
            new VoronoiSite(200, 400), // #2
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                ,A
        //      |                                              ,' |
        //  500 |                                           ,·'   |
        //      |                                         ,'      |
        //  400 |                   2                  ,·'        |
        //      |                                    ,'           |
        //  300 |                                 ,·'             |
        //      |                               ,'                |
        //  200 |                            ,·'                  |
        //      |                          ,'                     |
        //  100 |                       ,·'                       |
        //      |                     ,'                          |
        //    0 |         ●        ,·'                  1         |
        //      |                ,'                               |
        // -100 |             ,·'                                 |
        //      |           ,'                                    |
        // -200 Z---------B#--------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(533, 67) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(190, 410) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(190.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(409.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 400), // #1
            new VoronoiSite(600, 800), // #2
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                ,A
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                   2                  ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                  1         |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 Z---------B#--------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(933, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in A-Y-W-Z-B is at ~(590, 810) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(590.20).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(809.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(600, 600), // #2
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B,                                                |
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                  2                   |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |         1                  '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 X--------------------------------------#A---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(267, 267) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in W-Z-B-A-Y is at ~(610, 610) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(609.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(609.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, -300), // #1
            new VoronoiSite(100, 100), // #2
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B,                                                |
        //      | ',                                              |
        //  200 |   '·,                                           |
        //      |      ',                                         |
        //  100 |        '·,                  2                   |
        //      |           ',                                    |
        //    0 |             '·,        ●                        |
        //      |                ',                               |
        // -100 |                  '·,                            |
        //      |                     ',                          |
        // -200 |                       '·,                       |
        //      |                          ',                     |
        // -300 |         1                  '·,                  |
        //      |                               ',                |
        // -400 |                                 '·,             |
        //      |                                    ',           |
        // -500 X--------------------------------------#A---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(-233, -233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
        // Centroid of #2 in W-Z-B-A-Y is at ~(110, 110) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(109.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(109.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 400), // #2
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 B,                                                |
        //      | ',                                              |
        //  500 |   '·,                                           |
        //      |      ',                                         |
        //  400 |        '·,                  2                   |
        //      |           ',                                    |
        //  300 |             '·,                                 |
        //      |                ',                               |
        //  200 |                  '·,                            |
        //      |                     ',                          |
        //  100 |                       '·,                       |
        //      |                          ',                     |
        //    0 |         1                  '·,                  |
        //      |                               ',                |
        // -100 |                                 '·,             |
        //      |                                    ',           |
        // -200 X--------------------------------------#A---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(67, 67) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
        // Centroid of #2 in W-Z-B-A-Y is at ~(410, 410) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(409.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(409.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(800, 800), // #2
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 B,                                                |
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                  2                   |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |         1                  '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 X--------------------------------------#A---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(467, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in W-Z-B-A-Y is at ~(810, 810) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(809.80).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(809.80).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 400), // #1
            new VoronoiSite(600, 800), // #2
        };

        // 1000 A#------------------------------------------------Y
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                  2                   |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |         1                  '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(333, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in Y-A-B is at ~(667, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, -100), // #1
            new VoronoiSite(100, 300), // #2
        };

        //  500 A#------------------------------------------------Y
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                  2                   |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |                       '·,                       |
        //      |                          ',                     |
        // -100 |         1                  '·,                  |
        //      |                               ',                |
        // -200 |                                 '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 X------------------------------------------------#B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(-167, -167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #2 in Y-A-B is at ~(167, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(400, 600), // #2
        };

        //  800 A#------------------------------------------------Y
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                  2                   |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |         1                  '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 X------------------------------------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(133, 133) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in Y-A-B is at ~(467, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 600), // #1
            new VoronoiSite(800, 1000), // #2
        };

        // 1200 A#------------------------------------------------Y
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                  2                   |
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |         1                  '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 X------------------------------------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(533, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in Y-A-B is at ~(867, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(800, 400), // #2
        };

        // 1000 X------------------------------------------------#A
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                   1                  ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                  2         |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 B#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(333, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in A-B-Y is at ~(667, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(300, -100), // #2
        };

        //  500 X------------------------------------------------#A
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                   1                  ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 |                       ,·'                       |
        //      |                     ,'                          |
        // -100 |                  ,·'                  2         |
        //      |                ,'                               |
        // -200 |             ,·'                                 |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 B#------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(-167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in A-B-Y is at ~(167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(600, 200), // #2
        };

        //  800 X------------------------------------------------#A
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                   1                  ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                  2         |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 B#------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(133, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in A-B-Y is at ~(467, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(1000, 600), // #2
        };

        // 1200 X------------------------------------------------#A
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                   1                  ,·'        |
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                  2         |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 B#------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in A-X-B is at ~(533, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in A-B-Y is at ~(867, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(400, 200), // #2
        };

        // 1000 B#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                  1         |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                   2                  '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-B-A is at ~(667, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(333, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(-100, -300), // #2
        };

        //  500 B#------------------------------------------------X
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 |                  '·,                  1         |
        //      |                     ',                          |
        //    0 |                       '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 |                                 '·,             |
        //      |                                    ',           |
        // -300 |                   2                  '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 Y------------------------------------------------#A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-B-A is at ~(167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(-167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 400), // #1
            new VoronoiSite(200, 0), // #2
        };

        //  800 B#------------------------------------------------X
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                  1         |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |         ●         2                  '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 Y------------------------------------------------#A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-B-A is at ~(467, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(133, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 800), // #1
            new VoronoiSite(600, 400), // #2
        };

        // 1200 B#------------------------------------------------X
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                  1         |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                   2                  '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 Y------------------------------------------------#A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in X-B-A is at ~(867, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(533, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(200, 600), // #2
        };

        // 1000 Y------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |         2                  ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                  1                   |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A#------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X is at ~(667, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(333, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, -300), // #1
            new VoronoiSite(-300, 100), // #2
        };

        //  500 Y------------------------------------------------#B
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 |         2                  ,·'                  |
        //      |                          ,'                     |
        //    0 |                       ,·'                       |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 |             ,·'                                 |
        //      |           ,'                                    |
        // -300 |        ,·'                  1                   |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 A#------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X is at ~(167, -167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(-167, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 400), // #2
        };

        //  800 Y------------------------------------------------#B
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |         2                  ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'                  1                   |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 A#------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X is at ~(467, 133) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(133, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(400, 800), // #2
        };

        // 1200 Y------------------------------------------------#B
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |         2                  ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                  1                   |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 A#------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X is at ~(867, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in B-Y-A is at ~(533, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 900), // #2
        };

        // 1000 A##-----------------------------------------------Z
        //      |  ''·,,                                          |
        //  900 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  800 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  700 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  600 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  500 |                        1                      ''B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-A-X-Y is at ~(444, 389) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(444.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(388.89).Within(0.01));
        // Centroid of #2 in Z-A-B is at ~(667, 833) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 400), // #2
        };

        //  500 A##-----------------------------------------------Z
        //      |  ''·,,                                          |
        //  400 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //    0 |                        1                      ''B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-A-X-Y is at ~(-56, -111) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-55.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-111.11).Within(0.01));
        // Centroid of #2 in Z-A-B is at ~(167, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 700), // #2
        };

        //  800 A##-----------------------------------------------Z
        //      |  ''·,,                                          |
        //  700 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  600 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  500 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  400 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  300 |                        1                      ''B
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-A-X-Y is at ~(244, 189) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(244.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(188.89).Within(0.01));
        // Centroid of #2 in Z-A-B is at ~(467, 633) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 1100), // #2
        };

        // 1200 A##-----------------------------------------------Z
        //      |  ''·,,                                          |
        // 1100 |       ''·,,                      2              |
        //      |            ''·,,                                |
        // 1000 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  900 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  800 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  700 |                        1                      ''B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-A-X-Y is at ~(644, 589) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(644.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(588.89).Within(0.01));
        // Centroid of #2 in Z-A-B is at ~(867, 1033) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 300), // #2
        };

        // 1000 X-------------------------------------------------A
        //      |                                                '|
        //  900 |                                              ,' |
        //      |                                             ,   |
        //  800 |                                            ·    |
        //      |                                           '     |
        //  700 |                                         ,'      |
        //      |                                        ,        |
        //  600 |                                       ·         |
        //      |                                      '          |
        //  500 |                        1           ,'           |
        //      |                                   ,             |
        //  400 |                                  ·              |
        //      |                                 '               |
        //  300 |                               ,'           2    |
        //      |                              ,                  |
        //  200 |                             ·                   |
        //      |                            '                    |
        //  100 |                          ,'                     |
        //      |                         ,                       |
        //    0 Y------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-X-Y-B is at ~(389, 556) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(388.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(555.56).Within(0.01));
        // Centroid of #2 in A-B-Z is at ~(833, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, -200), // #2
        };

        //  500 X-------------------------------------------------A
        //      |                                                '|
        //  400 |                                              ,' |
        //      |                                             ,   |
        //  300 |                                            ·    |
        //      |                                           '     |
        //  200 |                                         ,'      |
        //      |                                        ,        |
        //  100 |                                       ·         |
        //      |                                      '          |
        //    0 |                        1           ,'           |
        //      |                                   ,             |
        // -100 |                                  ·              |
        //      |                                 '               |
        // -200 |                               ,'           2    |
        //      |                              ,                  |
        // -300 |                             ·                   |
        //      |                            '                    |
        // -400 |                          ,'                     |
        //      |                         ,                       |
        // -500 Y------------------------B------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-X-Y-B is at ~(-111, 56) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-111.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(55.56).Within(0.01));
        // Centroid of #2 in A-B-Z is at ~(333, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 100), // #2
        };

        //  800 X-------------------------------------------------A
        //      |                                                '|
        //  700 |                                              ,' |
        //      |                                             ,   |
        //  600 |                                            ·    |
        //      |                                           '     |
        //  500 |                                         ,'      |
        //      |                                        ,        |
        //  400 |                                       ·         |
        //      |                                      '          |
        //  300 |                        1           ,'           |
        //      |                                   ,             |
        //  200 |                                  ·              |
        //      |                                 '               |
        //  100 |                               ,'           2    |
        //      |                              ,                  |
        //    0 |         ●                   ·                   |
        //      |                            '                    |
        // -100 |                          ,'                     |
        //      |                         ,                       |
        // -200 Y------------------------B------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-X-Y-B is at ~(189, 356) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(188.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(355.56).Within(0.01));
        // Centroid of #2 in A-B-Z is at ~(633, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(1100, 500), // #2
        };

        // 1200 X-------------------------------------------------A
        //      |                                                '|
        // 1100 |                                              ,' |
        //      |                                             ,   |
        // 1000 |                                            ·    |
        //      |                                           '     |
        //  900 |                                         ,'      |
        //      |                                        ,        |
        //  800 |                                       ·         |
        //      |                                      '          |
        //  700 |                        1           ,'           |
        //      |                                   ,             |
        //  600 |                                  ·              |
        //      |                                 '               |
        //  500 |                               ,'           2    |
        //      |                              ,                  |
        //  400 |                             ·                   |
        //      |                            '                    |
        //  300 |                          ,'                     |
        //      |                         ,                       |
        //  200 Y------------------------B------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-X-Y-B is at ~(589, 756) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(588.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(755.56).Within(0.01));
        // Centroid of #2 in A-B-Z is at ~(1033, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 100), // #2
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 B,,                      1                        |
        //      |  ''·,,                                          |
        //  400 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //    0 Z-----------------------------------------------##A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-Y-B-A is at ~(556, 611) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(555.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(611.11).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(333, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, -400), // #2
        };

        //  500 Y-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 B,,                      1                        |
        //      |  ''·,,                                          |
        // -100 |       ''·,,                                     |
        //      |            ''·,,                                |
        // -200 |                 ''·,,                           |
        //      |                      ''·,,                      |
        // -300 |                           ''·,,                 |
        //      |                                ''·,,            |
        // -400 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        // -500 Z-----------------------------------------------##A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-Y-B-A is at ~(56, 111) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(55.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(111.11).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(-167, -333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, -100), // #2
        };

        //  800 Y-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B,,                      1                        |
        //      |  ''·,,                                          |
        //  200 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  100 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //    0 |         ●                 ''·,,                 |
        //      |                                ''·,,            |
        // -100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        // -200 Z-----------------------------------------------##A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-Y-B-A is at ~(356, 411) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(355.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(411.11).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(133, -33) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 300), // #2
        };

        // 1200 Y-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 B,,                      1                        |
        //      |  ''·,,                                          |
        //  600 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  500 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  400 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  300 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //  200 Z-----------------------------------------------##A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-Y-B-A is at ~(756, 811) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(755.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(811.11).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(533, 367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 700), // #2
        };

        // 1000 Z------------------------B------------------------Y
        //      |                       '                         |
        //  900 |                     ,'                          |
        //      |                    ,                            |
        //  800 |                   ·                             |
        //      |                  '                              |
        //  700 |    2           ,'                               |
        //      |               ,                                 |
        //  600 |              ·                                  |
        //      |             '                                   |
        //  500 |           ,'           1                        |
        //      |          ,                                      |
        //  400 |         ·                                       |
        //      |        '                                        |
        //  300 |      ,'                                         |
        //      |     ,                                           |
        //  200 |    ·                                            |
        //      |   '                                             |
        //  100 | ,'                                              |
        //      |,                                                |
        //    0 A-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in Y-B-A-X is at ~(611, 444) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(611.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(444.44).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(167, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-400, 200), // #2
        };

        //  500 Z------------------------B------------------------Y
        //      |                       '                         |
        //  400 |                     ,'                          |
        //      |                    ,                            |
        //  300 |                   ·                             |
        //      |                  '                              |
        //  200 |    2           ,'                               |
        //      |               ,                                 |
        //  100 |              ·                                  |
        //      |             '                                   |
        //    0 |           ,'           1                        |
        //      |          ,                                      |
        // -100 |         ·                                       |
        //      |        '                                        |
        // -200 |      ,'                                         |
        //      |     ,                                           |
        // -300 |    ·                                            |
        //      |   '                                             |
        // -400 | ,'                                              |
        //      |,                                                |
        // -500 A-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in Y-B-A-X is at ~(111, -56) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(111.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-55.56).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(-333, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, 500), // #2
        };

        //  800 Z------------------------B------------------------Y
        //      |                       '                         |
        //  700 |                     ,'                          |
        //      |                    ,                            |
        //  600 |                   ·                             |
        //      |                  '                              |
        //  500 |    2           ,'                               |
        //      |               ,                                 |
        //  400 |              ·                                  |
        //      |             '                                   |
        //  300 |           ,'           1                        |
        //      |          ,                                      |
        //  200 |         ·                                       |
        //      |        '                                        |
        //  100 |      ,'                                         |
        //      |     ,                                           |
        //    0 |    ·    ●                                       |
        //      |   '                                             |
        // -100 | ,'                                              |
        //      |,                                                |
        // -200 A-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in Y-B-A-X is at ~(411, 244) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(411.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(244.44).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(-33, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 900), // #2
        };

        // 1200 Z------------------------B------------------------Y
        //      |                       '                         |
        // 1100 |                     ,'                          |
        //      |                    ,                            |
        // 1000 |                   ·                             |
        //      |                  '                              |
        //  900 |    2           ,'                               |
        //      |               ,                                 |
        //  800 |              ·                                  |
        //      |             '                                   |
        //  700 |           ,'           1                        |
        //      |          ,                                      |
        //  600 |         ·                                       |
        //      |        '                                        |
        //  500 |      ,'                                         |
        //      |     ,                                           |
        //  400 |    ·                                            |
        //      |   '                                             |
        //  300 | ,'                                              |
        //      |,                                                |
        //  200 A-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in Y-B-A-X is at ~(811, 644) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(811.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(644.44).Within(0.01));
        // Centroid of #2 in B-Z-A is at ~(367, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 900), // #2
        };

        // 1000 Z-----------------------------------------------##A
        //      |                                          ,,·''  |
        //  900 |              2                      ,,·''       |
        //      |                                ,,·''            |
        //  800 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  700 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  600 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  500 B''                      1                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-Y-X is at ~(556, 389) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(555.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(388.89).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(333, 833) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 400), // #2
        };

        //  500 Z-----------------------------------------------##A
        //      |                                          ,,·''  |
        //  400 |              2                      ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //    0 B''                      1                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-Y-X is at ~(56, -111) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(55.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-111.11).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(-167, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 700), // #2
        };

        //  800 Z-----------------------------------------------##A
        //      |                                          ,,·''  |
        //  700 |              2                      ,,·''       |
        //      |                                ,,·''            |
        //  600 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  500 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  400 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  300 B''                      1                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-Y-X is at ~(356, 189) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(355.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(188.89).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(133, 633) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 1100), // #2
        };

        // 1200 Z-----------------------------------------------##A
        //      |                                          ,,·''  |
        // 1100 |              2                      ,,·''       |
        //      |                                ,,·''            |
        // 1000 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  900 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  800 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  700 B''                      1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-B-Y-X is at ~(756, 589) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(755.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(588.89).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(533, 1033) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 700), // #2
        };

        // 1000 Y------------------------B------------------------Z
        //      |                         '                       |
        //  900 |                          ',                     |
        //      |                            ,                    |
        //  800 |                             ·                   |
        //      |                              '                  |
        //  700 |                               ',           2    |
        //      |                                 ,               |
        //  600 |                                  ·              |
        //      |                                   '             |
        //  500 |                        1           ',           |
        //      |                                      ,          |
        //  400 |                                       ·         |
        //      |                                        '        |
        //  300 |                                         ',      |
        //      |                                           ,     |
        //  200 |                                            ·    |
        //      |                                             '   |
        //  100 |                                              ', |
        //      |                                                ,|
        //    0 X-------------------------------------------------A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(389, 444) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(388.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(444.44).Within(0.01));
        // Centroid of #2 in Z-B-A is at ~(833, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 200), // #2
        };

        //  500 Y------------------------B------------------------Z
        //      |                         '                       |
        //  400 |                          ',                     |
        //      |                            ,                    |
        //  300 |                             ·                   |
        //      |                              '                  |
        //  200 |                               ',           2    |
        //      |                                 ,               |
        //  100 |                                  ·              |
        //      |                                   '             |
        //    0 |                        1           ',           |
        //      |                                      ,          |
        // -100 |                                       ·         |
        //      |                                        '        |
        // -200 |                                         ',      |
        //      |                                           ,     |
        // -300 |                                            ·    |
        //      |                                             '   |
        // -400 |                                              ', |
        //      |                                                ,|
        // -500 X-------------------------------------------------A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(-111, -56) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-111.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-55.56).Within(0.01));
        // Centroid of #2 in Z-B-A is at ~(333, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 500), // #2
        };

        //  800 Y------------------------B------------------------Z
        //      |                         '                       |
        //  700 |                          ',                     |
        //      |                            ,                    |
        //  600 |                             ·                   |
        //      |                              '                  |
        //  500 |                               ',           2    |
        //      |                                 ,               |
        //  400 |                                  ·              |
        //      |                                   '             |
        //  300 |                        1           ',           |
        //      |                                      ,          |
        //  200 |                                       ·         |
        //      |                                        '        |
        //  100 |                                         ',      |
        //      |                                           ,     |
        //    0 |         ●                                  ·    |
        //      |                                             '   |
        // -100 |                                              ', |
        //      |                                                ,|
        // -200 X-------------------------------------------------A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(189, 244) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(188.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(244.44).Within(0.01));
        // Centroid of #2 in Z-B-A is at ~(633, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(1100, 900), // #2
        };

        // 1200 Y------------------------B------------------------Z
        //      |                         '                       |
        // 1100 |                          ',                     |
        //      |                            ,                    |
        // 1000 |                             ·                   |
        //      |                              '                  |
        //  900 |                               ',           2    |
        //      |                                 ,               |
        //  800 |                                  ·              |
        //      |                                   '             |
        //  700 |                        1           ',           |
        //      |                                      ,          |
        //  600 |                                       ·         |
        //      |                                        '        |
        //  500 |                                         ',      |
        //      |                                           ,     |
        //  400 |                                            ·    |
        //      |                                             '   |
        //  300 |                                              ', |
        //      |                                                ,|
        //  200 X-------------------------------------------------A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(589, 644) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(588.89).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(644.44).Within(0.01));
        // Centroid of #2 in Z-B-A is at ~(1033, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 100), // #2
        };

        // 1000 X-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        1                      ,,B
        //      |                                          ,,·''  |
        //  400 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                      2              |
        //      |  ,,·''                                          |
        //    0 A##-----------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(444, 611) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(444.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(611.11).Within(0.01));
        // Centroid of #2 in B-A-Z is at ~(667, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, -400), // #2
        };

        //  500 X-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        1                      ,,B
        //      |                                          ,,·''  |
        // -100 |                                     ,,·''       |
        //      |                                ,,·''            |
        // -200 |                           ,,·''                 |
        //      |                      ,,·''                      |
        // -300 |                 ,,·''                           |
        //      |            ,,·''                                |
        // -400 |       ,,·''                      2              |
        //      |  ,,·''                                          |
        // -500 A##-----------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(-56, 111) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-55.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(111.11).Within(0.01));
        // Centroid of #2 in B-A-Z is at ~(167, -333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, -100), // #2
        };

        //  800 X-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        1                      ,,B
        //      |                                          ,,·''  |
        //  200 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  100 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //    0 |         ●       ,,·''                           |
        //      |            ,,·''                                |
        // -100 |       ,,·''                      2              |
        //      |  ,,·''                                          |
        // -200 A##-----------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(244, 411) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(244.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(411.11).Within(0.01));
        // Centroid of #2 in B-A-Z is at ~(467, -33) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 300), // #2
        };

        // 1200 X-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        1                      ,,B
        //      |                                          ,,·''  |
        //  600 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  500 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  400 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  300 |       ,,·''                      2              |
        //      |  ,,·''                                          |
        //  200 A##-----------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-Y-X-A is at ~(644, 811) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(644.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(811.11).Within(0.01));
        // Centroid of #2 in B-A-Z is at ~(867, 367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 300), // #2
        };

        // 1000 A-------------------------------------------------X
        //      |'                                                |
        //  900 | ',                                              |
        //      |   ,                                             |
        //  800 |    ·                                            |
        //      |     '                                           |
        //  700 |      ',                                         |
        //      |        ,                                        |
        //  600 |         ·                                       |
        //      |          '                                      |
        //  500 |           ',           1                        |
        //      |             ,                                   |
        //  400 |              ·                                  |
        //      |               '                                 |
        //  300 |    2           ',                               |
        //      |                  ,                              |
        //  200 |                   ·                             |
        //      |                    '                            |
        //  100 |                     ',                          |
        //      |                       ,                         |
        //    0 Z------------------------B------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B-Y is at ~(611, 556) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(611.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(555.56).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(167, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-400, -200), // #2
        };

        //  500 A-------------------------------------------------X
        //      |'                                                |
        //  400 | ',                                              |
        //      |   ,                                             |
        //  300 |    ·                                            |
        //      |     '                                           |
        //  200 |      ',                                         |
        //      |        ,                                        |
        //  100 |         ·                                       |
        //      |          '                                      |
        //    0 |           ',           1                        |
        //      |             ,                                   |
        // -100 |              ·                                  |
        //      |               '                                 |
        // -200 |    2           ',                               |
        //      |                  ,                              |
        // -300 |                   ·                             |
        //      |                    '                            |
        // -400 |                     ',                          |
        //      |                       ,                         |
        // -500 Z------------------------B------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B-Y is at ~(111, 56) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(111.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(55.56).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(-333, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, 100), // #2
        };

        //  800 A-------------------------------------------------X
        //      |'                                                |
        //  700 | ',                                              |
        //      |   ,                                             |
        //  600 |    ·                                            |
        //      |     '                                           |
        //  500 |      ',                                         |
        //      |        ,                                        |
        //  400 |         ·                                       |
        //      |          '                                      |
        //  300 |           ',           1                        |
        //      |             ,                                   |
        //  200 |              ·                                  |
        //      |               '                                 |
        //  100 |    2           ',                               |
        //      |                  ,                              |
        //    0 |         ●         ·                             |
        //      |                    '                            |
        // -100 |                     ',                          |
        //      |                       ,                         |
        // -200 Z------------------------B------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B-Y is at ~(411, 356) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(411.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(355.56).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(-33, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 500), // #2
        };

        // 1200 A-------------------------------------------------X
        //      |'                                                |
        // 1100 | ',                                              |
        //      |   ,                                             |
        // 1000 |    ·                                            |
        //      |     '                                           |
        //  900 |      ',                                         |
        //      |        ,                                        |
        //  800 |         ·                                       |
        //      |          '                                      |
        //  700 |           ',           1                        |
        //      |             ,                                   |
        //  600 |              ·                                  |
        //      |               '                                 |
        //  500 |    2           ',                               |
        //      |                  ,                              |
        //  400 |                   ·                             |
        //      |                    '                            |
        //  300 |                     ',                          |
        //      |                       ,                         |
        //  200 Z------------------------B------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in X-A-B-Y is at ~(811, 756) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(811.11).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(755.56).Within(0.01));
        // Centroid of #2 in A-Z-B is at ~(367, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdge()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 800), // #1
            new VoronoiSite(0, 200), // #2
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 1                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 2                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdge_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 300), // #1
            new VoronoiSite(-500, -300), // #2
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 1                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 A-------------------------------------------------B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 2                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdge_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 600), // #1
            new VoronoiSite(-200, 0), // #2
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 1                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 A-------------------------------------------------B
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 2         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdge_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1000), // #1
            new VoronoiSite(200, 400), // #2
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 1                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 2                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 1000), // #1
            new VoronoiSite(200, 1000), // #2
        };

        // 1000 Y---------2--------------A--------------1---------X
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(-300, 500), // #2
        };

        //  500 Y---------2--------------A--------------1---------X
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 W------------------------B------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 800), // #1
            new VoronoiSite(0, 800), // #2
        };

        //  800 Y---------2--------------A--------------1---------X
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 W------------------------B------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1200), // #1
            new VoronoiSite(400, 1200), // #2
        };

        // 1200 Y---------2--------------A--------------1---------X
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 W------------------------B------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 200), // #1
            new VoronoiSite(1000, 800), // #2
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 2
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 B-------------------------------------------------A
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 1
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -300), // #1
            new VoronoiSite(500, 300), // #2
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 2
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 B-------------------------------------------------A
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 1
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 0), // #1
            new VoronoiSite(800, 600), // #2
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 2
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B-------------------------------------------------A
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       1
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 400), // #1
            new VoronoiSite(1200, 1000), // #2
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 2
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 B-------------------------------------------------A
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 1
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(800, 0), // #2
        };

        // 1000 Z------------------------B------------------------W
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 X---------1--------------A--------------2---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, -500), // #1
            new VoronoiSite(300, -500), // #2
        };

        //  500 Z------------------------B------------------------W
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 X---------1--------------A--------------2---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(600, -200), // #2
        };

        //  800 Z------------------------B------------------------W
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 X---------1--------------A--------------2---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(1000, 200), // #2
        };

        // 1200 Z------------------------B------------------------W
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 X---------1--------------A--------------2---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoPointsInAdjacentCorners()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 0), // #2
        };

        // 1000 1-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 2-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsInAdjacentCorners_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -500), // #2
        };

        //  500 1-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 A-------------------------------------------------B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 2-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
    }

    [Test]
    public void TwoPointsInAdjacentCorners_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, -200), // #2
        };

        //  800 1-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 A-------------------------------------------------B
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 2-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
    }

    [Test]
    public void TwoPointsInAdjacentCorners_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 200), // #2
        };

        // 1200 1-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 2-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(0, 1000), // #2
        };

        // 1000 2------------------------A------------------------1
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-500, 500), // #2
        };

        //  500 2------------------------A------------------------1
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 W------------------------B------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(-200, 800), // #2
        };

        //  800 2------------------------A------------------------1
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 W------------------------B------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(200, 1200), // #2
        };

        // 1200 2------------------------A------------------------1
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 W------------------------B------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(1000, 1000), // #2
        };

        // 1000 W-------------------------------------------------2
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 B-------------------------------------------------A
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(500, 500), // #2
        };

        //  500 W-------------------------------------------------2
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 B-------------------------------------------------A
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(800, 800), // #2
        };

        //  800 W-------------------------------------------------2
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B-------------------------------------------------A
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(1200, 1200), // #2
        };

        // 1200 W-------------------------------------------------2
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 B-------------------------------------------------A
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(1000, 0), // #2
        };

        // 1000 Z------------------------B------------------------W
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 1------------------------A------------------------2
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(500, -500), // #2
        };

        //  500 Z------------------------B------------------------W
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 1------------------------A------------------------2
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(800, -200), // #2
        };

        //  800 Z------------------------B------------------------W
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 1------------------------A------------------------2
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(1200, 200), // #2
        };

        // 1200 Z------------------------B------------------------W
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 1------------------------A------------------------2
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 200), // #2
        };

        // 1000 1-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 A-------------------------------------------------B
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 2                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 800) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -300), // #2
        };

        //  500 1-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 A-------------------------------------------------B
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 2                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, -200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, 0), // #2
        };

        //  800 1-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 A-------------------------------------------------B
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 2         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 600) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 100) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 400), // #2
        };

        // 1200 1-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 A-------------------------------------------------B
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 2                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 1000) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(200, 1000), // #2
        };

        // 1000 Y---------2-------------------A-------------------1
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 W-----------------------------B-------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(800, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-300, 500), // #2
        };

        //  500 Y---------2-------------------A-------------------1
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 |                        ●    |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 |                             |                   |
        //      |                             |                   |
        // -300 |                             |                   |
        //      |                             |                   |
        // -400 |                             |                   |
        //      |                             |                   |
        // -500 W-----------------------------B-------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(-200, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(0, 800), // #2
        };

        //  800 Y---------2-------------------A-------------------1
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 |         ●                   |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 W-----------------------------B-------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(600, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(100, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(400, 1200), // #2
        };

        // 1200 Y---------2-------------------A-------------------1
        //      |                             |                   |
        // 1100 |                             |                   |
        //      |                             |                   |
        // 1000 |                             |                   |
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 W-----------------------------B-------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(1000, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(1000, 800), // #2
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 2
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 B-------------------------------------------------A
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(500, 200) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(500, 300), // #2
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 2
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 B-------------------------------------------------A
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, -300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(0, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(800, 600), // #2
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 2
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 B-------------------------------------------------A
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(1200, 1000), // #2
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 2
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 B-------------------------------------------------A
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(700, 400) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 900) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(800, 0), // #2
        };

        // 1000 Z-------------------B-----------------------------W
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 1-------------------A-------------------2---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(200, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(300, -500), // #2
        };

        //  500 Z-------------------B-----------------------------W
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 |                   |    ●                        |
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 |                   |                             |
        //      |                   |                             |
        // -300 |                   |                             |
        //      |                   |                             |
        // -400 |                   |                             |
        //      |                   |                             |
        // -500 1-------------------A-------------------2---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(-300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(200, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(600, -200), // #2
        };

        //  800 Z-------------------B-----------------------------W
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 |         ●         |                             |
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 1-------------------A-------------------2---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(0, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(1000, 200), // #2
        };

        // 1200 Z-------------------B-----------------------------W
        //      |                   |                             |
        // 1100 |                   |                             |
        //      |                   |                             |
        // 1000 |                   |                             |
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 1-------------------A-------------------2---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in Z-X-A-B is at ~(400, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-Y-W is at ~(900, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(1000, 200), // #2
        };

        // 1000 Z-------------------------------------------------1
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 B-------------------------------------------------A
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 2
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(500, 800) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(500, -300), // #2
        };

        //  500 Z-------------------------------------------------1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 B-------------------------------------------------A
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 2
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(0, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(0, -200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(800, 0), // #2
        };

        //  800 Z-------------------------------------------------1
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 B-------------------------------------------------A
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       2
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(300, 600) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(300, 100) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(1200, 400), // #2
        };

        // 1200 Z-------------------------------------------------1
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B-------------------------------------------------A
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 2
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(700, 1000) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(200, 0), // #2
        };

        // 1000 W-----------------------------B-------------------Z
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 Y---------2-------------------A-------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(800, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(-300, -500), // #2
        };

        //  500 W-----------------------------B-------------------Z
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 |                        ●    |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 |                             |                   |
        //      |                             |                   |
        // -300 |                             |                   |
        //      |                             |                   |
        // -400 |                             |                   |
        //      |                             |                   |
        // -500 Y---------2-------------------A-------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(-200, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(0, -200), // #2
        };

        //  800 W-----------------------------B-------------------Z
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 |         ●                   |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 Y---------2-------------------A-------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(600, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(100, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(400, 200), // #2
        };

        // 1200 W-----------------------------B-------------------Z
        //      |                             |                   |
        // 1100 |                             |                   |
        //      |                             |                   |
        // 1000 |                             |                   |
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                             |                   |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 Y---------2-------------------A-------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(1000, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(0, 800), // #2
        };

        // 1000 Y-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 2                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 A-------------------------------------------------B
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 1-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(500, 200) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(-500, 300), // #2
        };

        //  500 Y-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 2                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |                        ●                        |
        //      |                                                 |
        // -100 A-------------------------------------------------B
        //      |                                                 |
        // -200 |                                                 |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 1-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(0, -300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(0, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(-200, 600), // #2
        };

        //  800 Y-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 2                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 A-------------------------------------------------B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 1-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(200, 1000), // #2
        };

        // 1200 Y-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 2                                                 |
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 A-------------------------------------------------B
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 1-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(700, 400) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(700, 900) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(800, 1000), // #2
        };

        // 1000 1-------------------A-------------------2---------Y
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 Z-------------------B-----------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(200, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(300, 500), // #2
        };

        //  500 1-------------------A-------------------2---------Y
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 |                   |    ●                        |
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 |                   |                             |
        //      |                   |                             |
        // -300 |                   |                             |
        //      |                   |                             |
        // -400 |                   |                             |
        //      |                   |                             |
        // -500 Z-------------------B-----------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(-300, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(200, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(600, 800), // #2
        };

        //  800 1-------------------A-------------------2---------Y
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 |         ●         |                             |
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 Z-------------------B-----------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(0, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(1000, 1200), // #2
        };

        // 1200 1-------------------A-------------------2---------Y
        //      |                   |                             |
        // 1100 |                   |                             |
        //      |                   |                             |
        // 1000 |                   |                             |
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                   |                             |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 Z-------------------B-----------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Z"); // #1 has Z
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-A-X-Z is at ~(400, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in W-Y-A-B is at ~(900, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void TwoPointsInOppositeCorners()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(1000, 0), // #2
        };

        // 1000 1------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A#------------------------------------------------2
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(333, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(667, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    [Test]
    public void TwoPointsInOppositeCorners_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(500, -500), // #2
        };

        //  500 1------------------------------------------------#B
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 |                       ,·'                       |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 |             ,·'                                 |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 A#------------------------------------------------2
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(-167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    [Test]
    public void TwoPointsInOppositeCorners_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(800, -200), // #2
        };

        //  800 1------------------------------------------------#B
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 A#------------------------------------------------2
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(133, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(467, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    [Test]
    public void TwoPointsInOppositeCorners_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(1200, 200), // #2
        };

        // 1200 1------------------------------------------------#B
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 A#------------------------------------------------2
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(533, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(867, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(0, 0), // #2
        };

        // 1000 A#------------------------------------------------1
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 2------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(667, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(333, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-500, -500), // #2
        };

        //  500 A#------------------------------------------------1
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |                       '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 |                                 '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 2------------------------------------------------#B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(167, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(-167, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(-200, -200), // #2
        };

        //  800 A#------------------------------------------------1
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 2------------------------------------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(467, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(133, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(200, 200), // #2
        };

        // 1200 A#------------------------------------------------1
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 2------------------------------------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y

        // Assert

        // Centroid of #1 in B-X-A is at ~(867, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in Y-B-A is at ~(533, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    [Test]
    public void TwoPointsOnOppositeEdges()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 800), // #1
            new VoronoiSite(1000, 200), // #2
        };

        // 1000 X---------------------------------------B---------Z
        //      |                                     ,'          |
        //  900 |                                    ·            |
        //      |                                  ,'             |
        //  800 1                                 ·               |
        //      |                               ,'                |
        //  700 |                              ·                  |
        //      |                            ,'                   |
        //  600 |                           ·                     |
        //      |                         ,'                      |
        //  500 |                        ·                        |
        //      |                      ,'                         |
        //  400 |                     ·                           |
        //      |                   ,'                            |
        //  300 |                  ·                              |
        //      |                ,'                               |
        //  200 |               ·                                 2
        //      |             ,'                                  |
        //  100 |            ·                                    |
        //      |          ,'                                     |
        //    0 Y---------A---------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(280, 600) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(280.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in Z-B-A-W is at ~(720, 400) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(720.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnOppositeEdges_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 300), // #1
            new VoronoiSite(500, -300), // #2
        };

        //  500 X---------------------------------------B---------Z
        //      |                                     ,'          |
        //  400 |                                    ·            |
        //      |                                  ,'             |
        //  300 1                                 ·               |
        //      |                               ,'                |
        //  200 |                              ·                  |
        //      |                            ,'                   |
        //  100 |                           ·                     |
        //      |                         ,'                      |
        //    0 |                        ·                        |
        //      |                      ,'                         |
        // -100 |                     ·                           |
        //      |                   ,'                            |
        // -200 |                  ·                              |
        //      |                ,'                               |
        // -300 |               ·                                 2
        //      |             ,'                                  |
        // -400 |            ·                                    |
        //      |          ,'                                     |
        // -500 Y---------A---------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(-220, 100) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-220.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in Z-B-A-W is at ~(220, -100) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(220.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnOppositeEdges_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 600), // #1
            new VoronoiSite(800, 0), // #2
        };

        //  800 X---------------------------------------B---------Z
        //      |                                     ,'          |
        //  700 |                                    ·            |
        //      |                                  ,'             |
        //  600 1                                 ·               |
        //      |                               ,'                |
        //  500 |                              ·                  |
        //      |                            ,'                   |
        //  400 |                           ·                     |
        //      |                         ,'                      |
        //  300 |                        ·                        |
        //      |                      ,'                         |
        //  200 |                     ·                           |
        //      |                   ,'                            |
        //  100 |                  ·                              |
        //      |                ,'                               |
        //    0 |         ●     ·                                 2
        //      |             ,'                                  |
        // -100 |            ·                                    |
        //      |          ,'                                     |
        // -200 Y---------A---------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(80, 400) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(80.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in Z-B-A-W is at ~(520, 200) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(520.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    [Test]
    public void TwoPointsOnOppositeEdges_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1000), // #1
            new VoronoiSite(1200, 400), // #2
        };

        // 1200 X---------------------------------------B---------Z
        //      |                                     ,'          |
        // 1100 |                                    ·            |
        //      |                                  ,'             |
        // 1000 1                                 ·               |
        //      |                               ,'                |
        //  900 |                              ·                  |
        //      |                            ,'                   |
        //  800 |                           ·                     |
        //      |                         ,'                      |
        //  700 |                        ·                        |
        //      |                      ,'                         |
        //  600 |                     ·                           |
        //      |                   ,'                            |
        //  500 |                  ·                              |
        //      |                ,'                               |
        //  400 |               ·                                 2
        //      |             ,'                                  |
        //  300 |            ·                                    |
        //      |          ,'                                     |
        //  200 Y---------A---------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(480, 800) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(480.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in Z-B-A-W is at ~(920, 600) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(920.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 0), // #1
            new VoronoiSite(200, 1000), // #2
        };

        // 1000 W---------2---------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                               ,,B
        //      |                                           ,,·'  |
        //  700 |                                       ,,·'      |
        //      |                                   ,,''          |
        //  600 |                               ,·''              |
        //      |                           ,·''                  |
        //  500 |                      ,,·''                      |
        //      |                  ,,·'                           |
        //  400 |              ,,·'                               |
        //      |          ,,''                                   |
        //  300 |      ,·''                                       |
        //      |  ,·''                                           |
        //  200 A''                                               |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y---------------------------------------1---------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(600, 280) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(280.00).Within(0.01));
        // Centroid of #2 in W-A-B-Z is at ~(400, 720) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(720.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -500), // #1
            new VoronoiSite(-300, 500), // #2
        };

        //  500 W---------2---------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                               ,,B
        //      |                                           ,,·'  |
        //  200 |                                       ,,·'      |
        //      |                                   ,,''          |
        //  100 |                               ,·''              |
        //      |                           ,·''                  |
        //    0 |                      ,,·''                      |
        //      |                  ,,·'                           |
        // -100 |              ,,·'                               |
        //      |          ,,''                                   |
        // -200 |      ,·''                                       |
        //      |  ,·''                                           |
        // -300 A''                                               |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y---------------------------------------1---------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(100, -220) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-220.00).Within(0.01));
        // Centroid of #2 in W-A-B-Z is at ~(-100, 220) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(220.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, -200), // #1
            new VoronoiSite(0, 800), // #2
        };

        //  800 W---------2---------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                               ,,B
        //      |                                           ,,·'  |
        //  500 |                                       ,,·'      |
        //      |                                   ,,''          |
        //  400 |                               ,·''              |
        //      |                           ,·''                  |
        //  300 |                      ,,·''                      |
        //      |                  ,,·'                           |
        //  200 |              ,,·'                               |
        //      |          ,,''                                   |
        //  100 |      ,·''                                       |
        //      |  ,·''                                           |
        //    0 A''       ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y---------------------------------------1---------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(400, 80) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(80.00).Within(0.01));
        // Centroid of #2 in W-A-B-Z is at ~(200, 520) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(520.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 200), // #1
            new VoronoiSite(400, 1200), // #2
        };

        // 1200 W---------2---------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                               ,,B
        //      |                                           ,,·'  |
        //  900 |                                       ,,·'      |
        //      |                                   ,,''          |
        //  800 |                               ,·''              |
        //      |                           ,·''                  |
        //  700 |                      ,,·''                      |
        //      |                  ,,·'                           |
        //  600 |              ,,·'                               |
        //      |          ,,''                                   |
        //  500 |      ,·''                                       |
        //      |  ,·''                                           |
        //  400 A''                                               |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y---------------------------------------1---------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(800, 480) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(480.00).Within(0.01));
        // Centroid of #2 in W-A-B-Z is at ~(600, 920) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(920.00).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(800, 200), // #3
        };

        // 1000 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  900 |                            ,·'                  |
        //      |                          ,'                     |
        //  800 |         1             ,·'                       |
        //      |                     ,'                          |
        //  700 |                  ,·'                           ,C
        //      |                ,'                            ,' |
        //  600 |             ,·'                           ,·'   |
        //      |           ,'                            ,'      |
        //  500 |        ,·'             2             ,·'        |
        //      |      ,'                            ,'           |
        //  400 |   ,·'                           ,·'             |
        //      | ,'                            ,'                |
        //  300 A'                           ,·'                  |
        //      |                          ,'                     |
        //  200 |                       ,·'             3         |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 Y--------------B#---------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-A is at ~(233, 767) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(766.67).Within(0.01));
        // Centroid of #2 in C-Z-D-A-Y-B is at ~(500, 500) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in C-B-W is at ~(767, 233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(766.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(300, -300), // #3
        };

        //  500 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |         1             ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                           ,C
        //      |                ,'                            ,' |
        //  100 |             ,·'                           ,·'   |
        //      |           ,'                            ,'      |
        //    0 |        ,·'             2             ,·'        |
        //      |      ,'                            ,'           |
        // -100 |   ,·'                           ,·'             |
        //      | ,'                            ,'                |
        // -200 A'                           ,·'                  |
        //      |                          ,'                     |
        // -300 |                       ,·'             3         |
        //      |                     ,'                          |
        // -400 |                  ,·'                            |
        //      |                ,'                               |
        // -500 Y--------------B#---------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-A is at ~(-267, 267) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in C-Z-D-A-Y-B is at ~(0, 0) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in C-B-W is at ~(267, -267) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-266.67).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(600, 0), // #3
        };

        //  800 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  700 |                            ,·'                  |
        //      |                          ,'                     |
        //  600 |         1             ,·'                       |
        //      |                     ,'                          |
        //  500 |                  ,·'                           ,C
        //      |                ,'                            ,' |
        //  400 |             ,·'                           ,·'   |
        //      |           ,'                            ,'      |
        //  300 |        ,·'             2             ,·'        |
        //      |      ,'                            ,'           |
        //  200 |   ,·'                           ,·'             |
        //      | ,'                            ,'                |
        //  100 A'                           ,·'                  |
        //      |                          ,'                     |
        //    0 |         ●             ,·'             3         |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 Y--------------B#---------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-A is at ~(33, 567) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(566.67).Within(0.01));
        // Centroid of #2 in C-Z-D-A-Y-B is at ~(300, 300) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in C-B-W is at ~(567, 33) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(566.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(33.33).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1000, 400), // #3
        };

        // 1200 X---------------------------------#D--------------Z
        //      |                               ,'                |
        // 1100 |                            ,·'                  |
        //      |                          ,'                     |
        // 1000 |         1             ,·'                       |
        //      |                     ,'                          |
        //  900 |                  ,·'                           ,C
        //      |                ,'                            ,' |
        //  800 |             ,·'                           ,·'   |
        //      |           ,'                            ,'      |
        //  700 |        ,·'             2             ,·'        |
        //      |      ,'                            ,'           |
        //  600 |   ,·'                           ,·'             |
        //      | ,'                            ,'                |
        //  500 A'                           ,·'                  |
        //      |                          ,'                     |
        //  400 |                       ,·'             3         |
        //      |                     ,'                          |
        //  300 |                  ,·'                            |
        //      |                ,'                               |
        //  200 Y--------------B#---------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 900), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-A is at ~(433, 967) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(433.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(966.67).Within(0.01));
        // Centroid of #2 in C-Z-D-A-Y-B is at ~(700, 700) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in C-B-W is at ~(967, 433) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(966.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(433.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(200, 200), // #3
        };

        // 1000 Y--------------A#---------------------------------X
        //      |                ',                               |
        //  900 |                  '·,                            |
        //      |                     ',                          |
        //  800 |                       '·,             1         |
        //      |                          ',                     |
        //  700 B,                           '·,                  |
        //      | ',                            ',                |
        //  600 |   '·,                           '·,             |
        //      |      ',                            ',           |
        //  500 |        '·,             2             '·,        |
        //      |           ',                            ',      |
        //  400 |             '·,                           '·,   |
        //      |                ',                            ', |
        //  300 |                  '·,                           'D
        //      |                     ',                          |
        //  200 |         3             '·,                       |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 W---------------------------------#C--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-D is at ~(767, 767) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(766.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(766.67).Within(0.01));
        // Centroid of #2 in A-Y-B-C-Z-D is at ~(500, 500) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in B-W-C is at ~(233, 233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-300, -300), // #3
        };

        //  500 Y--------------A#---------------------------------X
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,             1         |
        //      |                          ',                     |
        //  200 B,                           '·,                  |
        //      | ',                            ',                |
        //  100 |   '·,                           '·,             |
        //      |      ',                            ',           |
        //    0 |        '·,             2             '·,        |
        //      |           ',                            ',      |
        // -100 |             '·,                           '·,   |
        //      |                ',                            ', |
        // -200 |                  '·,                           'D
        //      |                     ',                          |
        // -300 |         3             '·,                       |
        //      |                          ',                     |
        // -400 |                            '·,                  |
        //      |                               ',                |
        // -500 W---------------------------------#C--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-D is at ~(267, 267) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in A-Y-B-C-Z-D is at ~(0, 0) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in B-W-C is at ~(-267, -267) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-266.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(0, 0), // #3
        };

        //  800 Y--------------A#---------------------------------X
        //      |                ',                               |
        //  700 |                  '·,                            |
        //      |                     ',                          |
        //  600 |                       '·,             1         |
        //      |                          ',                     |
        //  500 B,                           '·,                  |
        //      | ',                            ',                |
        //  400 |   '·,                           '·,             |
        //      |      ',                            ',           |
        //  300 |        '·,             2             '·,        |
        //      |           ',                            ',      |
        //  200 |             '·,                           '·,   |
        //      |                ',                            ', |
        //  100 |                  '·,                           'D
        //      |                     ',                          |
        //    0 |         3             '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 W---------------------------------#C--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-D is at ~(567, 567) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(566.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(566.67).Within(0.01));
        // Centroid of #2 in A-Y-B-C-Z-D is at ~(300, 300) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in B-W-C is at ~(33, 33) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(33.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(33.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(400, 400), // #3
        };

        // 1200 Y--------------A#---------------------------------X
        //      |                ',                               |
        // 1100 |                  '·,                            |
        //      |                     ',                          |
        // 1000 |                       '·,             1         |
        //      |                          ',                     |
        //  900 B,                           '·,                  |
        //      | ',                            ',                |
        //  800 |   '·,                           '·,             |
        //      |      ',                            ',           |
        //  700 |        '·,             2             '·,        |
        //      |           ',                            ',      |
        //  600 |             '·,                           '·,   |
        //      |                ',                            ', |
        //  500 |                  '·,                           'D
        //      |                     ',                          |
        //  400 |         3             '·,                       |
        //      |                          ',                     |
        //  300 |                            '·,                  |
        //      |                               ',                |
        //  200 W---------------------------------#C--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 900), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-D is at ~(967, 967) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(966.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(966.67).Within(0.01));
        // Centroid of #2 in A-Y-B-C-Z-D is at ~(700, 700) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in B-W-C is at ~(433, 433) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(433.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(433.33).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
        };

        // 1000 X----------------------------#D------------------#C
        //      |                          ,'                  ,' |
        //  900 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  800 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  700 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  600 |        ,·'        2        ,·'                  |
        //      |      ,'                  ,'                     |
        //  500 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  400 A'                 ,·'        3                   |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 B#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(200, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(408, 592) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(408.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(591.67).Within(0.01));
        // Centroid of #3 in C-B-Y is at ~(667, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, -100), // #3
        };

        //  500 X----------------------------#D------------------#C
        //      |                          ,'                  ,' |
        //  400 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  300 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  200 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  100 |        ,·'        2        ,·'                  |
        //      |      ,'                  ,'                     |
        //    0 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        // -100 A'                 ,·'        3                   |
        //      |                ,'                               |
        // -200 |             ,·'                                 |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 B#------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(-300, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(-92, 92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(91.67).Within(0.01));
        // Centroid of #3 in C-B-Y is at ~(167, -167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(400, 200), // #3
        };

        //  800 X----------------------------#D------------------#C
        //      |                          ,'                  ,' |
        //  700 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  600 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  500 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  400 |        ,·'        2        ,·'                  |
        //      |      ,'                  ,'                     |
        //  300 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  200 A'                 ,·'        3                   |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 B#------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(0, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(208, 392) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(208.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(391.67).Within(0.01));
        // Centroid of #3 in C-B-Y is at ~(467, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(600, 800), // #2
            new VoronoiSite(800, 600), // #3
        };

        // 1200 X----------------------------#D------------------#C
        //      |                          ,'                  ,' |
        // 1100 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        // 1000 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  900 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  800 |        ,·'        2        ,·'                  |
        //      |      ,'                  ,'                     |
        //  700 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  600 A'                 ,·'        3                   |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 B#------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(400, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(608, 792) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(608.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(791.67).Within(0.01));
        // Centroid of #3 in C-B-Y is at ~(867, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
        };

        // 1000 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  900 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  800 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  700 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  600 |                  '·,        2        '·,        |
        //      |                     ',                  ',      |
        //  500 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  400 |                   3        '·,                 'D
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-D is at ~(800, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(592, 592) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(591.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(591.67).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(333, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, -100), // #3
        };

        //  500 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  400 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  300 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  200 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  100 |                  '·,        2        '·,        |
        //      |                     ',                  ',      |
        //    0 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        // -100 |                   3        '·,                 'D
        //      |                               ',                |
        // -200 |                                 '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 Y------------------------------------------------#C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-D is at ~(300, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(92, 92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(91.67).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(-167, -167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 200), // #3
        };

        //  800 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  700 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  600 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  500 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  400 |                  '·,        2        '·,        |
        //      |                     ',                  ',      |
        //  300 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  200 |                   3        '·,                 'D
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 Y------------------------------------------------#C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-D is at ~(600, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(392, 392) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(391.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(391.67).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(133, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(600, 600), // #3
        };

        // 1200 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        // 1100 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        // 1000 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  900 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  800 |                  '·,        2        '·,        |
        //      |                     ',                  ',      |
        //  700 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  600 |                   3        '·,                 'D
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 Y------------------------------------------------#C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in X-A-D is at ~(1000, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(792, 792) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(791.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(791.67).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(533, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(400, 600), // #3
        };

        // 1000 Y------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                   3        ,·'                 ,A
        //      |                          ,'                  ,' |
        //  500 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  400 |                  ,·'        2        ,·'        |
        //      |                ,'                  ,'           |
        //  300 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  200 |        ,·'                 ,·'        1         |
        //      |      ,'                  ,'                     |
        //  100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //    0 C#------------------D#----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-X is at ~(800, 200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(592, 408) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(591.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(408.33).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(333, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -300), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(-100, 100), // #3
        };

        //  500 Y------------------------------------------------#B
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 |                   3        ,·'                 ,A
        //      |                          ,'                  ,' |
        //    0 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        // -100 |                  ,·'        2        ,·'        |
        //      |                ,'                  ,'           |
        // -200 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        // -300 |        ,·'                 ,·'        1         |
        //      |      ,'                  ,'                     |
        // -400 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        // -500 C#------------------D#----------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-X is at ~(300, -300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(92, -92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-91.67).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(-167, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 0), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(200, 400), // #3
        };

        //  800 Y------------------------------------------------#B
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                   3        ,·'                 ,A
        //      |                          ,'                  ,' |
        //  300 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  200 |                  ,·'        2        ,·'        |
        //      |                ,'                  ,'           |
        //  100 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //    0 |        ,·'                 ,·'        1         |
        //      |      ,'                  ,'                     |
        // -100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        // -200 C#------------------D#----------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-X is at ~(600, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(392, 208) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(391.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(208.33).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(133, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 400), // #1
            new VoronoiSite(800, 600), // #2
            new VoronoiSite(600, 800), // #3
        };

        // 1200 Y------------------------------------------------#B
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                   3        ,·'                 ,A
        //      |                          ,'                  ,' |
        //  700 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  600 |                  ,·'        2        ,·'        |
        //      |                ,'                  ,'           |
        //  500 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  400 |        ,·'                 ,·'        1         |
        //      |      ,'                  ,'                     |
        //  300 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  200 C#------------------D#----------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-X is at ~(1000, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in A-B-C-D is at ~(792, 608) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(791.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(608.33).Within(0.01));
        // Centroid of #3 in B-Y-C is at ~(533, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(600, 600), // #3
        };

        // 1000 C#------------------------------------------------Y
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 D,                 '·,        3                   |
        //      | ',                  ',                          |
        //  500 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  400 |        '·,        2        '·,                  |
        //      |           ',                  ',                |
        //  300 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  200 |         1        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //    0 X----------------------------#A------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(200, 200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(408, 408) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(408.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(408.33).Within(0.01));
        // Centroid of #3 in Y-C-B is at ~(667, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, -300), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(100, 100), // #3
        };

        //  500 C#------------------------------------------------Y
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 D,                 '·,        3                   |
        //      | ',                  ',                          |
        //    0 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        // -100 |        '·,        2        '·,                  |
        //      |           ',                  ',                |
        // -200 |             '·,                 '·,             |
        //      |                ',                  ',           |
        // -300 |         1        '·,                 '·,        |
        //      |                     ',                  ',      |
        // -400 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        // -500 X----------------------------#A------------------#B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(-300, -300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(-92, -92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-91.67).Within(0.01));
        // Centroid of #3 in Y-C-B is at ~(167, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(400, 400), // #3
        };

        //  800 C#------------------------------------------------Y
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 D,                 '·,        3                   |
        //      | ',                  ',                          |
        //  300 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  200 |        '·,        2        '·,                  |
        //      |           ',                  ',                |
        //  100 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //    0 |         1        '·,                 '·,        |
        //      |                     ',                  ',      |
        // -100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        // -200 X----------------------------#A------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(0, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(208, 208) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(208.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(208.33).Within(0.01));
        // Centroid of #3 in Y-C-B is at ~(467, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(800, 800), // #3
        };

        // 1200 C#------------------------------------------------Y
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 D,                 '·,        3                   |
        //      | ',                  ',                          |
        //  700 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  600 |        '·,        2        '·,                  |
        //      |           ',                  ',                |
        //  500 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  400 |         1        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  300 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  200 X----------------------------#A------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-X-A is at ~(400, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in C-D-A-B is at ~(608, 608) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(608.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(608.33).Within(0.01));
        // Centroid of #3 in Y-C-B is at ~(867, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
            new VoronoiSite(800, 200), // #4
        };

        // 1000 X----------------------------#F------------------#E
        //      |                          ,'                  ,' |
        //  900 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  800 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  700 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  600 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,' |
        //  500 |   ,·'                 ,·'                 ,·'   |
        //      | ,'                  ,'                  ,'      |
        //  400 A'                 ,·'        3        ,·'        |
        //      |                ,'                  ,'           |
        //  300 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  200 |        ,·'                 ,·'        4         |
        //      |      ,'                  ,'                     |
        //  100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //    0 B#------------------C#----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 1000, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in F-X-A is at ~(200, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in E-F-A-B is at ~(408, 592) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(408.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(591.67).Within(0.01));
        // Centroid of #3 in D-E-B-C is at ~(592, 408) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(591.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(408.33).Within(0.01));
        // Centroid of #4 in D-C-Y is at ~(800, 200) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(300, -300), // #4
        };

        //  500 X----------------------------#F------------------#E
        //      |                          ,'                  ,' |
        //  400 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  300 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  200 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  100 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,' |
        //    0 |   ,·'                 ,·'                 ,·'   |
        //      | ,'                  ,'                  ,'      |
        // -100 A'                 ,·'        3        ,·'        |
        //      |                ,'                  ,'           |
        // -200 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        // -300 |        ,·'                 ,·'        4         |
        //      |      ,'                  ,'                     |
        // -400 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        // -500 B#------------------C#----------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -100, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, -500), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 500, 100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in F-X-A is at ~(-300, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in E-F-A-B is at ~(-92, 92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(91.67).Within(0.01));
        // Centroid of #3 in D-E-B-C is at ~(92, -92) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(91.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-91.67).Within(0.01));
        // Centroid of #4 in D-C-Y is at ~(300, -300) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(400, 200), // #3
            new VoronoiSite(600, 0), // #4
        };

        //  800 X----------------------------#F------------------#E
        //      |                          ,'                  ,' |
        //  700 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  600 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  500 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  400 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,' |
        //  300 |   ,·'                 ,·'                 ,·'   |
        //      | ,'                  ,'                  ,'      |
        //  200 A'                 ,·'        3        ,·'        |
        //      |                ,'                  ,'           |
        //  100 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //    0 |        ,·'                 ,·'        4         |
        //      |      ,'                  ,'                     |
        // -100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        // -200 B#------------------C#----------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, -200), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 800, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in F-X-A is at ~(0, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in E-F-A-B is at ~(208, 392) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(208.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(391.67).Within(0.01));
        // Centroid of #3 in D-E-B-C is at ~(392, 208) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(391.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(208.33).Within(0.01));
        // Centroid of #4 in D-C-Y is at ~(600, 0) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(600, 800), // #2
            new VoronoiSite(800, 600), // #3
            new VoronoiSite(1000, 400), // #4
        };

        // 1200 X----------------------------#F------------------#E
        //      |                          ,'                  ,' |
        // 1100 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        // 1000 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  900 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  800 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,' |
        //  700 |   ,·'                 ,·'                 ,·'   |
        //      | ,'                  ,'                  ,'      |
        //  600 A'                 ,·'        3        ,·'        |
        //      |                ,'                  ,'           |
        //  500 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  400 |        ,·'                 ,·'        4         |
        //      |      ,'                  ,'                     |
        //  300 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  200 B#------------------C#----------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 1200, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in F-X-A is at ~(400, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in E-F-A-B is at ~(608, 792) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(608.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(791.67).Within(0.01));
        // Centroid of #3 in D-E-B-C is at ~(792, 608) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(791.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(608.33).Within(0.01));
        // Centroid of #4 in D-C-Y is at ~(1000, 400) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(200, 200), // #4
        };

        // 1000 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  900 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  800 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  700 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  600 C,                 '·,        2        '·,        |
        //      | ',                  ',                  ',      |
        //  500 |   '·,                 '·,                 '·,   |
        //      |      ',                  ',                  ', |
        //  400 |        '·,        3        '·,                 'F
        //      |           ',                  ',                |
        //  300 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  200 |         4        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //    0 Y----------------------------#D------------------#E
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 600), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-F is at ~(800, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in A-B-E-F is at ~(592, 592) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(591.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(591.67).Within(0.01));
        // Centroid of #3 in B-C-D-E is at ~(408, 408) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(408.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(408.33).Within(0.01));
        // Centroid of #4 in C-Y-D is at ~(200, 200) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, -100), // #3
            new VoronoiSite(-300, -300), // #4
        };

        //  500 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  400 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  300 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  200 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  100 C,                 '·,        2        '·,        |
        //      | ',                  ',                  ',      |
        //    0 |   '·,                 '·,                 '·,   |
        //      |      ',                  ',                  ', |
        // -100 |        '·,        3        '·,                 'F
        //      |           ',                  ',                |
        // -200 |             '·,                 '·,             |
        //      |                ',                  ',           |
        // -300 |         4        '·,                 '·,        |
        //      |                     ',                  ',      |
        // -400 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        // -500 Y----------------------------#D------------------#E
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -500, 100), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 100, -500), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-F is at ~(300, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-B-E-F is at ~(92, 92) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(91.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(91.67).Within(0.01));
        // Centroid of #3 in B-C-D-E is at ~(-92, -92) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-91.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-91.67).Within(0.01));
        // Centroid of #4 in C-Y-D is at ~(-300, -300) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(0, 0), // #4
        };

        //  800 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  700 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  600 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  500 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  400 C,                 '·,        2        '·,        |
        //      | ',                  ',                  ',      |
        //  300 |   '·,                 '·,                 '·,   |
        //      |      ',                  ',                  ', |
        //  200 |        '·,        3        '·,                 'F
        //      |           ',                  ',                |
        //  100 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //    0 |         4        '·,                 '·,        |
        //      |                     ',                  ',      |
        // -100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        // -200 Y----------------------------#D------------------#E
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 400), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, -200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-F is at ~(600, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in A-B-E-F is at ~(392, 392) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(391.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(391.67).Within(0.01));
        // Centroid of #3 in B-C-D-E is at ~(208, 208) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(208.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(208.33).Within(0.01));
        // Centroid of #4 in C-Y-D is at ~(0, 0) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(600, 600), // #3
            new VoronoiSite(400, 400), // #4
        };

        // 1200 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        // 1100 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        // 1000 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  900 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  800 C,                 '·,        2        '·,        |
        //      | ',                  ',                  ',      |
        //  700 |   '·,                 '·,                 '·,   |
        //      |      ',                  ',                  ', |
        //  600 |        '·,        3        '·,                 'F
        //      |           ',                  ',                |
        //  500 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  400 |         4        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  300 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  200 Y----------------------------#D------------------#E
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 800), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 800, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y

        // Assert

        // Centroid of #1 in X-A-F is at ~(1000, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in A-B-E-F is at ~(792, 792) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(791.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(791.67).Within(0.01));
        // Centroid of #3 in B-C-D-E is at ~(608, 608) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(608.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(608.33).Within(0.01));
        // Centroid of #4 in C-Y-D is at ~(400, 400) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 X------------------------------------------------#D
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |              1        ,·'                       |
        //      |                     ,'                          |
        //  400 B-------------------A'                            |
        //      |                   |                             |
        //  300 |              2    |    3                        |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 Y-------------------C-----------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(371, 743) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(371.43).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(742.86).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(200, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #3 in D-A-C-W is at ~(743, 371) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(742.86).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(371.43).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(0, -200), // #3
        };

        //  500 X------------------------------------------------#D
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 |              1        ,·'                       |
        //      |                     ,'                          |
        // -100 B-------------------A'                            |
        //      |                   |                             |
        // -200 |              2    |    3                        |
        //      |                   |                             |
        // -300 |                   |                             |
        //      |                   |                             |
        // -400 |                   |                             |
        //      |                   |                             |
        // -500 Y-------------------C-----------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(-129, 243) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-128.57).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(242.86).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(-300, -300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #3 in D-A-C-W is at ~(243, -129) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(242.86).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-128.57).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, 100), // #3
        };

        //  800 X------------------------------------------------#D
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |              1        ,·'                       |
        //      |                     ,'                          |
        //  200 B-------------------A'                            |
        //      |                   |                             |
        //  100 |              2    |    3                        |
        //      |                   |                             |
        //    0 |         ●         |                             |
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 Y-------------------C-----------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(171, 543) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(171.43).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(542.86).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in D-A-C-W is at ~(543, 171) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(542.86).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(171.43).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1200 X------------------------------------------------#D
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |              1        ,·'                       |
        //      |                     ,'                          |
        //  600 B-------------------A'                            |
        //      |                   |                             |
        //  500 |              2    |    3                        |
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 Y-------------------C-----------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(571, 943) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(571.43).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(942.86).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(400, 400) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #3 in D-A-C-W is at ~(943, 571) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(942.86).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(571.43).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 Y-------------------B-----------------------------X
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |              2    |    1                        |
        //      |                   |                             |
        //  600 C-------------------A,                            |
        //      |                     ',                          |
        //  500 |              3        '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 W------------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(743, 629) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(742.86).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(628.57).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(200, 800) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #3 in A-C-W-D is at ~(371, 257) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(371.43).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(257.14).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, 0), // #3
        };

        //  500 Y-------------------B-----------------------------X
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |              2    |    1                        |
        //      |                   |                             |
        //  100 C-------------------A,                            |
        //      |                     ',                          |
        //    0 |              3        '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 |                                 '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 W------------------------------------------------#D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(243, 129) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(242.86).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(128.57).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(-300, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in A-C-W-D is at ~(-129, -243) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-128.57).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-242.86).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, 300), // #3
        };

        //  800 Y-------------------B-----------------------------X
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |              2    |    1                        |
        //      |                   |                             |
        //  400 C-------------------A,                            |
        //      |                     ',                          |
        //  300 |              3        '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 W------------------------------------------------#D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(543, 429) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(542.86).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(428.57).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(0, 600) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #3 in A-C-W-D is at ~(171, 57) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(171.43).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(57.14).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1200 Y-------------------B-----------------------------X
        //      |                   |                             |
        // 1100 |                   |                             |
        //      |                   |                             |
        // 1000 |                   |                             |
        //      |                   |                             |
        //  900 |              2    |    1                        |
        //      |                   |                             |
        //  800 C-------------------A,                            |
        //      |                     ',                          |
        //  700 |              3        '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 W------------------------------------------------#D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(943, 829) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(942.86).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(828.57).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(400, 1000) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #3 in A-C-W-D is at ~(571, 457) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(571.43).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(457.14).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 W-----------------------------C-------------------Y
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                        3    |    2              |
        //      |                             |                   |
        //  600 |                            ,A-------------------B
        //      |                          ,'                     |
        //  500 |                       ,·'        1              |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 D#------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(629, 257) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(628.57).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(257.14).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(800, 800) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #3 in C-W-D-A is at ~(257, 629) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(257.14).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(628.57).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(0, 200), // #3
        };

        //  500 W-----------------------------C-------------------Y
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 |                        3    |    2              |
        //      |                             |                   |
        //  100 |                            ,A-------------------B
        //      |                          ,'                     |
        //    0 |                       ,·'        1              |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 |             ,·'                                 |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 D#------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(129, -243) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(128.57).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-242.86).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in C-W-D-A is at ~(-243, 129) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-242.86).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(128.57).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 500), // #3
        };

        //  800 W-----------------------------C-------------------Y
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 |                        3    |    2              |
        //      |                             |                   |
        //  400 |                            ,A-------------------B
        //      |                          ,'                     |
        //  300 |                       ,·'        1              |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 D#------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(429, 57) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(428.57).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(57.14).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(600, 600) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #3 in C-W-D-A is at ~(57, 429) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(57.14).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(428.57).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 900), // #3
        };

        // 1200 W-----------------------------C-------------------Y
        //      |                             |                   |
        // 1100 |                             |                   |
        //      |                             |                   |
        // 1000 |                             |                   |
        //      |                             |                   |
        //  900 |                        3    |    2              |
        //      |                             |                   |
        //  800 |                            ,A-------------------B
        //      |                          ,'                     |
        //  700 |                       ,·'        1              |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 D#------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(829, 457) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(828.57).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(457.14).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(1000, 1000) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #3 in C-W-D-A is at ~(457, 829) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(457.14).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(828.57).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 D#------------------------------------------------W
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,        3              |
        //      |                          ',                     |
        //  400 |                            'A-------------------C
        //      |                             |                   |
        //  300 |                        1    |    2              |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 X-----------------------------B-------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(257, 371) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(257.14).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(371.43).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(800, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #3 in W-D-A-C is at ~(629, 743) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(628.57).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(742.86).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 0), // #3
        };

        //  500 D#------------------------------------------------W
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |                       '·,        3              |
        //      |                          ',                     |
        // -100 |                            'A-------------------C
        //      |                             |                   |
        // -200 |                        1    |    2              |
        //      |                             |                   |
        // -300 |                             |                   |
        //      |                             |                   |
        // -400 |                             |                   |
        //      |                             |                   |
        // -500 X-----------------------------B-------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(-243, -129) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-242.86).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-128.57).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(300, -300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #3 in W-D-A-C is at ~(129, 243) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(128.57).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(242.86).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 300), // #3
        };

        //  800 D#------------------------------------------------W
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,        3              |
        //      |                          ',                     |
        //  200 |                            'A-------------------C
        //      |                             |                   |
        //  100 |                        1    |    2              |
        //      |                             |                   |
        //    0 |         ●                   |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 X-----------------------------B-------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(57, 171) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(57.14).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(171.43).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(600, 0) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in W-D-A-C is at ~(429, 543) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(428.57).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(542.86).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1200 D#------------------------------------------------W
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,        3              |
        //      |                          ',                     |
        //  600 |                            'A-------------------C
        //      |                             |                   |
        //  500 |                        1    |    2              |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 X-----------------------------B-------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(457, 571) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(457.14).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(571.43).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(1000, 400) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #3 in W-D-A-C is at ~(829, 943) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(828.57).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(942.86).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(100, 400), // #2
            new VoronoiSite(500, 400), // #3
        };

        // 1000 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  900 |                            ,·'                  |
        //      |                          ,'                     |
        //  800 |    1                  ,·'                       |
        //      |                     ,'                          |
        //  700 |                  ,·'                            |
        //      |                ,'                               |
        //  600 B--------------A'                                 |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 |    2         |         3                        |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 |              |                                  |
        //      |              |                                  |
        //  100 |              |                                  |
        //      |              |                                  |
        //    0 Y--------------C----------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 700, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(263, 827) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(263.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(826.67).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(150, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in Z-D-A-C-W is at ~(678, 453) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(677.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(452.69).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 300), // #1
            new VoronoiSite(-400, -100), // #2
            new VoronoiSite(0, -100), // #3
        };

        //  500 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |    1                  ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 B--------------A'                                 |
        //      |              |                                  |
        //    0 |              |         ●                        |
        //      |              |                                  |
        // -100 |    2         |         3                        |
        //      |              |                                  |
        // -200 |              |                                  |
        //      |              |                                  |
        // -300 |              |                                  |
        //      |              |                                  |
        // -400 |              |                                  |
        //      |              |                                  |
        // -500 Y--------------C----------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(-237, 327) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-236.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(326.67).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(-350, -200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
        // Centroid of #3 in Z-D-A-C-W is at ~(178, -47) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(177.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-47.31).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 600), // #1
            new VoronoiSite(-100, 200), // #2
            new VoronoiSite(300, 200), // #3
        };

        //  800 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  700 |                            ,·'                  |
        //      |                          ,'                     |
        //  600 |    1                  ,·'                       |
        //      |                     ,'                          |
        //  500 |                  ,·'                            |
        //      |                ,'                               |
        //  400 B--------------A'                                 |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 |    2         |         3                        |
        //      |              |                                  |
        //  100 |              |                                  |
        //      |              |                                  |
        //    0 |         ●    |                                  |
        //      |              |                                  |
        // -100 |              |                                  |
        //      |              |                                  |
        // -200 Y--------------C----------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(63, 627) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(63.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(626.67).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(-50, 100) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #3 in Z-D-A-C-W is at ~(478, 253) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(477.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(252.69).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1000), // #1
            new VoronoiSite(300, 600), // #2
            new VoronoiSite(700, 600), // #3
        };

        // 1200 X---------------------------------#D--------------Z
        //      |                               ,'                |
        // 1100 |                            ,·'                  |
        //      |                          ,'                     |
        // 1000 |    1                  ,·'                       |
        //      |                     ,'                          |
        //  900 |                  ,·'                            |
        //      |                ,'                               |
        //  800 B--------------A'                                 |
        //      |              |                                  |
        //  700 |              |                                  |
        //      |              |                                  |
        //  600 |    2         |         3                        |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 |              |                                  |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 Y--------------C----------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 900, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-X-B-A is at ~(463, 1027) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(463.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1026.67).Within(0.01));
        // Centroid of #2 in A-B-Y-C is at ~(350, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in Z-D-A-C-W is at ~(878, 653) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(877.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(652.69).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 900), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 500), // #3
        };

        // 1000 Y-----------------------------B-------------------X
        //      |                             |                   |
        //  900 |                   2         |         1         |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 C-----------------------------A,                  |
        //      |                               ',                |
        //  600 |                                 '·,             |
        //      |                                    ',           |
        //  500 |                   3                  '·,        |
        //      |                                         ',      |
        //  400 |                                           '·,   |
        //      |                                              ', |
        //  300 |                                                'D
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(827, 737) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(826.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(736.67).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(300, 850) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #3 in A-C-W-Z-D is at ~(453, 322) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(452.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(322.04).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(-100, 400), // #2
            new VoronoiSite(-100, 0), // #3
        };

        //  500 Y-----------------------------B-------------------X
        //      |                             |                   |
        //  400 |                   2         |         1         |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 C-----------------------------A,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 |                   3    ●             '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 |                                                'D
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(327, 237) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(326.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(236.67).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(-200, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in A-C-W-Z-D is at ~(-47, -178) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-47.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-177.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 700), // #1
            new VoronoiSite(200, 700), // #2
            new VoronoiSite(200, 300), // #3
        };

        //  800 Y-----------------------------B-------------------X
        //      |                             |                   |
        //  700 |                   2         |         1         |
        //      |                             |                   |
        //  600 |                             |                   |
        //      |                             |                   |
        //  500 C-----------------------------A,                  |
        //      |                               ',                |
        //  400 |                                 '·,             |
        //      |                                    ',           |
        //  300 |                   3                  '·,        |
        //      |                                         ',      |
        //  200 |                                           '·,   |
        //      |                                              ', |
        //  100 |                                                'D
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(627, 537) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(626.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(536.67).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(100, 650) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #3 in A-C-W-Z-D is at ~(253, 122) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(252.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(122.04).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1100), // #1
            new VoronoiSite(600, 1100), // #2
            new VoronoiSite(600, 700), // #3
        };

        // 1200 Y-----------------------------B-------------------X
        //      |                             |                   |
        // 1100 |                   2         |         1         |
        //      |                             |                   |
        // 1000 |                             |                   |
        //      |                             |                   |
        //  900 C-----------------------------A,                  |
        //      |                               ',                |
        //  800 |                                 '·,             |
        //      |                                    ',           |
        //  700 |                   3                  '·,        |
        //      |                                         ',      |
        //  600 |                                           '·,   |
        //      |                                              ', |
        //  500 |                                                'D
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 900), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-B-A-D is at ~(1027, 937) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1026.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(936.67).Within(0.01));
        // Centroid of #2 in B-Y-C-A is at ~(500, 1050) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #3 in A-C-W-Z-D is at ~(653, 522) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(652.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(522.04).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 200), // #1
            new VoronoiSite(900, 600), // #2
            new VoronoiSite(500, 600), // #3
        };

        // 1000 W----------------------------------C--------------Y
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                                  |              |
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                        3         |         2    |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                                 ,A--------------B
        //      |                               ,'                |
        //  300 |                            ,·'                  |
        //      |                          ,'                     |
        //  200 |                       ,·'                  1    |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 Z--------------D#---------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(737, 173) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(736.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(173.33).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(850, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in C-W-Z-D-A is at ~(322, 547) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(322.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(547.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, -300), // #1
            new VoronoiSite(400, 100), // #2
            new VoronoiSite(0, 100), // #3
        };

        //  500 W----------------------------------C--------------Y
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                        3         |         2    |
        //      |                                  |              |
        //    0 |                        ●         |              |
        //      |                                  |              |
        // -100 |                                 ,A--------------B
        //      |                               ,'                |
        // -200 |                            ,·'                  |
        //      |                          ,'                     |
        // -300 |                       ,·'                  1    |
        //      |                     ,'                          |
        // -400 |                  ,·'                            |
        //      |                ,'                               |
        // -500 Z--------------D#---------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(237, -327) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(236.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-326.67).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(350, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #3 in C-W-Z-D-A is at ~(-178, 47) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-177.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(47.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 0), // #1
            new VoronoiSite(700, 400), // #2
            new VoronoiSite(300, 400), // #3
        };

        //  800 W----------------------------------C--------------Y
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                                  |              |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                        3         |         2    |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                 ,A--------------B
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 |         ●             ,·'                  1    |
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 Z--------------D#---------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(537, -27) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(536.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-26.67).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(650, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in C-W-Z-D-A is at ~(122, 347) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(122.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(347.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 400), // #1
            new VoronoiSite(1100, 800), // #2
            new VoronoiSite(700, 800), // #3
        };

        // 1200 W----------------------------------C--------------Y
        //      |                                  |              |
        // 1100 |                                  |              |
        //      |                                  |              |
        // 1000 |                                  |              |
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                        3         |         2    |
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                                 ,A--------------B
        //      |                               ,'                |
        //  500 |                            ,·'                  |
        //      |                          ,'                     |
        //  400 |                       ,·'                  1    |
        //      |                     ,'                          |
        //  300 |                  ,·'                            |
        //      |                ,'                               |
        //  200 Z--------------D#---------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-A-D-X is at ~(937, 373) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(936.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(373.33).Within(0.01));
        // Centroid of #2 in Y-C-A-B is at ~(1050, 900) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #3 in C-W-Z-D-A is at ~(522, 747) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(522.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(747.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 100), // #1
            new VoronoiSite(600, 100), // #2
            new VoronoiSite(600, 500), // #3
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 D,                                                |
        //      | ',                                              |
        //  600 |   '·,                                           |
        //      |      ',                                         |
        //  500 |        '·,                  3                   |
        //      |           ',                                    |
        //  400 |             '·,                                 |
        //      |                ',                               |
        //  300 |                  'A-----------------------------C
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |         1         |         2                   |
        //      |                   |                             |
        //    0 X-------------------B-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(173, 263) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(173.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(263.33).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(700, 150) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #3 in W-Z-D-A-C is at ~(547, 678) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(547.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(677.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, -400), // #1
            new VoronoiSite(100, -400), // #2
            new VoronoiSite(100, 0), // #3
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 D,                                                |
        //      | ',                                              |
        //  100 |   '·,                                           |
        //      |      ',                                         |
        //    0 |        '·,             ●    3                   |
        //      |           ',                                    |
        // -100 |             '·,                                 |
        //      |                ',                               |
        // -200 |                  'A-----------------------------C
        //      |                   |                             |
        // -300 |                   |                             |
        //      |                   |                             |
        // -400 |         1         |         2                   |
        //      |                   |                             |
        // -500 X-------------------B-----------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(-327, -237) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-326.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-236.67).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(200, -350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #3 in W-Z-D-A-C is at ~(47, 178) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(47.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(177.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -100), // #1
            new VoronoiSite(400, -100), // #2
            new VoronoiSite(400, 300), // #3
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 D,                                                |
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                  3                   |
        //      |           ',                                    |
        //  200 |             '·,                                 |
        //      |                ',                               |
        //  100 |                  'A-----------------------------C
        //      |                   |                             |
        //    0 |         ●         |                             |
        //      |                   |                             |
        // -100 |         1         |         2                   |
        //      |                   |                             |
        // -200 X-------------------B-----------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(-27, 63) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-26.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(63.33).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(500, -50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #3 in W-Z-D-A-C is at ~(347, 478) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(347.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(477.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(800, 300), // #2
            new VoronoiSite(800, 700), // #3
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 D,                                                |
        //      | ',                                              |
        //  800 |   '·,                                           |
        //      |      ',                                         |
        //  700 |        '·,                  3                   |
        //      |           ',                                    |
        //  600 |             '·,                                 |
        //      |                ',                               |
        //  500 |                  'A-----------------------------C
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |         1         |         2                   |
        //      |                   |                             |
        //  200 X-------------------B-----------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 900), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-D-X-B is at ~(373, 463) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(373.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(463.33).Within(0.01));
        // Centroid of #2 in C-A-B-Y is at ~(900, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in W-Z-D-A-C is at ~(747, 878) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(747.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(877.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 800), // #1
            new VoronoiSite(900, 400), // #2
            new VoronoiSite(500, 400), // #3
        };

        // 1000 Z--------------D#---------------------------------X
        //      |                ',                               |
        //  900 |                  '·,                            |
        //      |                     ',                          |
        //  800 |                       '·,                  1    |
        //      |                          ',                     |
        //  700 |                            '·,                  |
        //      |                               ',                |
        //  600 |                                 'A--------------B
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                        3         |         2    |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 W----------------------------------C--------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(737, 827) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(736.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(826.67).Within(0.01));
        // Centroid of #2 in B-A-C-Y is at ~(850, 300) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in A-D-Z-W-C is at ~(322, 453) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(322.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(452.69).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(400, -100), // #2
            new VoronoiSite(0, -100), // #3
        };

        //  500 Z--------------D#---------------------------------X
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                  1    |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 'A--------------B
        //      |                                  |              |
        //    0 |                        ●         |              |
        //      |                                  |              |
        // -100 |                        3         |         2    |
        //      |                                  |              |
        // -200 |                                  |              |
        //      |                                  |              |
        // -300 |                                  |              |
        //      |                                  |              |
        // -400 |                                  |              |
        //      |                                  |              |
        // -500 W----------------------------------C--------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(237, 327) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(236.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(326.67).Within(0.01));
        // Centroid of #2 in B-A-C-Y is at ~(350, -200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
        // Centroid of #3 in A-D-Z-W-C is at ~(-178, -47) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-177.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-47.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 600), // #1
            new VoronoiSite(700, 200), // #2
            new VoronoiSite(300, 200), // #3
        };

        //  800 Z--------------D#---------------------------------X
        //      |                ',                               |
        //  700 |                  '·,                            |
        //      |                     ',                          |
        //  600 |                       '·,                  1    |
        //      |                          ',                     |
        //  500 |                            '·,                  |
        //      |                               ',                |
        //  400 |                                 'A--------------B
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                        3         |         2    |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 |         ●                        |              |
        //      |                                  |              |
        // -100 |                                  |              |
        //      |                                  |              |
        // -200 W----------------------------------C--------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(537, 627) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(536.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(626.67).Within(0.01));
        // Centroid of #2 in B-A-C-Y is at ~(650, 100) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #3 in A-D-Z-W-C is at ~(122, 253) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(122.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(252.69).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 1000), // #1
            new VoronoiSite(1100, 600), // #2
            new VoronoiSite(700, 600), // #3
        };

        // 1200 Z--------------D#---------------------------------X
        //      |                ',                               |
        // 1100 |                  '·,                            |
        //      |                     ',                          |
        // 1000 |                       '·,                  1    |
        //      |                          ',                     |
        //  900 |                            '·,                  |
        //      |                               ',                |
        //  800 |                                 'A--------------B
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                        3         |         2    |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 W----------------------------------C--------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(937, 1027) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(936.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1026.67).Within(0.01));
        // Centroid of #2 in B-A-C-Y is at ~(1050, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in A-D-Z-W-C is at ~(522, 653) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(522.04).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(652.69).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(400, 100), // #2
            new VoronoiSite(400, 500), // #3
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                ,D
        //      |                                              ,' |
        //  600 |                                           ,·'   |
        //      |                                         ,'      |
        //  500 |                   3                  ,·'        |
        //      |                                    ,'           |
        //  400 |                                 ,·'             |
        //      |                               ,'                |
        //  300 C-----------------------------A'                  |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                   2         |         1         |
        //      |                             |                   |
        //    0 Y-----------------------------B-------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(827, 263) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(826.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(263.33).Within(0.01));
        // Centroid of #2 in A-C-Y-B is at ~(300, 150) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #3 in D-Z-W-C-A is at ~(453, 678) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(452.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(677.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -400), // #1
            new VoronoiSite(-100, -400), // #2
            new VoronoiSite(-100, 0), // #3
        };

        //  500 W-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                ,D
        //      |                                              ,' |
        //  100 |                                           ,·'   |
        //      |                                         ,'      |
        //    0 |                   3    ●             ,·'        |
        //      |                                    ,'           |
        // -100 |                                 ,·'             |
        //      |                               ,'                |
        // -200 C-----------------------------A'                  |
        //      |                             |                   |
        // -300 |                             |                   |
        //      |                             |                   |
        // -400 |                   2         |         1         |
        //      |                             |                   |
        // -500 Y-----------------------------B-------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(327, -237) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(326.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-236.67).Within(0.01));
        // Centroid of #2 in A-C-Y-B is at ~(-200, -350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #3 in D-Z-W-C-A is at ~(-47, 178) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-47.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(177.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, -100), // #1
            new VoronoiSite(200, -100), // #2
            new VoronoiSite(200, 300), // #3
        };

        //  800 W-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                ,D
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                   3                  ,·'        |
        //      |                                    ,'           |
        //  200 |                                 ,·'             |
        //      |                               ,'                |
        //  100 C-----------------------------A'                  |
        //      |                             |                   |
        //    0 |         ●                   |                   |
        //      |                             |                   |
        // -100 |                   2         |         1         |
        //      |                             |                   |
        // -200 Y-----------------------------B-------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(627, 63) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(626.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(63.33).Within(0.01));
        // Centroid of #2 in A-C-Y-B is at ~(100, -50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #3 in D-Z-W-C-A is at ~(253, 478) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(252.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(477.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 300), // #1
            new VoronoiSite(600, 300), // #2
            new VoronoiSite(600, 700), // #3
        };

        // 1200 W-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                 |
        //      |                                                 |
        //  900 |                                                ,D
        //      |                                              ,' |
        //  800 |                                           ,·'   |
        //      |                                         ,'      |
        //  700 |                   3                  ,·'        |
        //      |                                    ,'           |
        //  600 |                                 ,·'             |
        //      |                               ,'                |
        //  500 C-----------------------------A'                  |
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 |                   2         |         1         |
        //      |                             |                   |
        //  200 Y-----------------------------B-------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 900), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(1027, 463) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1026.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(463.33).Within(0.01));
        // Centroid of #2 in A-C-Y-B is at ~(500, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in D-Z-W-C-A is at ~(653, 878) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(652.69).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(877.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 200), // #1
            new VoronoiSite(100, 600), // #2
            new VoronoiSite(500, 600), // #3
        };

        // 1000 Y--------------C----------------------------------W
        //      |              |                                  |
        //  900 |              |                                  |
        //      |              |                                  |
        //  800 |              |                                  |
        //      |              |                                  |
        //  700 |              |                                  |
        //      |              |                                  |
        //  600 |    2         |         3                        |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 B--------------A,                                 |
        //      |                ',                               |
        //  300 |                  '·,                            |
        //      |                     ',                          |
        //  200 |    1                  '·,                       |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 X---------------------------------#D--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X-D is at ~(263, 173) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(263.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(173.33).Within(0.01));
        // Centroid of #2 in C-Y-B-A is at ~(150, 700) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in W-C-A-D-Z is at ~(678, 547) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(677.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(547.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, -300), // #1
            new VoronoiSite(-400, 100), // #2
            new VoronoiSite(0, 100), // #3
        };

        //  500 Y--------------C----------------------------------W
        //      |              |                                  |
        //  400 |              |                                  |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 |              |                                  |
        //      |              |                                  |
        //  100 |    2         |         3                        |
        //      |              |                                  |
        //    0 |              |         ●                        |
        //      |              |                                  |
        // -100 B--------------A,                                 |
        //      |                ',                               |
        // -200 |                  '·,                            |
        //      |                     ',                          |
        // -300 |    1                  '·,                       |
        //      |                          ',                     |
        // -400 |                            '·,                  |
        //      |                               ',                |
        // -500 X---------------------------------#D--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X-D is at ~(-237, -327) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-236.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-326.67).Within(0.01));
        // Centroid of #2 in C-Y-B-A is at ~(-350, 200) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #3 in W-C-A-D-Z is at ~(178, 47) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(177.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(47.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 0), // #1
            new VoronoiSite(-100, 400), // #2
            new VoronoiSite(300, 400), // #3
        };

        //  800 Y--------------C----------------------------------W
        //      |              |                                  |
        //  700 |              |                                  |
        //      |              |                                  |
        //  600 |              |                                  |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 |    2         |         3                        |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 B--------------A,                                 |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |    1    ●             '·,                       |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 X---------------------------------#D--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X-D is at ~(63, -27) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(63.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-26.67).Within(0.01));
        // Centroid of #2 in C-Y-B-A is at ~(-50, 500) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in W-C-A-D-Z is at ~(478, 347) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(477.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(347.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(300, 800), // #2
            new VoronoiSite(700, 800), // #3
        };

        // 1200 Y--------------C----------------------------------W
        //      |              |                                  |
        // 1100 |              |                                  |
        //      |              |                                  |
        // 1000 |              |                                  |
        //      |              |                                  |
        //  900 |              |                                  |
        //      |              |                                  |
        //  800 |    2         |         3                        |
        //      |              |                                  |
        //  700 |              |                                  |
        //      |              |                                  |
        //  600 B--------------A,                                 |
        //      |                ',                               |
        //  500 |                  '·,                            |
        //      |                     ',                          |
        //  400 |    1                  '·,                       |
        //      |                          ',                     |
        //  300 |                            '·,                  |
        //      |                               ',                |
        //  200 X---------------------------------#D--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X-D is at ~(463, 373) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(463.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(373.33).Within(0.01));
        // Centroid of #2 in C-Y-B-A is at ~(350, 900) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #3 in W-C-A-D-Z is at ~(878, 747) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(877.96).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(747.31).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 900), // #1
            new VoronoiSite(600, 900), // #2
            new VoronoiSite(600, 500), // #3
        };

        // 1000 X-------------------B-----------------------------Y
        //      |                   |                             |
        //  900 |         1         |         2                   |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                  ,A-----------------------------C
        //      |                ,'                               |
        //  600 |             ,·'                                 |
        //      |           ,'                                    |
        //  500 |        ,·'                  3                   |
        //      |      ,'                                         |
        //  400 |   ,·'                                           |
        //      | ,'                                              |
        //  300 D'                                                |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(173, 737) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(173.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(736.67).Within(0.01));
        // Centroid of #2 in Y-B-A-C is at ~(700, 850) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #3 in C-A-D-Z-W is at ~(547, 322) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(547.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(322.04).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 400), // #1
            new VoronoiSite(100, 400), // #2
            new VoronoiSite(100, 0), // #3
        };

        //  500 X-------------------B-----------------------------Y
        //      |                   |                             |
        //  400 |         1         |         2                   |
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 |                  ,A-----------------------------C
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 |        ,·'             ●    3                   |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 D'                                                |
        //      |                                                 |
        // -300 |                                                 |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(-327, 237) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-326.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(236.67).Within(0.01));
        // Centroid of #2 in Y-B-A-C is at ~(200, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in C-A-D-Z-W is at ~(47, -178) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(47.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-177.96).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 700), // #1
            new VoronoiSite(400, 700), // #2
            new VoronoiSite(400, 300), // #3
        };

        //  800 X-------------------B-----------------------------Y
        //      |                   |                             |
        //  700 |         1         |         2                   |
        //      |                   |                             |
        //  600 |                   |                             |
        //      |                   |                             |
        //  500 |                  ,A-----------------------------C
        //      |                ,'                               |
        //  400 |             ,·'                                 |
        //      |           ,'                                    |
        //  300 |        ,·'                  3                   |
        //      |      ,'                                         |
        //  200 |   ,·'                                           |
        //      | ,'                                              |
        //  100 D'                                                |
        //      |                                                 |
        //    0 |         ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(-27, 537) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-26.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(536.67).Within(0.01));
        // Centroid of #2 in Y-B-A-C is at ~(500, 650) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #3 in C-A-D-Z-W is at ~(347, 122) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(347.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(122.04).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1100), // #1
            new VoronoiSite(800, 1100), // #2
            new VoronoiSite(800, 700), // #3
        };

        // 1200 X-------------------B-----------------------------Y
        //      |                   |                             |
        // 1100 |         1         |         2                   |
        //      |                   |                             |
        // 1000 |                   |                             |
        //      |                   |                             |
        //  900 |                  ,A-----------------------------C
        //      |                ,'                               |
        //  800 |             ,·'                                 |
        //      |           ,'                                    |
        //  700 |        ,·'                  3                   |
        //      |      ,'                                         |
        //  600 |   ,·'                                           |
        //      | ,'                                              |
        //  500 D'                                                |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 900), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(373, 937) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(373.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(936.67).Within(0.01));
        // Centroid of #2 in Y-B-A-C is at ~(900, 1050) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #3 in C-A-D-Z-W is at ~(747, 522) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(747.31).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(522.04).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 X------------------------D------------------------Y
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 B#-----------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(500, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(778, 611) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(777.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(611.11).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(222, 611) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(222.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(611.11).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(-200, 0), // #3
        };

        //  500 X------------------------D------------------------Y
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        // -100 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // -200 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -300 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -400 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -500 B#-----------------------------------------------#C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(0, -333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(278, 111) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(277.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(111.11).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(-278, 111) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-277.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(111.11).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(100, 300), // #3
        };

        //  800 X------------------------D------------------------Y
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -200 B#-----------------------------------------------#C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(300, -33) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(578, 411) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(577.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(411.11).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(22, 411) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(22.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(411.11).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1200 X------------------------D------------------------Y
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  600 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 B#-----------------------------------------------#C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(700, 367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(978, 811) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(977.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(811.11).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(422, 811) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(422.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(811.11).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 B#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,        3                        |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |              1        #A------------------------D
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'        2                        |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 C#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(167, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(611, 222) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(611.11).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(222.22).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(611, 778) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(611.11).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(777.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(0, 200), // #3
        };

        //  500 B#------------------------------------------------X
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        '·,                                      |
        //      |           ',                                    |
        //  200 |             '·,        3                        |
        //      |                ',                               |
        //  100 |                  '·,                            |
        //      |                     ',                          |
        //    0 |              1        #A------------------------D
        //      |                     ,'                          |
        // -100 |                  ,·'                            |
        //      |                ,'                               |
        // -200 |             ,·'        2                        |
        //      |           ,'                                    |
        // -300 |        ,·'                                      |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 C#------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(-333, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(111, -278) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(111.11).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-277.78).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(111, 278) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(111.11).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(277.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(300, 500), // #3
        };

        //  800 B#------------------------------------------------X
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |             '·,        3                        |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |              1        #A------------------------D
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'        2                        |
        //      |           ,'                                    |
        //    0 |        ,·'                                      |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 C#------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(-33, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(411, 22) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(411.11).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(22.22).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(411, 578) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(411.11).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(577.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(700, 900), // #3
        };

        // 1200 B#------------------------------------------------X
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        '·,                                      |
        //      |           ',                                    |
        //  900 |             '·,        3                        |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |              1        #A------------------------D
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'        2                        |
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 C#------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-C is at ~(367, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(811, 422) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(811.11).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(422.22).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(811, 978) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(811.11).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(977.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 C#-----------------------------------------------#B
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'A'        3              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-C-A is at ~(500, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(222, 389) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(222.22).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(388.89).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(778, 389) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(777.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(388.89).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(200, 0), // #3
        };

        //  500 C#-----------------------------------------------#B
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 |              2        'A'        3              |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Y------------------------D------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-C-A is at ~(0, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(-278, -111) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-277.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-111.11).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(278, -111) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(277.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-111.11).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(500, 300), // #3
        };

        //  800 C#-----------------------------------------------#B
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  300 |              2        'A'        3              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Y------------------------D------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-C-A is at ~(300, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(22, 189) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(22.22).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(188.89).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(578, 189) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(577.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(188.89).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1200 C#-----------------------------------------------#B
        //      | ',                                           ,' |
        // 1100 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        // 1000 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'A'        3              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Y------------------------D------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-C-A is at ~(700, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(422, 589) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(422.22).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(588.89).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(978, 589) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(977.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(588.89).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 Y------------------------------------------------#C
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                        2        ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 D------------------------A#        1              |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                        3        '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in C-A-B is at ~(833, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(389, 778) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(388.89).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(777.78).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(389, 222) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(388.89).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(222.22).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(0, -200), // #3
        };

        //  500 Y------------------------------------------------#C
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                      ,·'        |
        //      |                                    ,'           |
        //  200 |                        2        ,·'             |
        //      |                               ,'                |
        //  100 |                            ,·'                  |
        //      |                          ,'                     |
        //    0 D------------------------A#        1              |
        //      |                          ',                     |
        // -100 |                            '·,                  |
        //      |                               ',                |
        // -200 |                        3        '·,             |
        //      |                                    ',           |
        // -300 |                                      '·,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 X------------------------------------------------#B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in C-A-B is at ~(333, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(-111, 278) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-111.11).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(277.78).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(-111, -278) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-111.11).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-277.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(300, 100), // #3
        };

        //  800 Y------------------------------------------------#C
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 |                        2        ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 D------------------------A#        1              |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                        3        '·,             |
        //      |                                    ',           |
        //    0 |         ●                            '·,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 X------------------------------------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in C-A-B is at ~(633, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(189, 578) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(188.89).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(577.78).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(189, 22) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(188.89).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(22.22).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1200 Y------------------------------------------------#C
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                      ,·'        |
        //      |                                    ,'           |
        //  900 |                        2        ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 D------------------------A#        1              |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                        3        '·,             |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 X------------------------------------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in C-A-B is at ~(1033, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(589, 978) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(588.89).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(977.78).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(589, 422) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(588.89).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(422.22).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1000 X------------------------D------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 Y---------B#---------------------------#C---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(500, 100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in Z-D-A-C-W is at ~(765, 540) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(764.84).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(539.56).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(235, 540) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(235.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(539.56).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(-200, -200), // #3
        };

        //  500 X------------------------D------------------------Z
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        // -300 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // -400 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -500 Y---------B#---------------------------#C---------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -300, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(0, -400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-400.00).Within(0.01));
        // Centroid of #2 in Z-D-A-C-W is at ~(265, 40) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(264.84).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(39.56).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(-265, 40) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-264.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(39.56).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(100, 100), // #3
        };

        //  800 X------------------------D------------------------Z
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //    0 |         ●        ,·'       '·,                  |
        //      |                ,'             ',                |
        // -100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -200 Y---------B#---------------------------#C---------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(300, -100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
        // Centroid of #2 in Z-D-A-C-W is at ~(565, 340) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(564.84).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(339.56).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(35, 340) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(35.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(339.56).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1200 X------------------------D------------------------Z
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 Y---------B#---------------------------#C---------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(700, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in Z-D-A-C-W is at ~(965, 740) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(964.84).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(739.56).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(435, 740) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(435.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(739.56).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(300, 700), // #3
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B,                                                |
        //      | ',                                              |
        //  700 |   '·,        3                                  |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |    1        #A----------------------------------D
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'        2                                  |
        //      | ,'                                              |
        //  200 C'                                                |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(100, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in D-A-C-W-Z is at ~(540, 235) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(539.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(235.16).Within(0.01));
        // Centroid of #3 in X-Y-B-A-D is at ~(540, 765) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(539.56).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(764.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(-200, 200), // #3
        };

        //  500 Y-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B,                                                |
        //      | ',                                              |
        //  200 |   '·,        3                                  |
        //      |      ',                                         |
        //  100 |        '·,                                      |
        //      |           ',                                    |
        //    0 |    1        #A----------------------------------D
        //      |           ,'                                    |
        // -100 |        ,·'                                      |
        //      |      ,'                                         |
        // -200 |   ,·'        2                                  |
        //      | ,'                                              |
        // -300 C'                                                |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 W-------------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(-400, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in D-A-C-W-Z is at ~(40, -265) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(39.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-264.84).Within(0.01));
        // Centroid of #3 in X-Y-B-A-D is at ~(40, 265) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(39.56).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(264.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(100, 500), // #3
        };

        //  800 Y-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 B,                                                |
        //      | ',                                              |
        //  500 |   '·,        3                                  |
        //      |      ',                                         |
        //  400 |        '·,                                      |
        //      |           ',                                    |
        //  300 |    1        #A----------------------------------D
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'        2                                  |
        //      | ,'                                              |
        //    0 C'        ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 W-------------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(-100, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in D-A-C-W-Z is at ~(340, 35) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(339.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(35.16).Within(0.01));
        // Centroid of #3 in X-Y-B-A-D is at ~(340, 565) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(339.56).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(564.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 900), // #3
        };

        // 1200 Y-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 B,                                                |
        //      | ',                                              |
        //  900 |   '·,        3                                  |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |    1        #A----------------------------------D
        //      |           ,'                                    |
        //  600 |        ,·'                                      |
        //      |      ,'                                         |
        //  500 |   ,·'        2                                  |
        //      | ,'                                              |
        //  400 C'                                                |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 W-------------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(300, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in D-A-C-W-Z is at ~(740, 435) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(739.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(435.16).Within(0.01));
        // Centroid of #3 in X-Y-B-A-D is at ~(740, 965) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(739.56).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(964.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1000 W---------C#---------------------------#B---------Y
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'A'        3              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Z------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(500, 900) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #2 in A-C-W-Z-D is at ~(235, 460) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(235.16).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(460.44).Within(0.01));
        // Centroid of #3 in Y-B-A-D-X is at ~(765, 460) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(764.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(460.44).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(200, 200), // #3
        };

        //  500 W---------C#---------------------------#B---------Y
        //      |           ',                       ,'           |
        //  400 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  300 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  200 |              2        'A'        3              |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Z------------------------D------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(0, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in A-C-W-Z-D is at ~(-265, -40) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-264.84).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-39.56).Within(0.01));
        // Centroid of #3 in Y-B-A-D-X is at ~(265, -40) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(264.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-39.56).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(500, 500), // #3
        };

        //  800 W---------C#---------------------------#B---------Y
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'A'        3              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Z------------------------D------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(300, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-C-W-Z-D is at ~(35, 260) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(35.16).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(260.44).Within(0.01));
        // Centroid of #3 in Y-B-A-D-X is at ~(565, 260) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(564.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(260.44).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1200 W---------C#---------------------------#B---------Y
        //      |           ',                       ,'           |
        // 1100 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        // 1000 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  900 |              2        'A'        3              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Z------------------------D------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(700, 1100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1100.00).Within(0.01));
        // Centroid of #2 in A-C-W-Z-D is at ~(435, 660) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(435.16).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(660.44).Within(0.01));
        // Centroid of #3 in Y-B-A-D-X is at ~(965, 660) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(964.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(660.44).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(700, 300), // #3
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                ,C
        //      |                                              ,' |
        //  700 |                                  2        ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 D----------------------------------A#        1    |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                  3        '·,   |
        //      |                                              ', |
        //  200 |                                                'B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(900, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in C-W-Z-D-A is at ~(460, 765) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(460.44).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(764.84).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(460, 235) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(460.44).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(235.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(200, -200), // #3
        };

        //  500 Z-------------------------------------------------W
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                ,C
        //      |                                              ,' |
        //  200 |                                  2        ,·'   |
        //      |                                         ,'      |
        //  100 |                                      ,·'        |
        //      |                                    ,'           |
        //    0 D----------------------------------A#        1    |
        //      |                                    ',           |
        // -100 |                                      '·,        |
        //      |                                         ',      |
        // -200 |                                  3        '·,   |
        //      |                                              ', |
        // -300 |                                                'B
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(400, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-W-Z-D-A is at ~(-40, 265) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-39.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(264.84).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(-40, -265) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-39.56).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-264.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 100), // #3
        };

        //  800 Z-------------------------------------------------W
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                ,C
        //      |                                              ,' |
        //  500 |                                  2        ,·'   |
        //      |                                         ,'      |
        //  400 |                                      ,·'        |
        //      |                                    ,'           |
        //  300 D----------------------------------A#        1    |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                  3        '·,   |
        //      |                                              ', |
        //    0 |         ●                                      'B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(700, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-W-Z-D-A is at ~(260, 565) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(260.44).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(564.84).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(260, 35) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(260.44).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(35.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(900, 500), // #3
        };

        // 1200 Z-------------------------------------------------W
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                                ,C
        //      |                                              ,' |
        //  900 |                                  2        ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 D----------------------------------A#        1    |
        //      |                                    ',           |
        //  600 |                                      '·,        |
        //      |                                         ',      |
        //  500 |                                  3        '·,   |
        //      |                                              ', |
        //  400 |                                                'B
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(1100, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in C-W-Z-D-A is at ~(660, 965) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(660.44).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(964.84).Within(0.01));
        // Centroid of #3 in A-D-X-Y-B is at ~(660, 435) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(660.44).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(435.16).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 700), // #3
        };

        // 1000 X------------------------D------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  600 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 B'                                               'C
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(500, 248) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(248.15).Within(0.01));
        // Centroid of #2 in Z-D-A-C is at ~(788, 706) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(787.88).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(706.06).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(212, 706) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(212.12).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(706.06).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-200, 200), // #3
        };

        //  500 X------------------------D------------------------Z
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  100 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //    0 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -100 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -200 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -300 B'                                               'C
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(0, -252) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-251.85).Within(0.01));
        // Centroid of #2 in Z-D-A-C is at ~(288, 206) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(287.88).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(206.06).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(-288, 206) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-287.88).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(206.06).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 500), // #3
        };

        //  800 X------------------------D------------------------Z
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 B'        ●                                      'C
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(300, 48) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(48.15).Within(0.01));
        // Centroid of #2 in Z-D-A-C is at ~(588, 506) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(587.88).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(506.06).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(12, 506) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(12.12).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(506.06).Within(0.01));
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(500, 900), // #3
        };

        // 1200 X------------------------D------------------------Z
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  800 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  700 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  600 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  500 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  400 B'                                               'C
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(700, 448) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(448.15).Within(0.01));
        // Centroid of #2 in Z-D-A-C is at ~(988, 906) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(987.88).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(906.06).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(412, 906) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(412.12).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(906.06).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1000 Y---------B#--------------------------------------X
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,        3              |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                        1        #A--------------D
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'        2              |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 W---------C#--------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(248, 500) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(248.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in D-A-C-Z is at ~(706, 212) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(706.06).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(212.12).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(706, 788) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(706.06).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(787.88).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 200), // #3
        };

        //  500 Y---------B#--------------------------------------X
        //      |           ',                                    |
        //  400 |             '·,                                 |
        //      |                ',                               |
        //  300 |                  '·,                            |
        //      |                     ',                          |
        //  200 |                       '·,        3              |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 |                        1        #A--------------D
        //      |                               ,'                |
        // -100 |                            ,·'                  |
        //      |                          ,'                     |
        // -200 |                       ,·'        2              |
        //      |                     ,'                          |
        // -300 |                  ,·'                            |
        //      |                ,'                               |
        // -400 |             ,·'                                 |
        //      |           ,'                                    |
        // -500 W---------C#--------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -300, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(-252, -0) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-0.00).Within(0.01));
        // Centroid of #2 in D-A-C-Z is at ~(206, -288) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(206.06).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-287.88).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(206, 288) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(206.06).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(287.88).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 500), // #3
        };

        //  800 Y---------B#--------------------------------------X
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,        3              |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                        1        #A--------------D
        //      |                               ,'                |
        //  200 |                            ,·'                  |
        //      |                          ,'                     |
        //  100 |                       ,·'        2              |
        //      |                     ,'                          |
        //    0 |         ●        ,·'                            |
        //      |                ,'                               |
        // -100 |             ,·'                                 |
        //      |           ,'                                    |
        // -200 W---------C#--------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(48, 300) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(48.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in D-A-C-Z is at ~(506, 12) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(506.06).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(12.12).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(506, 588) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(506.06).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(587.88).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1200 Y---------B#--------------------------------------X
        //      |           ',                                    |
        // 1100 |             '·,                                 |
        //      |                ',                               |
        // 1000 |                  '·,                            |
        //      |                     ',                          |
        //  900 |                       '·,        3              |
        //      |                          ',                     |
        //  800 |                            '·,                  |
        //      |                               ',                |
        //  700 |                        1        #A--------------D
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'        2              |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 W---------C#--------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in A-B-Y-W-C is at ~(448, 700) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(448.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in D-A-C-Z is at ~(906, 412) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(906.06).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(412.12).Within(0.01));
        // Centroid of #3 in X-B-A-D is at ~(906, 988) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(906.06).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(987.88).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 C,                                               ,B
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  300 |              2        'A'        3              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Z------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-Y-W-C-A is at ~(500, 752) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(751.85).Within(0.01));
        // Centroid of #2 in A-C-Z-D is at ~(212, 294) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(212.12).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(293.94).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(788, 294) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(787.88).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(293.94).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
        };

        //  500 W-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 C,                                               ,B
        //      | ',                                           ,' |
        //  200 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  100 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //    0 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        // -100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        // -200 |              2        'A'        3              |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Z------------------------D------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-Y-W-C-A is at ~(0, 252) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(251.85).Within(0.01));
        // Centroid of #2 in A-C-Z-D is at ~(-288, -206) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-287.88).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-206.06).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(288, -206) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(287.88).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-206.06).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, 100), // #3
        };

        //  800 W-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 C,                                               ,B
        //      | ',                                           ,' |
        //  500 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  400 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  300 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  200 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  100 |              2        'A'        3              |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Z------------------------D------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-Y-W-C-A is at ~(300, 552) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(551.85).Within(0.01));
        // Centroid of #2 in A-C-Z-D is at ~(12, 94) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(12.12).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(93.94).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(588, 94) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(587.88).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(93.94).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 500), // #3
        };

        // 1200 W-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 C,                                               ,B
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'A'        3              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Z------------------------D------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in B-Y-W-C-A is at ~(700, 952) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(951.85).Within(0.01));
        // Centroid of #2 in A-C-Z-D is at ~(412, 494) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(412.12).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(493.94).Within(0.01));
        // Centroid of #3 in B-A-D-X is at ~(988, 494) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(987.88).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(493.94).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1000 Z--------------------------------------#C---------W
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |              2        ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 D--------------A#        1                        |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |              3        '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 X--------------------------------------#B---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in W-C-A-B-Y is at ~(752, 500) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(751.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in C-Z-D-A is at ~(294, 788) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(293.94).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(787.88).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(294, 212) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(293.94).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(212.12).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -200), // #3
        };

        //  500 Z--------------------------------------#C---------W
        //      |                                    ,'           |
        //  400 |                                 ,·'             |
        //      |                               ,'                |
        //  300 |                            ,·'                  |
        //      |                          ,'                     |
        //  200 |              2        ,·'                       |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 D--------------A#        1                        |
        //      |                ',                               |
        // -100 |                  '·,                            |
        //      |                     ',                          |
        // -200 |              3        '·,                       |
        //      |                          ',                     |
        // -300 |                            '·,                  |
        //      |                               ',                |
        // -400 |                                 '·,             |
        //      |                                    ',           |
        // -500 X--------------------------------------#B---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in W-C-A-B-Y is at ~(252, -0) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-0.00).Within(0.01));
        // Centroid of #2 in C-Z-D-A is at ~(-206, 288) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-206.06).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(287.88).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(-206, -288) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-206.06).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-287.88).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, 100), // #3
        };

        //  800 Z--------------------------------------#C---------W
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |              2        ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 D--------------A#        1                        |
        //      |                ',                               |
        //  200 |                  '·,                            |
        //      |                     ',                          |
        //  100 |              3        '·,                       |
        //      |                          ',                     |
        //    0 |         ●                  '·,                  |
        //      |                               ',                |
        // -100 |                                 '·,             |
        //      |                                    ',           |
        // -200 X--------------------------------------#B---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in W-C-A-B-Y is at ~(552, 300) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(551.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-Z-D-A is at ~(94, 588) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(93.94).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(587.88).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(94, 12) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(93.94).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(12.12).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1200 Z--------------------------------------#C---------W
        //      |                                    ,'           |
        // 1100 |                                 ,·'             |
        //      |                               ,'                |
        // 1000 |                            ,·'                  |
        //      |                          ,'                     |
        //  900 |              2        ,·'                       |
        //      |                     ,'                          |
        //  800 |                  ,·'                            |
        //      |                ,'                               |
        //  700 D--------------A#        1                        |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |              3        '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 X--------------------------------------#B---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has X"); // #3 has X

        // Assert

        // Centroid of #1 in W-C-A-B-Y is at ~(952, 700) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(951.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in C-Z-D-A is at ~(494, 988) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(493.94).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(987.88).Within(0.01));
        // Centroid of #3 in A-D-X-B is at ~(494, 412) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(493.94).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(412.12).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1000 E#-----------------------------------------------#H
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  500 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  400 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 F#-----------------------------------------------#G
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 400), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 600, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 1000, 1000), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(500, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-E-F-B is at ~(156, 500) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(155.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(500, 156) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(155.56).Within(0.01));
        // Centroid of #4 in H-D-C-G is at ~(844, 500) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(844.44).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #5 in H-E-A-D is at ~(500, 844) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(844.44).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(0, -200), // #3
            new VoronoiSite(200, 0), // #4
            new VoronoiSite(0, 200), // #5
        };

        //  500 E#-----------------------------------------------#H
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  100 |                  'A---------D'                  |
        //      |                   |         |                   |
        //    0 |              2    |    1    |    4              |
        //      |                   |         |                   |
        // -100 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        // -200 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        // -300 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -400 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -500 F#-----------------------------------------------#G
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 100, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, -100), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 100, 100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, -100, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 100, 100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(0, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-E-F-B is at ~(-344, 0) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-344.44).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(0, -344) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-344.44).Within(0.01));
        // Centroid of #4 in H-D-C-G is at ~(344, 0) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(344.44).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #5 in H-E-A-D is at ~(0, 344) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(344.44).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(300, 500), // #5
        };

        //  800 E#-----------------------------------------------#H
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  300 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  200 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //    0 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -200 F#-----------------------------------------------#G
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 200), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 400, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(300, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-E-F-B is at ~(-44, 300) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-44.44).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(300, -44) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-44.44).Within(0.01));
        // Centroid of #4 in H-D-C-G is at ~(644, 300) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(644.44).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #5 in H-E-A-D is at ~(300, 644) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(644.44).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(700, 500), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(700, 900), // #5
        };

        // 1200 E#-----------------------------------------------#H
        //      | ',                                           ,' |
        // 1100 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        // 1000 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  900 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  700 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  600 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 F#-----------------------------------------------#G
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 800), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 1200, 1200), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(700, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-E-F-B is at ~(356, 700) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(355.56).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(700, 356) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(355.56).Within(0.01));
        // Centroid of #4 in H-D-C-G is at ~(1044, 700) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1044.44).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #5 in H-E-A-D is at ~(700, 1044) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(1044.44).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(700, 300), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 E,                                               ,H
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  300 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  200 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //    0 Y---------F#---------------------------#G---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 800, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 800), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 600, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, 800), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 1000, 800), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 1000, 1000), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-E-Y-F-B is at ~(164, 333) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(163.64).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(500, 83) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(83.33).Within(0.01));
        // Centroid of #4 in H-D-C-G-W is at ~(836, 333) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(836.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #5 in H-Z-X-E-A-D is at ~(500, 761) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(760.61).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(0, -400), // #3
            new VoronoiSite(200, -200), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 X-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 E,                                               ,H
        //      | ',                                           ,' |
        //  200 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  100 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //    0 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        // -100 |                  'A---------D'                  |
        //      |                   |         |                   |
        // -200 |              2    |    1    |    4              |
        //      |                   |         |                   |
        // -300 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        // -400 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        // -500 Y---------F#---------------------------#G---------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, -300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 100, -300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -300, -500), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 300, -500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, -300), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 100, -100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 300, -500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, -100, -100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 100, -100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -500, 300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(0, -200) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
        // Centroid of #2 in A-E-Y-F-B is at ~(-336, -167) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-336.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(0, -417) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-416.67).Within(0.01));
        // Centroid of #4 in H-D-C-G-W is at ~(336, -167) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(336.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #5 in H-Z-X-E-A-D is at ~(0, 261) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(260.61).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, -100), // #3
            new VoronoiSite(500, 100), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 X-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 E,                                               ,H
        //      | ',                                           ,' |
        //  500 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  400 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  300 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  200 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  100 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //    0 |         ●        ,B---------C,                  |
        //      |                ,'             ',                |
        // -100 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        // -200 Y---------F#---------------------------#G---------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 600, -200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 600, -200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 400, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, 600), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 800, 600), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(300, 100) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in A-E-Y-F-B is at ~(-36, 133) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-36.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(300, -117) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-116.67).Within(0.01));
        // Centroid of #4 in H-D-C-G-W is at ~(636, 133) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(636.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #5 in H-Z-X-E-A-D is at ~(300, 561) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(560.61).Within(0.01));
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(900, 500), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 X-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 E,                                               ,H
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  500 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  400 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  200 Y---------F#---------------------------#G---------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 400), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1000, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 1000), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 800, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 1000), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 1200, 1000), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 1200, 1200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-A-B-C is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-E-Y-F-B is at ~(364, 533) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(363.64).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in C-B-F-G is at ~(700, 283) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(283.33).Within(0.01));
        // Centroid of #4 in H-D-C-G-W is at ~(1036, 533) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1036.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #5 in H-Z-X-E-A-D is at ~(700, 961) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(960.61).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(300, 300), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 Y--------------------------------------#E---------X
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 F,                           ,·'                  |
        //      | ',                       ,'                     |
        //  700 |   '·,        2        ,·'                       |
        //      |      ',             ,'                          |
        //  600 |        'B---------A'                            |
        //      |         |         |                             |
        //  500 |    3    |    1    |    5                        |
        //      |         |         |                             |
        //  400 |        ,C---------D,                            |
        //      |      ,'             ',                          |
        //  300 |   ,·'        4        '·,                       |
        //      | ,'                       ',                     |
        //  200 G'                           '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 W--------------------------------------#H---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, 0), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 400, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 800, 1000), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 800, 0), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 1000, 1000), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 1000, 0), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in A-B-C-D is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in E-Y-F-B-A is at ~(333, 836) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(836.36).Within(0.01));
        // Centroid of #3 in B-F-G-C is at ~(83, 500) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(83.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in D-C-G-W-H is at ~(333, 164) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(163.64).Within(0.01));
        // Centroid of #5 in X-E-A-D-H-Z is at ~(761, 500) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(760.61).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-400, 0), // #3
            new VoronoiSite(-200, -200), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 Y--------------------------------------#E---------X
        //      |                                    ,'           |
        //  400 |                                 ,·'             |
        //      |                               ,'                |
        //  300 F,                           ,·'                  |
        //      | ',                       ,'                     |
        //  200 |   '·,        2        ,·'                       |
        //      |      ',             ,'                          |
        //  100 |        'B---------A'                            |
        //      |         |         |                             |
        //    0 |    3    |    1    |    5                        |
        //      |         |         |                             |
        // -100 |        ,C---------D,                            |
        //      |      ,'             ',                          |
        // -200 |   ,·'        4        '·,                       |
        //      | ,'                       ',                     |
        // -300 G'                           '·,                  |
        //      |                               ',                |
        // -400 |                                 '·,             |
        //      |                                    ',           |
        // -500 W--------------------------------------#H---------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -300, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, -100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, 100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -300, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 300), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, -500, -300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, -300, -100), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, -100, -100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -500, -300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 300, -500), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, -100, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -100, -100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 300, -500), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 500, -500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in A-B-C-D is at ~(-200, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in E-Y-F-B-A is at ~(-167, 336) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(336.36).Within(0.01));
        // Centroid of #3 in B-F-G-C is at ~(-417, 0) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-416.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #4 in D-C-G-W-H is at ~(-167, -336) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-336.36).Within(0.01));
        // Centroid of #5 in X-E-A-D-H-Z is at ~(261, 0) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(260.61).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(-100, 300), // #3
            new VoronoiSite(100, 100), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 Y--------------------------------------#E---------X
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 F,                           ,·'                  |
        //      | ',                       ,'                     |
        //  500 |   '·,        2        ,·'                       |
        //      |      ',             ,'                          |
        //  400 |        'B---------A'                            |
        //      |         |         |                             |
        //  300 |    3    |    1    |    5                        |
        //      |         |         |                             |
        //  200 |        ,C---------D,                            |
        //      |      ,'             ',                          |
        //  100 |   ,·'        4        '·,                       |
        //      | ,'                       ',                     |
        //    0 G'        ●                  '·,                  |
        //      |                               ',                |
        // -100 |                                 '·,             |
        //      |                                    ',           |
        // -200 W--------------------------------------#H---------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 600), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 200), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -200, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 600, -200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 600, 800), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 600, -200), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 800, -200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in A-B-C-D is at ~(100, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in E-Y-F-B-A is at ~(133, 636) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(636.36).Within(0.01));
        // Centroid of #3 in B-F-G-C is at ~(-117, 300) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-116.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in D-C-G-W-H is at ~(133, -36) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-36.36).Within(0.01));
        // Centroid of #5 in X-E-A-D-H-Z is at ~(561, 300) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(560.61).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 Y--------------------------------------#E---------X
        //      |                                    ,'           |
        // 1100 |                                 ,·'             |
        //      |                               ,'                |
        // 1000 F,                           ,·'                  |
        //      | ',                       ,'                     |
        //  900 |   '·,        2        ,·'                       |
        //      |      ',             ,'                          |
        //  800 |        'B---------A'                            |
        //      |         |         |                             |
        //  700 |    3    |    1    |    5                        |
        //      |         |         |                             |
        //  600 |        ,C---------D,                            |
        //      |      ,'             ',                          |
        //  500 |   ,·'        4        '·,                       |
        //      | ,'                       ',                     |
        //  400 G'                           '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 W--------------------------------------#H---------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 600), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 800), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 600, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1000, 1200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 1000, 200), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 1200, 1200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 1200, 200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in A-B-C-D is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in E-Y-F-B-A is at ~(533, 1036) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1036.36).Within(0.01));
        // Centroid of #3 in B-F-G-C is at ~(283, 700) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(283.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #4 in D-C-G-W-H is at ~(533, 364) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(363.64).Within(0.01));
        // Centroid of #5 in X-E-A-D-H-Z is at ~(961, 700) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(960.61).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(300, 700), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 W---------G#---------------------------#F---------Y
        //      |           ',                       ,'           |
        //  900 |             '·,        3        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  'C---------B'                  |
        //      |                   |         |                   |
        //  700 |              4    |    1    |    2              |
        //      |                   |         |                   |
        //  600 |                  ,D---------A,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        5        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 H'                                               'E
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 800), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 1000), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 400, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1000, 200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 200), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 1000, 0), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-C-D-A is at ~(500, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in Y-F-B-A-E is at ~(836, 667) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(836.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in F-G-C-B is at ~(500, 917) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(916.67).Within(0.01));
        // Centroid of #4 in C-G-W-H-D is at ~(164, 667) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(163.64).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #5 in A-D-H-Z-X-E is at ~(500, 239) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(239.39).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(0, 400), // #3
            new VoronoiSite(-200, 200), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 W---------G#---------------------------#F---------Y
        //      |           ',                       ,'           |
        //  400 |             '·,        3        ,·'             |
        //      |                ',             ,'                |
        //  300 |                  'C---------B'                  |
        //      |                   |         |                   |
        //  200 |              4    |    1    |    2              |
        //      |                   |         |                   |
        //  100 |                  ,D---------A,                  |
        //      |                ,'             ',                |
        //    0 |             ,·'        5        '·,             |
        //      |           ,'                       ',           |
        // -100 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -200 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -300 H'                                               'E
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -100, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -100, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, -300, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, 300), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, -100, 100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -300, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -500, -300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -100, 100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, -300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -500, -300), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 500, -500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, -500, -500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-C-D-A is at ~(0, 200) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in Y-F-B-A-E is at ~(336, 167) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(336.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in F-G-C-B is at ~(0, 417) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(416.67).Within(0.01));
        // Centroid of #4 in C-G-W-H-D is at ~(-336, 167) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-336.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #5 in A-D-H-Z-X-E is at ~(0, -261) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-260.61).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(100, 500), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 W---------G#---------------------------#F---------Y
        //      |           ',                       ,'           |
        //  700 |             '·,        3        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  'C---------B'                  |
        //      |                   |         |                   |
        //  500 |              4    |    1    |    2              |
        //      |                   |         |                   |
        //  400 |                  ,D---------A,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        5        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 H'        ●                                      'E
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 600), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 800), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -200, 0), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 200, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 800, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -200, 0), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 800, -200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, -200, -200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-C-D-A is at ~(300, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in Y-F-B-A-E is at ~(636, 467) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(636.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in F-G-C-B is at ~(300, 717) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(716.67).Within(0.01));
        // Centroid of #4 in C-G-W-H-D is at ~(-36, 467) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-36.36).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #5 in A-D-H-Z-X-E is at ~(300, 39) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(39.39).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 1100), // #3
            new VoronoiSite(500, 900), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 W---------G#---------------------------#F---------Y
        //      |           ',                       ,'           |
        // 1100 |             '·,        3        ,·'             |
        //      |                ',             ,'                |
        // 1000 |                  'C---------B'                  |
        //      |                   |         |                   |
        //  900 |              4    |    1    |    2              |
        //      |                   |         |                   |
        //  800 |                  ,D---------A,                  |
        //      |                ,'             ',                |
        //  700 |             ,·'        5        '·,             |
        //      |           ,'                       ',           |
        //  600 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  500 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  400 H'                                               'E
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 400, 1200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 1000), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 400, 1200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 600, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1200, 400), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 400), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 1200, 200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-C-D-A is at ~(700, 900) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #2 in Y-F-B-A-E is at ~(1036, 867) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1036.36).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #3 in F-G-C-B is at ~(700, 1117) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1116.67).Within(0.01));
        // Centroid of #4 in C-G-W-H-D is at ~(364, 867) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(363.64).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #5 in A-D-H-Z-X-E is at ~(700, 439) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(439.39).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(700, 700), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 Z---------H#--------------------------------------W
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                           ,G
        //      |                     ',                       ,' |
        //  700 |                       '·,        4        ,·'   |
        //      |                          ',             ,'      |
        //  600 |                            'D---------C'        |
        //      |                             |         |         |
        //  500 |                        5    |    1    |    3    |
        //      |                             |         |         |
        //  400 |                            ,A---------B,        |
        //      |                          ,'             ',      |
        //  300 |                       ,·'        2        '·,   |
        //      |                     ,'                       ', |
        //  200 |                  ,·'                           'F
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 X---------E#--------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 1000, 800), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1000, 800), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 1000), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 600, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 1000), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-D-A-B is at ~(700, 500) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in B-A-E-Y-F is at ~(667, 164) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(163.64).Within(0.01));
        // Centroid of #3 in G-C-B-F is at ~(917, 500) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(916.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in G-W-H-D-C is at ~(667, 836) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(836.36).Within(0.01));
        // Centroid of #5 in D-H-Z-X-E-A is at ~(239, 500) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(239.39).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 Z---------H#--------------------------------------W
        //      |           ',                                    |
        //  400 |             '·,                                 |
        //      |                ',                               |
        //  300 |                  '·,                           ,G
        //      |                     ',                       ,' |
        //  200 |                       '·,        4        ,·'   |
        //      |                          ',             ,'      |
        //  100 |                            'D---------C'        |
        //      |                             |         |         |
        //    0 |                        5    |    1    |    3    |
        //      |                             |         |         |
        // -100 |                            ,A---------B,        |
        //      |                          ,'             ',      |
        // -200 |                       ,·'        2        '·,   |
        //      |                     ,'                       ', |
        // -300 |                  ,·'                           'F
        //      |                ,'                               |
        // -400 |             ,·'                                 |
        //      |           ,'                                    |
        // -500 X---------E#--------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -300), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 100), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 100, 100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -300, 500), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, -100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 100, 100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -300, -500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -300, 500), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, -500, -500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-D-A-B is at ~(200, 0) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-A-E-Y-F is at ~(167, -336) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-336.36).Within(0.01));
        // Centroid of #3 in G-C-B-F is at ~(417, 0) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(416.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #4 in G-W-H-D-C is at ~(167, 336) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(336.36).Within(0.01));
        // Centroid of #5 in D-H-Z-X-E-A is at ~(-261, 0) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-260.61).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 Z---------H#--------------------------------------W
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                           ,G
        //      |                     ',                       ,' |
        //  500 |                       '·,        4        ,·'   |
        //      |                          ',             ,'      |
        //  400 |                            'D---------C'        |
        //      |                             |         |         |
        //  300 |                        5    |    1    |    3    |
        //      |                             |         |         |
        //  200 |                            ,A---------B,        |
        //      |                          ,'             ',      |
        //  100 |                       ,·'        2        '·,   |
        //      |                     ,'                       ', |
        //    0 |         ●        ,·'                           'F
        //      |                ,'                               |
        // -100 |             ,·'                                 |
        //      |           ,'                                    |
        // -200 X---------E#--------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 400), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 800), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 400, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, -200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 800), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, -200, -200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-D-A-B is at ~(500, 300) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-A-E-Y-F is at ~(467, -36) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-36.36).Within(0.01));
        // Centroid of #3 in G-C-B-F is at ~(717, 300) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(716.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in G-W-H-D-C is at ~(467, 636) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(636.36).Within(0.01));
        // Centroid of #5 in D-H-Z-X-E-A is at ~(39, 300) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(39.39).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(1100, 700), // #3
            new VoronoiSite(900, 900), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 Z---------H#--------------------------------------W
        //      |           ',                                    |
        // 1100 |             '·,                                 |
        //      |                ',                               |
        // 1000 |                  '·,                           ,G
        //      |                     ',                       ,' |
        //  900 |                       '·,        4        ,·'   |
        //      |                          ',             ,'      |
        //  800 |                            'D---------C'        |
        //      |                             |         |         |
        //  700 |                        5    |    1    |    3    |
        //      |                             |         |         |
        //  600 |                            ,A---------B,        |
        //      |                          ,'             ',      |
        //  500 |                       ,·'        2        '·,   |
        //      |                     ,'                       ', |
        //  400 |                  ,·'                           'F
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 X---------E#--------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 400), Is.True, "Expected: site #3 has F"); // #3 has F
        Assume.That(HasPoint(sites[2].Points, 1200, 1000), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 1000, 800), Is.True, "Expected: site #4 has C"); // #4 has C
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1200, 1000), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 400, 1200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has W"); // #4 has W
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(6), "Expected: site #5 point count 6"); // #5
        Assume.That(HasPoint(sites[4].Points, 800, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 400, 200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 400, 1200), Is.True, "Expected: site #5 has H"); // #5 has H
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-D-A-B is at ~(900, 700) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-A-E-Y-F is at ~(867, 364) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(363.64).Within(0.01));
        // Centroid of #3 in G-C-B-F is at ~(1117, 700) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1116.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #4 in G-W-H-D-C is at ~(867, 1036) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(1036.36).Within(0.01));
        // Centroid of #5 in D-H-Z-X-E-A is at ~(439, 700) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(439.39).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(700, 700), // #4
        };

        // 1000 X------------------------B------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              1         |         4              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 C------------------------A------------------------E
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              2         |         3              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(250, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(750, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(750, 750) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(200, 200), // #4
        };

        //  500 X------------------------B------------------------Z
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |              1         |         4              |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 C------------------------A------------------------E
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |              2         |         3              |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Y------------------------D------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(-250, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(-250, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(250, -250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(500, 500), // #4
        };

        //  800 X------------------------B------------------------Z
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              1         |         4              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 C------------------------A------------------------E
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              2         |         3              |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Y------------------------D------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(50, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(50, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(550, 50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(550, 550) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(900, 900), // #4
        };

        // 1200 X------------------------B------------------------Z
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |              1         |         4              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 C------------------------A------------------------E
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              2         |         3              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Y------------------------D------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(450, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(450, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(950, 450) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(950, 950) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(600, 200), // #3
            new VoronoiSite(600, 800), // #4
        };

        // 1000 X------------------------B------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                   1    |    4                   |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 C------------------------A------------------------E
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                   2    |    3                   |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(250, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(750, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(750, 750) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(-100, -300), // #2
            new VoronoiSite(100, -300), // #3
            new VoronoiSite(100, 300), // #4
        };

        //  500 X------------------------B------------------------Z
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                   1    |    4                   |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 C------------------------A------------------------E
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                   2    |    3                   |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Y------------------------D------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(-250, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(-250, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(250, -250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(400, 600), // #4
        };

        //  800 X------------------------B------------------------Z
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                   1    |    4                   |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 C------------------------A------------------------E
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●         2    |    3                   |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Y------------------------D------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(50, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(50, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(550, 50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(550, 550) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(800, 400), // #3
            new VoronoiSite(800, 1000), // #4
        };

        // 1200 X------------------------B------------------------Z
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                   1    |    4                   |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 C------------------------A------------------------E
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                   2    |    3                   |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Y------------------------D------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(450, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(450, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(950, 450) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #4 in Z-B-A-E is at ~(950, 950) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(200, 600), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(800, 400), // #4
        };

        // 1000 Y------------------------C------------------------X
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |         2              |              1         |
        //      |                        |                        |
        //  500 D------------------------A------------------------B
        //      |                        |                        |
        //  400 |         3              |              4         |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------E------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-C-A-B is at ~(750, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(250, 750) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(750, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(-300, 100), // #2
            new VoronoiSite(-300, -100), // #3
            new VoronoiSite(300, -100), // #4
        };

        //  500 Y------------------------C------------------------X
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |         2              |              1         |
        //      |                        |                        |
        //    0 D------------------------A------------------------B
        //      |                        |                        |
        // -100 |         3              |              4         |
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 W------------------------E------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 0, -500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-C-A-B is at ~(250, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(-250, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(-250, -250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(250, -250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 400), // #1
            new VoronoiSite(0, 400), // #2
            new VoronoiSite(0, 200), // #3
            new VoronoiSite(600, 200), // #4
        };

        //  800 Y------------------------C------------------------X
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |         2              |              1         |
        //      |                        |                        |
        //  300 D------------------------A------------------------B
        //      |                        |                        |
        //  200 |         3              |              4         |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 W------------------------E------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 300, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-C-A-B is at ~(550, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(50, 550) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(50, 50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(550, 50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 800), // #1
            new VoronoiSite(400, 800), // #2
            new VoronoiSite(400, 600), // #3
            new VoronoiSite(1000, 600), // #4
        };

        // 1200 Y------------------------C------------------------X
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |         2              |              1         |
        //      |                        |                        |
        //  700 D------------------------A------------------------B
        //      |                        |                        |
        //  600 |         3              |              4         |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 W------------------------E------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 700, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-C-A-B is at ~(950, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(450, 950) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(450, 450) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(950, 450) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 B#-----------------------------------------------#E
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              4        #A#        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 C#-----------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has C"); // #4 has C

        // Assert

        // Centroid of #1 in E-B-A is at ~(500, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in E-A-D is at ~(833, 500) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in A-C-D is at ~(500, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #4 in A-B-C is at ~(167, 500) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(0, -200), // #3
            new VoronoiSite(-200, 0), // #4
        };

        //  500 B#-----------------------------------------------#E
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 |              4        #A#        2              |
        //      |                     ,'   ',                     |
        // -100 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // -200 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        // -300 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -400 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -500 C#-----------------------------------------------#D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has C"); // #4 has C

        // Assert

        // Centroid of #1 in E-B-A is at ~(0, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in E-A-D is at ~(333, 0) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #3 in A-C-D is at ~(0, -333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #4 in A-B-C is at ~(-333, 0) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(100, 300), // #4
        };

        //  800 B#-----------------------------------------------#E
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  300 |              4        #A#        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //    0 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -200 C#-----------------------------------------------#D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has C"); // #4 has C

        // Assert

        // Centroid of #1 in E-B-A is at ~(300, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in E-A-D is at ~(633, 300) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in A-C-D is at ~(300, -33) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #4 in A-B-C is at ~(-33, 300) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(700, 500), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1200 B#-----------------------------------------------#E
        //      | ',                                           ,' |
        // 1100 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        // 1000 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              4        #A#        2              |
        //      |                     ,'   ',                     |
        //  600 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 C#-----------------------------------------------#D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has C"); // #4 has C

        // Assert

        // Centroid of #1 in E-B-A is at ~(700, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in E-A-D is at ~(1033, 700) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in A-C-D is at ~(700, 367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #4 in A-B-C is at ~(367, 700) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1000 X----B--------------------------------------------Z
        //      |     '                                           |
        //  900 |      ',                                         |
        //      |        ,                                        |
        //  800 |         ·                                       |
        //      |          '                                      |
        //  700 |           ',           4                      ,,E
        //      |             ,                            ,,·''  |
        //  600 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  500 |    1           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  400 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  300 |       ,,·''         ',           3              |
        //      |  ,,·''                ,                         |
        //  200 C''                      ·                        |
        //      |                         '                       |
        //  100 |              2           ',                     |
        //      |                            ,                    |
        //    0 Y-----------------------------D-------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 100, 1000), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1000, 700), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(139, 575) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(138.60).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(575.44).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(283, 150) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(283.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(763, 302) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(763.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(302.30).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(575, 775) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(575.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(775.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -400), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(0, 200), // #4
        };

        //  500 X----B--------------------------------------------Z
        //      |     '                                           |
        //  400 |      ',                                         |
        //      |        ,                                        |
        //  300 |         ·                                       |
        //      |          '                                      |
        //  200 |           ',           4                      ,,E
        //      |             ,                            ,,·''  |
        //  100 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //    0 |    1           ',      ●  ,,·''                 |
        //      |                  ,   ,,·''                      |
        // -100 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        // -200 |       ,,·''         ',           3              |
        //      |  ,,·''                ,                         |
        // -300 C''                      ·                        |
        //      |                         '                       |
        // -400 |              2           ',                     |
        //      |                            ,                    |
        // -500 Y-----------------------------D-------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -400, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, -100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -400, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(-361, 75) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-361.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(75.44).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(-217, -350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(263, -198) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(263.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-197.70).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(75, 275) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(75.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(275.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(300, 500), // #4
        };

        //  800 X----B--------------------------------------------Z
        //      |     '                                           |
        //  700 |      ',                                         |
        //      |        ,                                        |
        //  600 |         ·                                       |
        //      |          '                                      |
        //  500 |           ',           4                      ,,E
        //      |             ,                            ,,·''  |
        //  400 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  300 |    1           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  200 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  100 |       ,,·''         ',           3              |
        //      |  ,,·''                ,                         |
        //    0 C''       ●              ·                        |
        //      |                         '                       |
        // -100 |              2           ',                     |
        //      |                            ,                    |
        // -200 Y-----------------------------D-------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -100, 800), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 800, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(-61, 375) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-61.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(375.44).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(83, -50) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(563, 102) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(563.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(102.30).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(375, 575) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(375.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(575.00).Within(0.01));
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(700, 900), // #4
        };

        // 1200 X----B--------------------------------------------Z
        //      |     '                                           |
        // 1100 |      ',                                         |
        //      |        ,                                        |
        // 1000 |         ·                                       |
        //      |          '                                      |
        //  900 |           ',           4                      ,,E
        //      |             ,                            ,,·''  |
        //  800 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  700 |    1           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  600 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  500 |       ,,·''         ',           3              |
        //      |  ,,·''                ,                         |
        //  400 C''                      ·                        |
        //      |                         '                       |
        //  300 |              2           ',                     |
        //      |                            ,                    |
        //  200 Y-----------------------------D-------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 900), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 1200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1200, 900), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(339, 775) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(338.60).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(775.44).Within(0.01));
        // Centroid of #2 in A-C-Y-D is at ~(483, 350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(483.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in E-A-D-W is at ~(963, 502) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(963.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(502.30).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(775, 975) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(775.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(975.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1000 Y---------C---------------------------------------X
        //      |          '                                      |
        //  900 |           ',           1                      ,,B
        //      |             ,                            ,,·''  |
        //  800 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  700 |    2           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  600 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  500 |       ,,·''         ',           4              |
        //      |  ,,·''                ,                         |
        //  400 D''                      ·                        |
        //      |                         '                       |
        //  300 |              3           ',                     |
        //      |                            ,                    |
        //  200 |                             ·                   |
        //      |                              '                  |
        //  100 |                               ',                |
        //      |                                 ,               |
        //    0 W----------------------------------E--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 900), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 700, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(575, 861) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(575.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(861.40).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(150, 717) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(716.67).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(302, 237) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(302.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(236.78).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(775, 425) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(775.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(425.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-400, 200), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(200, 0), // #4
        };

        //  500 Y---------C---------------------------------------X
        //      |          '                                      |
        //  400 |           ',           1                      ,,B
        //      |             ,                            ,,·''  |
        //  300 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  200 |    2           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  100 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //    0 |       ,,·''         ', ●         4              |
        //      |  ,,·''                ,                         |
        // -100 D''                      ·                        |
        //      |                         '                       |
        // -200 |              3           ',                     |
        //      |                            ,                    |
        // -300 |                             ·                   |
        //      |                              '                  |
        // -400 |                               ',                |
        //      |                                 ,               |
        // -500 W----------------------------------E--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 400), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 200, -500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(75, 361) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(75.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(361.40).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(-350, 217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(-198, -263) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-197.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-263.22).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(275, -75) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(275.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-75.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(-100, 500), // #2
            new VoronoiSite(100, 100), // #3
            new VoronoiSite(500, 300), // #4
        };

        //  800 Y---------C---------------------------------------X
        //      |          '                                      |
        //  700 |           ',           1                      ,,B
        //      |             ,                            ,,·''  |
        //  600 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  500 |    2           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  400 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  300 |       ,,·''         ',           4              |
        //      |  ,,·''                ,                         |
        //  200 D''                      ·                        |
        //      |                         '                       |
        //  100 |              3           ',                     |
        //      |                            ,                    |
        //    0 |         ●                   ·                   |
        //      |                              '                  |
        // -100 |                               ',                |
        //      |                                 ,               |
        // -200 W----------------------------------E--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 700), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(375, 661) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(375.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(661.40).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(-50, 517) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(516.67).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(102, 37) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(102.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(36.78).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(575, 225) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(575.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(225.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(900, 700), // #4
        };

        // 1200 Y---------C---------------------------------------X
        //      |          '                                      |
        // 1100 |           ',           1                      ,,B
        //      |             ,                            ,,·''  |
        // 1000 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  900 |    2           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  800 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  700 |       ,,·''         ',           4              |
        //      |  ,,·''                ,                         |
        //  600 D''                      ·                        |
        //      |                         '                       |
        //  500 |              3           ',                     |
        //      |                            ,                    |
        //  400 |                             ·                   |
        //      |                              '                  |
        //  300 |                               ',                |
        //      |                                 ,               |
        //  200 W----------------------------------E--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 1100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 900, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-X-C-A is at ~(775, 1061) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(775.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1061.40).Within(0.01));
        // Centroid of #2 in C-Y-D-A is at ~(350, 917) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(916.67).Within(0.01));
        // Centroid of #3 in A-D-W-E is at ~(502, 437) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(502.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(436.78).Within(0.01));
        // Centroid of #4 in B-A-E-Z is at ~(975, 625) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(975.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(625.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(500, 300), // #4
        };

        // 1000 W-------------------D-----------------------------Y
        //      |                    '                            |
        //  900 |                     ',           2              |
        //      |                       ,                         |
        //  800 |                        ·                      ,,C
        //      |                         '                ,,·''  |
        //  700 |              3           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  600 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  500 |                 ,,·''         ',           1    |
        //      |            ,,·''                ,               |
        //  400 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  300 E''                      4           ',           |
        //      |                                      ,          |
        //  200 |                                       ·         |
        //      |                                        '        |
        //  100 |                                         ',      |
        //      |                                           ,     |
        //    0 Z--------------------------------------------B----X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 900, 0), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 0, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-A-B-X is at ~(861, 425) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(861.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(424.56).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(717, 850) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(716.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #3 in D-W-E-A is at ~(237, 698) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(236.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(697.70).Within(0.01));
        // Centroid of #4 in A-E-Z-B is at ~(425, 225) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(425.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(225.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(0, -200), // #4
        };

        //  500 W-------------------D-----------------------------Y
        //      |                    '                            |
        //  400 |                     ',           2              |
        //      |                       ,                         |
        //  300 |                        ·                      ,,C
        //      |                         '                ,,·''  |
        //  200 |              3           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  100 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //    0 |                 ,,·''  ●      ',           1    |
        //      |            ,,·''                ,               |
        // -100 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        // -200 E''                      4           ',           |
        //      |                                      ,          |
        // -300 |                                       ·         |
        //      |                                        '        |
        // -400 |                                         ',      |
        //      |                                           ,     |
        // -500 Z--------------------------------------------B----X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, -500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -500, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-A-B-X is at ~(361, -75) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(361.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-75.44).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(217, 350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in D-W-E-A is at ~(-263, 198) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-263.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(197.70).Within(0.01));
        // Centroid of #4 in A-E-Z-B is at ~(-75, -275) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-75.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-275.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(300, 100), // #4
        };

        //  800 W-------------------D-----------------------------Y
        //      |                    '                            |
        //  700 |                     ',           2              |
        //      |                       ,                         |
        //  600 |                        ·                      ,,C
        //      |                         '                ,,·''  |
        //  500 |              3           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  400 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  300 |                 ,,·''         ',           1    |
        //      |            ,,·''                ,               |
        //  200 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  100 E''                      4           ',           |
        //      |                                      ,          |
        //    0 |         ●                             ·         |
        //      |                                        '        |
        // -100 |                                         ',      |
        //      |                                           ,     |
        // -200 Z--------------------------------------------B----X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, -200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, 100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-A-B-X is at ~(661, 225) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(661.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(224.56).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(517, 650) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(516.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #3 in D-W-E-A is at ~(37, 498) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(36.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(497.70).Within(0.01));
        // Centroid of #4 in A-E-Z-B is at ~(225, 25) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(225.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(25.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1200 W-------------------D-----------------------------Y
        //      |                    '                            |
        // 1100 |                     ',           2              |
        //      |                       ,                         |
        // 1000 |                        ·                      ,,C
        //      |                         '                ,,·''  |
        //  900 |              3           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  800 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  700 |                 ,,·''         ',           1    |
        //      |            ,,·''                ,               |
        //  600 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  500 E''                      4           ',           |
        //      |                                      ,          |
        //  400 |                                       ·         |
        //      |                                        '        |
        //  300 |                                         ',      |
        //      |                                           ,     |
        //  200 Z--------------------------------------------B----X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1100, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1100, 200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-A-B-X is at ~(1061, 625) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1061.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(624.56).Within(0.01));
        // Centroid of #2 in Y-D-A-C is at ~(917, 1050) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(916.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #3 in D-W-E-A is at ~(437, 898) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(436.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(897.70).Within(0.01));
        // Centroid of #4 in A-E-Z-B is at ~(625, 425) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(625.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(425.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 Z--------------E----------------------------------W
        //      |               '                                 |
        //  900 |                ',                               |
        //      |                  ,                              |
        //  800 |                   ·                             |
        //      |                    '                            |
        //  700 |                     ',           3              |
        //      |                       ,                         |
        //  600 |                        ·                      ,,D
        //      |                         '                ,,·''  |
        //  500 |              4           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  400 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  300 |                 ,,·''         ',           2    |
        //      |            ,,·''                ,               |
        //  200 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  100 B''                      1           ',           |
        //      |                                      ,          |
        //    0 X---------------------------------------C---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 300, 1000), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-B-X-C is at ~(425, 139) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(424.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(138.60).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(850, 283) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(283.33).Within(0.01));
        // Centroid of #3 in W-E-A-D is at ~(698, 763) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(697.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(763.22).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(225, 575) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(225.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(575.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(-200, 0), // #4
        };

        //  500 Z--------------E----------------------------------W
        //      |               '                                 |
        //  400 |                ',                               |
        //      |                  ,                              |
        //  300 |                   ·                             |
        //      |                    '                            |
        //  200 |                     ',           3              |
        //      |                       ,                         |
        //  100 |                        ·                      ,,D
        //      |                         '                ,,·''  |
        //    0 |              4         ● ',         ,,·''       |
        //      |                            ,   ,,·''            |
        // -100 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        // -200 |                 ,,·''         ',           2    |
        //      |            ,,·''                ,               |
        // -300 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        // -400 B''                      1           ',           |
        //      |                                      ,          |
        // -500 X---------------------------------------C---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, -100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -500, -400), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-B-X-C is at ~(-75, -361) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-75.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-361.40).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(350, -217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-216.67).Within(0.01));
        // Centroid of #3 in W-E-A-D is at ~(198, 263) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(197.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(263.22).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(-275, 75) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-275.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(75.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(100, 300), // #4
        };

        //  800 Z--------------E----------------------------------W
        //      |               '                                 |
        //  700 |                ',                               |
        //      |                  ,                              |
        //  600 |                   ·                             |
        //      |                    '                            |
        //  500 |                     ',           3              |
        //      |                       ,                         |
        //  400 |                        ·                      ,,D
        //      |                         '                ,,·''  |
        //  300 |              4           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  200 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  100 |                 ,,·''         ',           2    |
        //      |            ,,·''                ,               |
        //    0 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        // -100 B''                      1           ',           |
        //      |                                      ,          |
        // -200 X---------------------------------------C---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, -100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 100, 800), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-B-X-C is at ~(225, -61) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(224.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-61.40).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(650, 83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(83.33).Within(0.01));
        // Centroid of #3 in W-E-A-D is at ~(498, 563) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(497.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(563.22).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(25, 375) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(25.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(375.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(900, 900), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1200 Z--------------E----------------------------------W
        //      |               '                                 |
        // 1100 |                ',                               |
        //      |                  ,                              |
        // 1000 |                   ·                             |
        //      |                    '                            |
        //  900 |                     ',           3              |
        //      |                       ,                         |
        //  800 |                        ·                      ,,D
        //      |                         '                ,,·''  |
        //  700 |              4           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  600 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  500 |                 ,,·''         ',           2    |
        //      |            ,,·''                ,               |
        //  400 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  300 B''                      1           ',           |
        //      |                                      ,          |
        //  200 X---------------------------------------C---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 300), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 1200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-B-X-C is at ~(625, 339) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(624.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(338.60).Within(0.01));
        // Centroid of #2 in D-A-C-Y is at ~(1050, 483) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(483.33).Within(0.01));
        // Centroid of #3 in W-E-A-D is at ~(898, 963) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(897.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(963.22).Within(0.01));
        // Centroid of #4 in E-Z-B-A is at ~(425, 775) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(425.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(775.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1000 Z--------------------------------------------B----X
        //      |                                           '     |
        //  900 |                                         ,'      |
        //      |                                        ,        |
        //  800 |                                       ·         |
        //      |                                      '          |
        //  700 E,,                      4           ,'           |
        //      |  ''·,,                            ,             |
        //  600 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  500 |                 ''·,,         ,'           1    |
        //      |                      ''·,,   ,                  |
        //  400 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  300 |              3           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  200 |                        ·                      ''C
        //      |                       '                         |
        //  100 |                     ,'           2              |
        //      |                    ,                            |
        //    0 W-------------------D-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 700), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 900, 1000), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 0, 700), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-B-A-C is at ~(861, 575) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(861.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(575.44).Within(0.01));
        // Centroid of #2 in C-A-D-Y is at ~(717, 150) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(716.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #3 in A-E-W-D is at ~(237, 302) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(236.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(302.30).Within(0.01));
        // Centroid of #4 in B-Z-E-A is at ~(425, 775) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(425.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(775.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, -400), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(0, 200), // #4
        };

        //  500 Z--------------------------------------------B----X
        //      |                                           '     |
        //  400 |                                         ,'      |
        //      |                                        ,        |
        //  300 |                                       ·         |
        //      |                                      '          |
        //  200 E,,                      4           ,'           |
        //      |  ''·,,                            ,             |
        //  100 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //    0 |                 ''·,,  ●      ,'           1    |
        //      |                      ''·,,   ,                  |
        // -100 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        // -200 |              3           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        // -300 |                        ·                      ''C
        //      |                       '                         |
        // -400 |                     ,'           2              |
        //      |                    ,                            |
        // -500 W-------------------D-----------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, -100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -500, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-B-A-C is at ~(361, 75) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(361.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(75.44).Within(0.01));
        // Centroid of #2 in C-A-D-Y is at ~(217, -350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #3 in A-E-W-D is at ~(-263, -198) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-263.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-197.70).Within(0.01));
        // Centroid of #4 in B-Z-E-A is at ~(-75, 275) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-75.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(275.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, -100), // #2
            new VoronoiSite(100, 100), // #3
            new VoronoiSite(300, 500), // #4
        };

        //  800 Z--------------------------------------------B----X
        //      |                                           '     |
        //  700 |                                         ,'      |
        //      |                                        ,        |
        //  600 |                                       ·         |
        //      |                                      '          |
        //  500 E,,                      4           ,'           |
        //      |  ''·,,                            ,             |
        //  400 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  300 |                 ''·,,         ,'           1    |
        //      |                      ''·,,   ,                  |
        //  200 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  100 |              3           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //    0 |         ●              ·                      ''C
        //      |                       '                         |
        // -100 |                     ,'           2              |
        //      |                    ,                            |
        // -200 W-------------------D-----------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 800), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-B-A-C is at ~(661, 375) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(661.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(375.44).Within(0.01));
        // Centroid of #2 in C-A-D-Y is at ~(517, -50) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(516.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #3 in A-E-W-D is at ~(37, 102) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(36.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(102.30).Within(0.01));
        // Centroid of #4 in B-Z-E-A is at ~(225, 575) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(225.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(575.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(700, 900), // #4
        };

        // 1200 Z--------------------------------------------B----X
        //      |                                           '     |
        // 1100 |                                         ,'      |
        //      |                                        ,        |
        // 1000 |                                       ·         |
        //      |                                      '          |
        //  900 E,,                      4           ,'           |
        //      |  ''·,,                            ,             |
        //  800 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  700 |                 ''·,,         ,'           1    |
        //      |                      ''·,,   ,                  |
        //  600 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  500 |              3           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  400 |                        ·                      ''C
        //      |                       '                         |
        //  300 |                     ,'           2              |
        //      |                    ,                            |
        //  200 W-------------------D-----------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1100, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 900), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1100, 1200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 200, 900), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in X-B-A-C is at ~(1061, 775) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1061.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(775.44).Within(0.01));
        // Centroid of #2 in C-A-D-Y is at ~(917, 350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(916.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in A-E-W-D is at ~(437, 502) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(436.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(502.30).Within(0.01));
        // Centroid of #4 in B-Z-E-A is at ~(625, 975) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(625.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(975.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1000 W----------------------------------E--------------Z
        //      |                                 '               |
        //  900 |                               ,'                |
        //      |                              ,                  |
        //  800 |                             ·                   |
        //      |                            '                    |
        //  700 |              3           ,'                     |
        //      |                         ,                       |
        //  600 D,,                      ·                        |
        //      |  ''·,,                '                         |
        //  500 |       ''·,,         ,'           4              |
        //      |            ''·,,   ,                            |
        //  400 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  300 |    2           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  200 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  100 |           ,'           1                      ''B
        //      |          ,                                      |
        //    0 Y---------C---------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 700, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 700, 1000), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-A-C-X is at ~(575, 139) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(575.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(138.60).Within(0.01));
        // Centroid of #2 in A-D-Y-C is at ~(150, 283) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(283.33).Within(0.01));
        // Centroid of #3 in E-W-D-A is at ~(302, 763) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(302.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(763.22).Within(0.01));
        // Centroid of #4 in Z-E-A-B is at ~(775, 575) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(775.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(575.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(-400, -200), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(200, 0), // #4
        };

        //  500 W----------------------------------E--------------Z
        //      |                                 '               |
        //  400 |                               ,'                |
        //      |                              ,                  |
        //  300 |                             ·                   |
        //      |                            '                    |
        //  200 |              3           ,'                     |
        //      |                         ,                       |
        //  100 D,,                      ·                        |
        //      |  ''·,,                '                         |
        //    0 |       ''·,,         ,' ●         4              |
        //      |            ''·,,   ,                            |
        // -100 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        // -200 |    2           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        // -300 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        // -400 |           ,'           1                      ''B
        //      |          ,                                      |
        // -500 Y---------C---------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, -100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, -400), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-A-C-X is at ~(75, -361) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(75.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-361.40).Within(0.01));
        // Centroid of #2 in A-D-Y-C is at ~(-350, -217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-216.67).Within(0.01));
        // Centroid of #3 in E-W-D-A is at ~(-198, 263) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-197.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(263.22).Within(0.01));
        // Centroid of #4 in Z-E-A-B is at ~(275, 75) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(275.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(75.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(500, 300), // #4
        };

        //  800 W----------------------------------E--------------Z
        //      |                                 '               |
        //  700 |                               ,'                |
        //      |                              ,                  |
        //  600 |                             ·                   |
        //      |                            '                    |
        //  500 |              3           ,'                     |
        //      |                         ,                       |
        //  400 D,,                      ·                        |
        //      |  ''·,,                '                         |
        //  300 |       ''·,,         ,'           4              |
        //      |            ''·,,   ,                            |
        //  200 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  100 |    2           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //    0 |         ●    ·                      ''·,,       |
        //      |             '                            ''·,,  |
        // -100 |           ,'           1                      ''B
        //      |          ,                                      |
        // -200 Y---------C---------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, -100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 800), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-A-C-X is at ~(375, -61) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(375.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-61.40).Within(0.01));
        // Centroid of #2 in A-D-Y-C is at ~(-50, 83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(83.33).Within(0.01));
        // Centroid of #3 in E-W-D-A is at ~(102, 563) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(102.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(563.22).Within(0.01));
        // Centroid of #4 in Z-E-A-B is at ~(575, 375) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(575.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(375.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(900, 700), // #4
        };

        // 1200 W----------------------------------E--------------Z
        //      |                                 '               |
        // 1100 |                               ,'                |
        //      |                              ,                  |
        // 1000 |                             ·                   |
        //      |                            '                    |
        //  900 |              3           ,'                     |
        //      |                         ,                       |
        //  800 D,,                      ·                        |
        //      |  ''·,,                '                         |
        //  700 |       ''·,,         ,'           4              |
        //      |            ''·,,   ,                            |
        //  600 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  500 |    2           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  400 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  300 |           ,'           1                      ''B
        //      |          ,                                      |
        //  200 Y---------C---------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 900, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 300), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 900, 1200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in B-A-C-X is at ~(775, 339) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(775.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(338.60).Within(0.01));
        // Centroid of #2 in A-D-Y-C is at ~(350, 483) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(483.33).Within(0.01));
        // Centroid of #3 in E-W-D-A is at ~(502, 963) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(502.30).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(963.22).Within(0.01));
        // Centroid of #4 in Z-E-A-B is at ~(975, 775) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(975.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(775.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(500, 300), // #4
        };

        // 1000 Y-----------------------------D-------------------W
        //      |                            '                    |
        //  900 |              2           ,'                     |
        //      |                         ,                       |
        //  800 C,,                      ·                        |
        //      |  ''·,,                '                         |
        //  700 |       ''·,,         ,'           3              |
        //      |            ''·,,   ,                            |
        //  600 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  500 |    1           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  400 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  300 |           ,'           4                      ''E
        //      |          ,                                      |
        //  200 |         ·                                       |
        //      |        '                                        |
        //  100 |      ,'                                         |
        //      |     ,                                           |
        //    0 X----B--------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 100, 0), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1000, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-C-X-B is at ~(139, 425) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(138.60).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(424.56).Within(0.01));
        // Centroid of #2 in D-Y-C-A is at ~(283, 850) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(283.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #3 in W-D-A-E is at ~(763, 698) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(763.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(697.70).Within(0.01));
        // Centroid of #4 in E-A-B-Z is at ~(575, 225) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(575.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(225.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, 400), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(0, -200), // #4
        };

        //  500 Y-----------------------------D-------------------W
        //      |                            '                    |
        //  400 |              2           ,'                     |
        //      |                         ,                       |
        //  300 C,,                      ·                        |
        //      |  ''·,,                '                         |
        //  200 |       ''·,,         ,'           3              |
        //      |            ''·,,   ,                            |
        //  100 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //    0 |    1           ,'      ●  ''·,,                 |
        //      |               ,                ''·,,            |
        // -100 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        // -200 |           ,'           4                      ''E
        //      |          ,                                      |
        // -300 |         ·                                       |
        //      |        '                                        |
        // -400 |      ,'                                         |
        //      |     ,                                           |
        // -500 X----B--------------------------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -400, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -400, -500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-C-X-B is at ~(-361, -75) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-361.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-75.44).Within(0.01));
        // Centroid of #2 in D-Y-C-A is at ~(-217, 350) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in W-D-A-E is at ~(263, 198) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(263.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(197.70).Within(0.01));
        // Centroid of #4 in E-A-B-Z is at ~(75, -275) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(75.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-275.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(300, 100), // #4
        };

        //  800 Y-----------------------------D-------------------W
        //      |                            '                    |
        //  700 |              2           ,'                     |
        //      |                         ,                       |
        //  600 C,,                      ·                        |
        //      |  ''·,,                '                         |
        //  500 |       ''·,,         ,'           3              |
        //      |            ''·,,   ,                            |
        //  400 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  300 |    1           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  200 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  100 |           ,'           4                      ''E
        //      |          ,                                      |
        //    0 |         ·                                       |
        //      |        '                                        |
        // -100 |      ,'                                         |
        //      |     ,                                           |
        // -200 X----B--------------------------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -100, -200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 800, 100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-C-X-B is at ~(-61, 225) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-61.40).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(224.56).Within(0.01));
        // Centroid of #2 in D-Y-C-A is at ~(83, 650) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #3 in W-D-A-E is at ~(563, 498) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(563.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(497.70).Within(0.01));
        // Centroid of #4 in E-A-B-Z is at ~(375, 25) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(375.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(25.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 1100), // #2
            new VoronoiSite(900, 900), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1200 Y-----------------------------D-------------------W
        //      |                            '                    |
        // 1100 |              2           ,'                     |
        //      |                         ,                       |
        // 1000 C,,                      ·                        |
        //      |  ''·,,                '                         |
        //  900 |       ''·,,         ,'           3              |
        //      |            ''·,,   ,                            |
        //  800 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  700 |    1           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  600 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  500 |           ,'           4                      ''E
        //      |          ,                                      |
        //  400 |         ·                                       |
        //      |        '                                        |
        //  300 |      ,'                                         |
        //      |     ,                                           |
        //  200 X----B--------------------------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1200, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in A-C-X-B is at ~(339, 625) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(338.60).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(624.56).Within(0.01));
        // Centroid of #2 in D-Y-C-A is at ~(483, 1050) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(483.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #3 in W-D-A-E is at ~(963, 898) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(963.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(897.70).Within(0.01));
        // Centroid of #4 in E-A-B-Z is at ~(775, 425) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(775.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(425.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 X---------------------------------------C---------Y
        //      |                                      '          |
        //  900 B,,                      1           ,'           |
        //      |  ''·,,                            ,             |
        //  800 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  700 |                 ''·,,         ,'           2    |
        //      |                      ''·,,   ,                  |
        //  600 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  500 |              4           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  400 |                        ·                      ''D
        //      |                       '                         |
        //  300 |                     ,'           3              |
        //      |                    ,                            |
        //  200 |                   ·                             |
        //      |                  '                              |
        //  100 |                ,'                               |
        //      |               ,                                 |
        //    0 Z--------------E----------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 900), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-X-B-A is at ~(425, 861) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(424.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(861.40).Within(0.01));
        // Centroid of #2 in Y-C-A-D is at ~(850, 717) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(716.67).Within(0.01));
        // Centroid of #3 in D-A-E-W is at ~(698, 237) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(697.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(236.78).Within(0.01));
        // Centroid of #4 in A-B-Z-E is at ~(225, 425) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(225.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(425.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(-200, 0), // #4
        };

        //  500 X---------------------------------------C---------Y
        //      |                                      '          |
        //  400 B,,                      1           ,'           |
        //      |  ''·,,                            ,             |
        //  300 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  200 |                 ''·,,         ,'           2    |
        //      |                      ''·,,   ,                  |
        //  100 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //    0 |              4         ● ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        // -100 |                        ·                      ''D
        //      |                       '                         |
        // -200 |                     ,'           3              |
        //      |                    ,                            |
        // -300 |                   ·                             |
        //      |                  '                              |
        // -400 |                ,'                               |
        //      |               ,                                 |
        // -500 Z--------------E----------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -500, 400), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, -500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-X-B-A is at ~(-75, 361) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-75.44).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(361.40).Within(0.01));
        // Centroid of #2 in Y-C-A-D is at ~(350, 217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
        // Centroid of #3 in D-A-E-W is at ~(198, -263) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(197.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-263.22).Within(0.01));
        // Centroid of #4 in A-B-Z-E is at ~(-275, -75) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-275.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-75.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(100, 300), // #4
        };

        //  800 X---------------------------------------C---------Y
        //      |                                      '          |
        //  700 B,,                      1           ,'           |
        //      |  ''·,,                            ,             |
        //  600 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  500 |                 ''·,,         ,'           2    |
        //      |                      ''·,,   ,                  |
        //  400 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  300 |              4           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  200 |                        ·                      ''D
        //      |                       '                         |
        //  100 |                     ,'           3              |
        //      |                    ,                            |
        //    0 |         ●         ·                             |
        //      |                  '                              |
        // -100 |                ,'                               |
        //      |               ,                                 |
        // -200 Z--------------E----------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 700), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 100, -200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-X-B-A is at ~(225, 661) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(224.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(661.40).Within(0.01));
        // Centroid of #2 in Y-C-A-D is at ~(650, 517) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(516.67).Within(0.01));
        // Centroid of #3 in D-A-E-W is at ~(498, 37) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(497.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(36.78).Within(0.01));
        // Centroid of #4 in A-B-Z-E is at ~(25, 225) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(25.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(225.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(1100, 900), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1200 X---------------------------------------C---------Y
        //      |                                      '          |
        // 1100 B,,                      1           ,'           |
        //      |  ''·,,                            ,             |
        // 1000 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  900 |                 ''·,,         ,'           2    |
        //      |                      ''·,,   ,                  |
        //  800 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  700 |              4           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  600 |                        ·                      ''D
        //      |                       '                         |
        //  500 |                     ,'           3              |
        //      |                    ,                            |
        //  400 |                   ·                             |
        //      |                  '                              |
        //  300 |                ,'                               |
        //      |               ,                                 |
        //  200 Z--------------E----------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 1100), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z

        // Assert

        // Centroid of #1 in C-X-B-A is at ~(625, 1061) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(624.56).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1061.40).Within(0.01));
        // Centroid of #2 in Y-C-A-D is at ~(1050, 917) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(916.67).Within(0.01));
        // Centroid of #3 in D-A-E-W is at ~(898, 437) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(897.70).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(436.78).Within(0.01));
        // Centroid of #4 in A-B-Z-E is at ~(425, 625) (using quadrilateral formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(425.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(625.00).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedTallCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1000 W---------C#---------------------------#D---------Z
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'B'        5              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 E------------------------A------------------------F
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              3         |         4              |
        //      |                        |                        |
        //    0 X------------------------G------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 400), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 800, 1000), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1000, 400), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 1000, 1000), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-C-B is at ~(500, 900) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #2 in B-C-W-E-A is at ~(224, 665) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(223.53).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(664.71).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(250, 200) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(750, 200) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #5 in Z-D-B-A-F is at ~(776, 665) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(776.47).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(664.71).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedTallCross_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -400), // #3
            new VoronoiSite(200, -400), // #4
            new VoronoiSite(200, 200), // #5
        };

        //  500 W---------C#---------------------------#D---------Z
        //      |           ',                       ,'           |
        //  400 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  300 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  200 |              2        'B'        5              |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 E------------------------A------------------------F
        //      |                        |                        |
        // -200 |                        |                        |
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |              3         |         4              |
        //      |                        |                        |
        // -500 X------------------------G------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, -100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, -100), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, -500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, -100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 200), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, -100), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-C-B is at ~(0, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in B-C-W-E-A is at ~(-276, 165) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-276.47).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(164.71).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(-250, -300) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(250, -300) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #5 in Z-D-B-A-F is at ~(276, 165) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(276.47).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(164.71).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedTallCross_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(500, -100), // #4
            new VoronoiSite(500, 500), // #5
        };

        //  800 W---------C#---------------------------#D---------Z
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'B'        5              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 E------------------------A------------------------F
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |              3         |         4              |
        //      |                        |                        |
        // -200 X------------------------G------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 300, -200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 600, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 800, 200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-C-B is at ~(300, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in B-C-W-E-A is at ~(24, 465) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(23.53).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(464.71).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(50, 0) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(550, 0) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #5 in Z-D-B-A-F is at ~(576, 465) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(576.47).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(464.71).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedTallCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(900, 300), // #4
            new VoronoiSite(900, 900), // #5
        };

        // 1200 W---------C#---------------------------#D---------Z
        //      |           ',                       ,'           |
        // 1100 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        // 1000 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  900 |              2        'B'        5              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 E------------------------A------------------------F
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3         |         4              |
        //      |                        |                        |
        //  200 X------------------------G------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 600), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 700, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 900), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1000, 1200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1200, 600), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 1200, 1200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in D-C-B is at ~(700, 1100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1100.00).Within(0.01));
        // Centroid of #2 in B-C-W-E-A is at ~(424, 865) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(423.53).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(864.71).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(450, 400) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(950, 400) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #5 in Z-D-B-A-F is at ~(976, 865) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(976.47).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(864.71).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(700, 300), // #5
        };

        // 1000 X-------------------E-----------------------------W
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                            ,C
        //      |                   |                          ,' |
        //  700 |    3              |              2        ,·'   |
        //      |                   |                     ,'      |
        //  600 |                   |                  ,·'        |
        //      |                   |                ,'           |
        //  500 G-------------------A--------------B#        1    |
        //      |                   |                ',           |
        //  400 |                   |                  '·,        |
        //      |                   |                     ',      |
        //  300 |    4              |              5        '·,   |
        //      |                   |                          ', |
        //  200 |                   |                            'D
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 Y-------------------F-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1000, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 400, 0), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 1000, 0), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-B-D is at ~(900, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in C-W-E-A-B is at ~(665, 776) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(664.71).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(776.47).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(200, 750) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(200, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(665, 224) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(664.71).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(223.53).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-400, 200), // #3
            new VoronoiSite(-400, -200), // #4
            new VoronoiSite(200, -200), // #5
        };

        //  500 X-------------------E-----------------------------W
        //      |                   |                             |
        //  400 |                   |                             |
        //      |                   |                             |
        //  300 |                   |                            ,C
        //      |                   |                          ,' |
        //  200 |    3              |              2        ,·'   |
        //      |                   |                     ,'      |
        //  100 |                   |                  ,·'        |
        //      |                   |                ,'           |
        //    0 G-------------------A--------------B#        1    |
        //      |                   |                ',           |
        // -100 |                   |                  '·,        |
        //      |                   |                     ',      |
        // -200 |    4              |              5        '·,   |
        //      |                   |                          ', |
        // -300 |                   |                            'D
        //      |                   |                             |
        // -400 |                   |                             |
        //      |                   |                             |
        // -500 Y-------------------F-----------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -100, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -100, -500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, -100, 0), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 200, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 500, -300), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -100, -500), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 500, -500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-B-D is at ~(400, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-W-E-A-B is at ~(165, 276) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(164.71).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(276.47).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(-300, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(-300, -250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(165, -276) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(164.71).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-276.47).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(-100, 500), // #3
            new VoronoiSite(-100, 100), // #4
            new VoronoiSite(500, 100), // #5
        };

        //  800 X-------------------E-----------------------------W
        //      |                   |                             |
        //  700 |                   |                             |
        //      |                   |                             |
        //  600 |                   |                            ,C
        //      |                   |                          ,' |
        //  500 |    3              |              2        ,·'   |
        //      |                   |                     ,'      |
        //  400 |                   |                  ,·'        |
        //      |                   |                ,'           |
        //  300 G-------------------A--------------B#        1    |
        //      |                   |                ',           |
        //  200 |                   |                  '·,        |
        //      |                   |                     ',      |
        //  100 |    4              |              5        '·,   |
        //      |                   |                          ', |
        //    0 |         ●         |                            'D
        //      |                   |                             |
        // -100 |                   |                             |
        //      |                   |                             |
        // -200 Y-------------------F-----------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -200, 300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 800, 0), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, -200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 800, -200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-B-D is at ~(700, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-W-E-A-B is at ~(465, 576) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(464.71).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(576.47).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(0, 550) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(0, 50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(465, 24) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(464.71).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(23.53).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(300, 900), // #3
            new VoronoiSite(300, 500), // #4
            new VoronoiSite(900, 500), // #5
        };

        // 1200 X-------------------E-----------------------------W
        //      |                   |                             |
        // 1100 |                   |                             |
        //      |                   |                             |
        // 1000 |                   |                            ,C
        //      |                   |                          ,' |
        //  900 |    3              |              2        ,·'   |
        //      |                   |                     ,'      |
        //  800 |                   |                  ,·'        |
        //      |                   |                ,'           |
        //  700 G-------------------A--------------B#        1    |
        //      |                   |                ',           |
        //  600 |                   |                  '·,        |
        //      |                   |                     ',      |
        //  500 |    4              |              5        '·,   |
        //      |                   |                          ', |
        //  400 |                   |                            'D
        //      |                   |                             |
        //  300 |                   |                             |
        //      |                   |                             |
        //  200 Y-------------------F-----------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 200, 700), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 900, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1200, 400), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 600, 200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 1200, 200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in C-B-D is at ~(1100, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in C-W-E-A-B is at ~(865, 976) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(864.71).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(976.47).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(400, 950) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(400, 450) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(865, 424) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(864.71).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(423.53).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 300), // #5
        };

        // 1000 Y------------------------G------------------------X
        //      |                        |                        |
        //  900 |              4         |         3              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 F------------------------A------------------------E
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 Z---------D#---------------------------#C---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 600), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 600), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 200, 0), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, 600), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(500, 100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in E-A-B-C-W is at ~(776, 335) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(776.47).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(335.29).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(750, 800) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(250, 800) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(224, 335) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(223.53).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(335.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(-200, 400), // #4
            new VoronoiSite(-200, -200), // #5
        };

        //  500 Y------------------------G------------------------X
        //      |                        |                        |
        //  400 |              4         |         3              |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 F------------------------A------------------------E
        //      |                        |                        |
        //    0 |                        |                        |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        // -300 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // -400 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -500 Z---------D#---------------------------#C---------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -500, 100), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, -200), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -300, -500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -500, 100), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -500, -500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(0, -400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-400.00).Within(0.01));
        // Centroid of #2 in E-A-B-C-W is at ~(276, -165) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(276.47).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-164.71).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(250, 300) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(-250, 300) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(-276, -165) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-276.47).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-164.71).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(100, 700), // #4
            new VoronoiSite(100, 100), // #5
        };

        //  800 Y------------------------G------------------------X
        //      |                        |                        |
        //  700 |              4         |         3              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 F------------------------A------------------------E
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //    0 |         ●        ,·'       '·,                  |
        //      |                ,'             ',                |
        // -100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -200 Z---------D#---------------------------#C---------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 400), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 400), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 100), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 0, -200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, 400), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -200, -200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(300, -100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
        // Centroid of #2 in E-A-B-C-W is at ~(576, 135) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(576.47).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(135.29).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(550, 600) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(50, 600) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(24, 135) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(23.53).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(135.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 1100), // #3
            new VoronoiSite(500, 1100), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1200 Y------------------------G------------------------X
        //      |                        |                        |
        // 1100 |              4         |         3              |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 F------------------------A------------------------E
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 Z---------D#---------------------------#C---------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 800), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 800), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 400, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 800), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(700, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in E-A-B-C-W is at ~(976, 535) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(976.47).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(535.29).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(950, 1000) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(450, 1000) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #5 in B-A-F-Z-D is at ~(424, 535) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(423.53).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(535.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(300, 700), // #5
        };

        // 1000 Z-----------------------------F-------------------Y
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 D,                            |                   |
        //      | ',                          |                   |
        //  700 |   '·,        5              |              4    |
        //      |      ',                     |                   |
        //  600 |        '·,                  |                   |
        //      |           ',                |                   |
        //  500 |    1        #B--------------A-------------------G
        //      |           ,'                |                   |
        //  400 |        ,·'                  |                   |
        //      |      ,'                     |                   |
        //  300 |   ,·'        2              |              3    |
        //      | ,'                          |                   |
        //  200 C'                            |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 W-----------------------------E-------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 1000), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 0, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 600, 1000), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(100, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-B-C-W-E is at ~(335, 224) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(335.29).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(223.53).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(800, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(800, 750) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #5 in F-Z-D-B-A is at ~(335, 776) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(335.29).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(776.47).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(400, -200), // #3
            new VoronoiSite(400, 200), // #4
            new VoronoiSite(-200, 200), // #5
        };

        //  500 Z-----------------------------F-------------------Y
        //      |                             |                   |
        //  400 |                             |                   |
        //      |                             |                   |
        //  300 D,                            |                   |
        //      | ',                          |                   |
        //  200 |   '·,        5              |              4    |
        //      |      ',                     |                   |
        //  100 |        '·,                  |                   |
        //      |           ',                |                   |
        //    0 |    1        #B--------------A-------------------G
        //      |           ,'                |                   |
        // -100 |        ,·'                  |                   |
        //      |      ,'                     |                   |
        // -200 |   ,·'        2              |              3    |
        //      | ,'                          |                   |
        // -300 C'                            |                   |
        //      |                             |                   |
        // -400 |                             |                   |
        //      |                             |                   |
        // -500 W-----------------------------E-------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 100, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 0), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -200, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -500, 300), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 100, 500), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(-400, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-B-C-W-E is at ~(-165, -276) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-164.71).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-276.47).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(300, -250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(300, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #5 in F-Z-D-B-A is at ~(-165, 276) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-164.71).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(276.47).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(700, 100), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(100, 500), // #5
        };

        //  800 Z-----------------------------F-------------------Y
        //      |                             |                   |
        //  700 |                             |                   |
        //      |                             |                   |
        //  600 D,                            |                   |
        //      | ',                          |                   |
        //  500 |   '·,        5              |              4    |
        //      |      ',                     |                   |
        //  400 |        '·,                  |                   |
        //      |           ',                |                   |
        //  300 |    1        #B--------------A-------------------G
        //      |           ,'                |                   |
        //  200 |        ,·'                  |                   |
        //      |      ,'                     |                   |
        //  100 |   ,·'        2              |              3    |
        //      | ,'                          |                   |
        //    0 C'        ●                   |                   |
        //      |                             |                   |
        // -100 |                             |                   |
        //      |                             |                   |
        // -200 W-----------------------------E-------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 800), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 100, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -200, 600), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 400, 800), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(-100, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-B-C-W-E is at ~(135, 24) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(135.29).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(23.53).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(600, 50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(600, 550) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #5 in F-Z-D-B-A is at ~(135, 576) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(135.29).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(576.47).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(1100, 500), // #3
            new VoronoiSite(1100, 900), // #4
            new VoronoiSite(500, 900), // #5
        };

        // 1200 Z-----------------------------F-------------------Y
        //      |                             |                   |
        // 1100 |                             |                   |
        //      |                             |                   |
        // 1000 D,                            |                   |
        //      | ',                          |                   |
        //  900 |   '·,        5              |              4    |
        //      |      ',                     |                   |
        //  800 |        '·,                  |                   |
        //      |           ',                |                   |
        //  700 |    1        #B--------------A-------------------G
        //      |           ,'                |                   |
        //  600 |        ,·'                  |                   |
        //      |      ,'                     |                   |
        //  500 |   ,·'        2              |              3    |
        //      | ,'                          |                   |
        //  400 C'                            |                   |
        //      |                             |                   |
        //  300 |                             |                   |
        //      |                             |                   |
        //  200 W-----------------------------E-------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has W"); // #2 has W
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 1200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(5), "Expected: site #5 point count 5"); // #5
        Assume.That(HasPoint(sites[4].Points, 800, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 200, 1000), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 800, 1200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has Z"); // #5 has Z

        // Assert

        // Centroid of #1 in B-D-C is at ~(300, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-B-C-W-E is at ~(535, 424) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(535.29).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(423.53).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(1000, 450) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(1000, 950) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #5 in F-Z-D-B-A is at ~(535, 976) (using generic closed polygon formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(535.29).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(976.47).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedStubbyCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 500), // #5
        };

        // 1000 C#-----------------------------------------------#D
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'B'        5              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 E------------------------A------------------------F
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              3         |         4              |
        //      |                        |                        |
        //    0 X------------------------G------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 300), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1000, 1000), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1000, 300), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in D-C-B is at ~(500, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in B-C-E-A is at ~(204, 548) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(203.70).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(548.15).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(250, 150) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(750, 150) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #5 in D-B-A-F is at ~(796, 548) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(796.30).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(548.15).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-200, -400), // #3
            new VoronoiSite(200, -400), // #4
            new VoronoiSite(200, 0), // #5
        };

        //  500 C#-----------------------------------------------#D
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 |              2        'B'        5              |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 E------------------------A------------------------F
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |              3         |         4              |
        //      |                        |                        |
        // -500 X------------------------G------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, -200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, -500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, -200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, -200), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in D-C-B is at ~(0, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in B-C-E-A is at ~(-296, 48) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-296.30).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(48.15).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(-250, -350) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(250, -350) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #5 in D-B-A-F is at ~(296, 48) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(296.30).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(48.15).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(500, -100), // #4
            new VoronoiSite(500, 300), // #5
        };

        //  800 C#-----------------------------------------------#D
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  300 |              2        'B'        5              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 E------------------------A------------------------F
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |              3         |         4              |
        //      |                        |                        |
        // -200 X------------------------G------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 100), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 300, -200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 800, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 800, 100), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in D-C-B is at ~(300, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in B-C-E-A is at ~(4, 348) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(3.70).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(348.15).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(50, -50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(550, -50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #5 in D-B-A-F is at ~(596, 348) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(596.30).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(348.15).Within(0.01));
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(900, 300), // #4
            new VoronoiSite(900, 700), // #5
        };

        // 1200 C#-----------------------------------------------#D
        //      | ',                                           ,' |
        // 1100 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        // 1000 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'B'        5              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 E------------------------A------------------------F
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3         |         4              |
        //      |                        |                        |
        //  200 X------------------------G------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 700, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1200, 1200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 1200, 500), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in D-C-B is at ~(700, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in B-C-E-A is at ~(404, 748) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(403.70).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(748.15).Within(0.01));
        // Centroid of #3 in A-E-X-G is at ~(450, 350) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #4 in F-A-G-Y is at ~(950, 350) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #5 in D-B-A-F is at ~(996, 748) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(996.30).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(748.15).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(500, 300), // #5
        };

        // 1000 X--------------E---------------------------------#C
        //      |              |                               ,' |
        //  900 |              |                            ,·'   |
        //      |              |                          ,'      |
        //  800 |              |                       ,·'        |
        //      |              |                     ,'           |
        //  700 |    3         |         2        ,·'             |
        //      |              |                ,'                |
        //  600 |              |             ,·'                  |
        //      |              |           ,'                     |
        //  500 G--------------A---------B#        1              |
        //      |              |           ',                     |
        //  400 |              |             '·,                  |
        //      |              |                ',                |
        //  300 |    4         |         5        '·,             |
        //      |              |                     ',           |
        //  200 |              |                       '·,        |
        //      |              |                          ',      |
        //  100 |              |                            '·,   |
        //      |              |                               ', |
        //    0 Y--------------F---------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 1000), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1000, 0), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 300, 0), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in C-B-D is at ~(833, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in C-E-A-B is at ~(548, 796) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(548.15).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(796.30).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(150, 750) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(150, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(548, 204) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(548.15).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(203.70).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(-400, 200), // #3
            new VoronoiSite(-400, -200), // #4
            new VoronoiSite(0, -200), // #5
        };

        //  500 X--------------E---------------------------------#C
        //      |              |                               ,' |
        //  400 |              |                            ,·'   |
        //      |              |                          ,'      |
        //  300 |              |                       ,·'        |
        //      |              |                     ,'           |
        //  200 |    3         |         2        ,·'             |
        //      |              |                ,'                |
        //  100 |              |             ,·'                  |
        //      |              |           ,'                     |
        //    0 G--------------A---------B#        1              |
        //      |              |           ',                     |
        // -100 |              |             '·,                  |
        //      |              |                ',                |
        // -200 |    4         |         5        '·,             |
        //      |              |                     ',           |
        // -300 |              |                       '·,        |
        //      |              |                          ',      |
        // -400 |              |                            '·,   |
        //      |              |                               ', |
        // -500 Y--------------F---------------------------------#D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, -500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -500, -500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, -200, 0), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 500, -500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, -500), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in C-B-D is at ~(333, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-E-A-B is at ~(48, 296) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(48.15).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(296.30).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(-350, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(-350, -250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(48, -296) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(48.15).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-296.30).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-100, 500), // #3
            new VoronoiSite(-100, 100), // #4
            new VoronoiSite(300, 100), // #5
        };

        //  800 X--------------E---------------------------------#C
        //      |              |                               ,' |
        //  700 |              |                            ,·'   |
        //      |              |                          ,'      |
        //  600 |              |                       ,·'        |
        //      |              |                     ,'           |
        //  500 |    3         |         2        ,·'             |
        //      |              |                ,'                |
        //  400 |              |             ,·'                  |
        //      |              |           ,'                     |
        //  300 G--------------A---------B#        1              |
        //      |              |           ',                     |
        //  200 |              |             '·,                  |
        //      |              |                ',                |
        //  100 |    4         |         5        '·,             |
        //      |              |                     ',           |
        //    0 |         ●    |                       '·,        |
        //      |              |                          ',      |
        // -100 |              |                            '·,   |
        //      |              |                               ', |
        // -200 Y--------------F---------------------------------#D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, 800), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 100, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, -200, 300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 800, -200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 100, -200), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in C-B-D is at ~(633, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in C-E-A-B is at ~(348, 596) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(348.15).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(596.30).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(-50, 550) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(-50, 50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(348, 4) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(348.15).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(3.70).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 900), // #3
            new VoronoiSite(300, 500), // #4
            new VoronoiSite(700, 500), // #5
        };

        // 1200 X--------------E---------------------------------#C
        //      |              |                               ,' |
        // 1100 |              |                            ,·'   |
        //      |              |                          ,'      |
        // 1000 |              |                       ,·'        |
        //      |              |                     ,'           |
        //  900 |    3         |         2        ,·'             |
        //      |              |                ,'                |
        //  800 |              |             ,·'                  |
        //      |              |           ,'                     |
        //  700 G--------------A---------B#        1              |
        //      |              |           ',                     |
        //  600 |              |             '·,                  |
        //      |              |                ',                |
        //  500 |    4         |         5        '·,             |
        //      |              |                     ',           |
        //  400 |              |                       '·,        |
        //      |              |                          ',      |
        //  300 |              |                            '·,   |
        //      |              |                               ', |
        //  200 Y--------------F---------------------------------#D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 1200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 200, 700), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 1200, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, 200), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in C-B-D is at ~(1033, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in C-E-A-B is at ~(748, 996) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(748.15).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(996.30).Within(0.01));
        // Centroid of #3 in E-X-G-A is at ~(350, 950) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #4 in A-G-Y-F is at ~(350, 450) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(748, 404) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(748.15).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(403.70).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 500), // #5
        };

        // 1000 Y------------------------G------------------------X
        //      |                        |                        |
        //  900 |              4         |         3              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 F------------------------A------------------------E
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 D#-----------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 700), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 0, 1000), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, 700), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(500, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in E-A-B-C is at ~(796, 452) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(796.30).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(451.85).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(750, 850) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(250, 850) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(204, 452) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(203.70).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(451.85).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(-200, 400), // #4
            new VoronoiSite(-200, 0), // #5
        };

        //  500 Y------------------------G------------------------X
        //      |                        |                        |
        //  400 |              4         |         3              |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 F------------------------A------------------------E
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        // -100 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // -200 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        // -300 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -400 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -500 D#-----------------------------------------------#C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -500, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -500, 500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, 200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -500, -500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -500, 200), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(0, -333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #2 in E-A-B-C is at ~(296, -48) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(296.30).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-48.15).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(250, 350) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(-250, 350) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(-296, -48) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-296.30).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-48.15).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(100, 700), // #4
            new VoronoiSite(100, 300), // #5
        };

        //  800 Y------------------------G------------------------X
        //      |                        |                        |
        //  700 |              4         |         3              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 F------------------------A------------------------E
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        // -100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        // -200 D#-----------------------------------------------#C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, -200, 800), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -200, -200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, 500), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(300, -33) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #2 in E-A-B-C is at ~(596, 252) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(596.30).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(251.85).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(550, 650) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(50, 650) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(4, 252) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(3.70).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(251.85).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(900, 1100), // #3
            new VoronoiSite(500, 1100), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1200 Y------------------------G------------------------X
        //      |                        |                        |
        // 1100 |              4         |         3              |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 F------------------------A------------------------E
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  600 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 D#-----------------------------------------------#C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 900), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 900), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 900), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 200, 1200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 900), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 900), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(700, 367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #2 in E-A-B-C is at ~(996, 652) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(996.30).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(651.85).Within(0.01));
        // Centroid of #3 in X-G-A-E is at ~(950, 1050) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #4 in G-Y-F-A is at ~(450, 1050) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #5 in B-A-F-D is at ~(404, 652) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(403.70).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(651.85).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1000 D#---------------------------------F--------------Y
        //      | ',                               |              |
        //  900 |   '·,                            |              |
        //      |      ',                          |              |
        //  800 |        '·,                       |              |
        //      |           ',                     |              |
        //  700 |             '·,        5         |         4    |
        //      |                ',                |              |
        //  600 |                  '·,             |              |
        //      |                     ',           |              |
        //  500 |              1        #B---------A--------------G
        //      |                     ,'           |              |
        //  400 |                  ,·'             |              |
        //      |                ,'                |              |
        //  300 |             ,·'        2         |         3    |
        //      |           ,'                     |              |
        //  200 |        ,·'                       |              |
        //      |      ,'                          |              |
        //  100 |   ,·'                            |              |
        //      | ,'                               |              |
        //    0 C#---------------------------------E--------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 1000), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 700, 1000), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(167, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-B-C-E is at ~(452, 204) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(451.85).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(203.70).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(850, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(850, 750) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #5 in F-D-B-A is at ~(452, 796) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(451.85).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(796.30).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(400, -200), // #3
            new VoronoiSite(400, 200), // #4
            new VoronoiSite(0, 200), // #5
        };

        //  500 D#---------------------------------F--------------Y
        //      | ',                               |              |
        //  400 |   '·,                            |              |
        //      |      ',                          |              |
        //  300 |        '·,                       |              |
        //      |           ',                     |              |
        //  200 |             '·,        5         |         4    |
        //      |                ',                |              |
        //  100 |                  '·,             |              |
        //      |                     ',           |              |
        //    0 |              1        #B---------A--------------G
        //      |                     ,'           |              |
        // -100 |                  ,·'             |              |
        //      |                ,'                |              |
        // -200 |             ,·'        2         |         3    |
        //      |           ,'                     |              |
        // -300 |        ,·'                       |              |
        //      |      ,'                          |              |
        // -400 |   ,·'                            |              |
        //      | ,'                               |              |
        // -500 C#---------------------------------E--------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, -500), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 0), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 500), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(-333, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-B-C-E is at ~(-48, -296) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-48.15).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-296.30).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(350, -250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(350, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #5 in F-D-B-A is at ~(-48, 296) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-48.15).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(296.30).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, 100), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 500), // #5
        };

        //  800 D#---------------------------------F--------------Y
        //      | ',                               |              |
        //  700 |   '·,                            |              |
        //      |      ',                          |              |
        //  600 |        '·,                       |              |
        //      |           ',                     |              |
        //  500 |             '·,        5         |         4    |
        //      |                ',                |              |
        //  400 |                  '·,             |              |
        //      |                     ',           |              |
        //  300 |              1        #B---------A--------------G
        //      |                     ,'           |              |
        //  200 |                  ,·'             |              |
        //      |                ,'                |              |
        //  100 |             ,·'        2         |         3    |
        //      |           ,'                     |              |
        //    0 |        ,·'                       |              |
        //      |      ,'                          |              |
        // -100 |   ,·'                            |              |
        //      | ,'                               |              |
        // -200 C#---------------------------------E--------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 800), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, 800), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(-33, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-B-C-E is at ~(252, 4) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(251.85).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(3.70).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(650, 50) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(650, 550) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #5 in F-D-B-A is at ~(252, 596) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(251.85).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(596.30).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(1100, 500), // #3
            new VoronoiSite(1100, 900), // #4
            new VoronoiSite(700, 900), // #5
        };

        // 1200 D#---------------------------------F--------------Y
        //      | ',                               |              |
        // 1100 |   '·,                            |              |
        //      |      ',                          |              |
        // 1000 |        '·,                       |              |
        //      |           ',                     |              |
        //  900 |             '·,        5         |         4    |
        //      |                ',                |              |
        //  800 |                  '·,             |              |
        //      |                     ',           |              |
        //  700 |              1        #B---------A--------------G
        //      |                     ,'           |              |
        //  600 |                  ,·'             |              |
        //      |                ,'                |              |
        //  500 |             ,·'        2         |         3    |
        //      |           ,'                     |              |
        //  400 |        ,·'                       |              |
        //      |      ,'                          |              |
        //  300 |   ,·'                            |              |
        //      | ,'                               |              |
        //  200 C#---------------------------------E--------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has E"); // #2 has E
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has E"); // #3 has E
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has X"); // #3 has X
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 900, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 900, 1200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Y"); // #4 has Y
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 900, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 700, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 900, 1200), Is.True, "Expected: site #5 has F"); // #5 has F

        // Assert

        // Centroid of #1 in B-D-C is at ~(367, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in A-B-C-E is at ~(652, 404) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(651.85).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(403.70).Within(0.01));
        // Centroid of #3 in G-A-E-X is at ~(1050, 450) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #4 in Y-F-A-G is at ~(1050, 950) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #5 in F-D-B-A is at ~(652, 996) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(651.85).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(996.30).Within(0.01));
    }

    [Test]
    public void SixPointsInADoubleCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 100), // #5
            new VoronoiSite(700, 100), // #6
        };

        // 1000 W------------------------H------------------------Z
        //      |                        |                        |
        //  900 |              1         |         2              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 C------------------------B------------------------G
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3         |         4              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 D------------------------A------------------------F
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              5         |         6              |
        //      |                        |                        |
        //    0 X------------------------E------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 700), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1000, 300), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1000, 700), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 300), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 500, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 0), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 500, 300), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 500, 0), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 1000, 300), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 1000, 0), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in H-W-C-B is at ~(250, 850) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #2 in Z-H-B-G is at ~(750, 850) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(850.00).Within(0.01));
        // Centroid of #3 in B-C-D-A is at ~(250, 500) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in G-B-A-F is at ~(750, 500) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #5 in A-D-X-E is at ~(250, 150) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #6 in F-A-E-Y is at ~(750, 150) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(750.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
    }

    [Test]
    public void SixPointsInADoubleCross_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(-200, 0), // #3
            new VoronoiSite(200, 0), // #4
            new VoronoiSite(-200, -400), // #5
            new VoronoiSite(200, -400), // #6
        };

        //  500 W------------------------H------------------------Z
        //      |                        |                        |
        //  400 |              1         |         2              |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 C------------------------B------------------------G
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 |              3         |         4              |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 D------------------------A------------------------F
        //      |                        |                        |
        // -300 |                        |                        |
        //      |                        |                        |
        // -400 |              5         |         6              |
        //      |                        |                        |
        // -500 X------------------------E------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, -200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 200), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, -200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -500, -200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, -500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -500, -500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 0, -200), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 0, -500), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 500, -200), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 500, -500), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in H-W-C-B is at ~(-250, 350) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #2 in Z-H-B-G is at ~(250, 350) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #3 in B-C-D-A is at ~(-250, 0) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #4 in G-B-A-F is at ~(250, 0) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #5 in A-D-X-E is at ~(-250, -350) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-250.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #6 in F-A-E-Y is at ~(250, -350) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(250.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
    }

    [Test]
    public void SixPointsInADoubleCross_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 300), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(100, -100), // #5
            new VoronoiSite(500, -100), // #6
        };

        //  800 W------------------------H------------------------Z
        //      |                        |                        |
        //  700 |              1         |         2              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 C------------------------B------------------------G
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3         |         4              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 D------------------------A------------------------F
        //      |                        |                        |
        //    0 |         ●              |                        |
        //      |                        |                        |
        // -100 |              5         |         6              |
        //      |                        |                        |
        // -200 X------------------------E------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 800, 100), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 800, 500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 100), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -200, 100), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 300, -200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -200, -200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 300, 100), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 300, -200), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 800, 100), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 800, -200), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in H-W-C-B is at ~(50, 650) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #2 in Z-H-B-G is at ~(550, 650) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(650.00).Within(0.01));
        // Centroid of #3 in B-C-D-A is at ~(50, 300) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in G-B-A-F is at ~(550, 300) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #5 in A-D-X-E is at ~(50, -50) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #6 in F-A-E-Y is at ~(550, -50) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(550.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
    }

    [Test]
    public void SixPointsInADoubleCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(500, 300), // #5
            new VoronoiSite(900, 300), // #6
        };

        // 1200 W------------------------H------------------------Z
        //      |                        |                        |
        // 1100 |              1         |         2              |
        //      |                        |                        |
        // 1000 |                        |                        |
        //      |                        |                        |
        //  900 C------------------------B------------------------G
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              3         |         4              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 D------------------------A------------------------F
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              5         |         6              |
        //      |                        |                        |
        //  200 X------------------------E------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 900), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 900), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 900), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 1200, 500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 1200, 900), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 200, 500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 700, 200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 700, 500), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 700, 200), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 1200, 500), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 1200, 200), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in H-W-C-B is at ~(450, 1050) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #2 in Z-H-B-G is at ~(950, 1050) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1050.00).Within(0.01));
        // Centroid of #3 in B-C-D-A is at ~(450, 700) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #4 in G-B-A-F is at ~(950, 700) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #5 in A-D-X-E is at ~(450, 350) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(450.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #6 in F-A-E-Y is at ~(950, 350) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(950.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(100, 700), // #5
            new VoronoiSite(100, 300), // #6
        };

        // 1000 X--------------D-------------------C--------------W
        //      |              |                   |              |
        //  900 |              |                   |              |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 |    5         |         3         |         1    |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 E--------------A-------------------B--------------H
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |    6         |         4         |         2    |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 Y--------------F-------------------G--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 500), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 700, 0), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 300, 1000), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 0, 500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 1000), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 300, 500), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 0, 500), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 300, 0), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 0, 0), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in W-C-B-H is at ~(850, 750) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #2 in H-B-G-Z is at ~(850, 250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(850.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #3 in C-D-A-B is at ~(500, 750) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #4 in B-A-F-G is at ~(500, 250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #5 in D-X-E-A is at ~(150, 750) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(750.00).Within(0.01));
        // Centroid of #6 in A-E-Y-F is at ~(150, 250) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(0, 200), // #3
            new VoronoiSite(0, -200), // #4
            new VoronoiSite(-400, 200), // #5
            new VoronoiSite(-400, -200), // #6
        };

        //  500 X--------------D-------------------C--------------W
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 |    5         |         3         |         1    |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 E--------------A-------------------B--------------H
        //      |              |                   |              |
        // -100 |              |                   |              |
        //      |              |                   |              |
        // -200 |    6         |         4         |         2    |
        //      |              |                   |              |
        // -300 |              |                   |              |
        //      |              |                   |              |
        // -400 |              |                   |              |
        //      |              |                   |              |
        // -500 Y--------------F-------------------G--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 0), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, -200, -500), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 200, -500), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, -200, 0), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -200, 500), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -500, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -500, 500), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, -200, 0), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, -500, 0), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, -200, -500), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, -500, -500), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in W-C-B-H is at ~(350, 250) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #2 in H-B-G-Z is at ~(350, -250) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #3 in C-D-A-B is at ~(0, 250) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #4 in B-A-F-G is at ~(0, -250) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
        // Centroid of #5 in D-X-E-A is at ~(-350, 250) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(250.00).Within(0.01));
        // Centroid of #6 in A-E-Y-F is at ~(-350, -250) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(-250.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(300, 100), // #4
            new VoronoiSite(-100, 500), // #5
            new VoronoiSite(-100, 100), // #6
        };

        //  800 X--------------D-------------------C--------------W
        //      |              |                   |              |
        //  700 |              |                   |              |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |    5         |         3         |         1    |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 E--------------A-------------------B--------------H
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |    6         |         4         |         2    |
        //      |              |                   |              |
        //    0 |         ●    |                   |              |
        //      |              |                   |              |
        // -100 |              |                   |              |
        //      |              |                   |              |
        // -200 Y--------------F-------------------G--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 100, 300), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 300), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 100, -200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 500, -200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 300), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 100, 800), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, -200, 300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -200, 800), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 100, 300), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, -200, 300), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 100, -200), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, -200, -200), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in W-C-B-H is at ~(650, 550) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #2 in H-B-G-Z is at ~(650, 50) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(650.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #3 in C-D-A-B is at ~(300, 550) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #4 in B-A-F-G is at ~(300, 50) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #5 in D-X-E-A is at ~(-50, 550) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(550.00).Within(0.01));
        // Centroid of #6 in A-E-Y-F is at ~(-50, 50) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 900), // #5
            new VoronoiSite(300, 500), // #6
        };

        // 1200 X--------------D-------------------C--------------W
        //      |              |                   |              |
        // 1100 |              |                   |              |
        //      |              |                   |              |
        // 1000 |              |                   |              |
        //      |              |                   |              |
        //  900 |    5         |         3         |         1    |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 E--------------A-------------------B--------------H
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |    6         |         4         |         2    |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 Y--------------F-------------------G--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has H"); // #1 has H
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has W"); // #1 has W
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has H"); // #2 has H
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 900, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(4), "Expected: site #4 point count 4"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 900, 700), Is.True, "Expected: site #4 has B"); // #4 has B
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has F"); // #4 has F
        Assume.That(HasPoint(sites[3].Points, 900, 200), Is.True, "Expected: site #4 has G"); // #4 has G
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 700), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 500, 1200), Is.True, "Expected: site #5 has D"); // #5 has D
        Assume.That(HasPoint(sites[4].Points, 200, 700), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 1200), Is.True, "Expected: site #5 has X"); // #5 has X
        Assume.That(sites[5].Points, Is.Not.Null);
        Assume.That(sites[5].Points.Count(), Is.EqualTo(4), "Expected: site #6 point count 4"); // #6
        Assume.That(HasPoint(sites[5].Points, 500, 700), Is.True, "Expected: site #6 has A"); // #6 has A
        Assume.That(HasPoint(sites[5].Points, 200, 700), Is.True, "Expected: site #6 has E"); // #6 has E
        Assume.That(HasPoint(sites[5].Points, 500, 200), Is.True, "Expected: site #6 has F"); // #6 has F
        Assume.That(HasPoint(sites[5].Points, 200, 200), Is.True, "Expected: site #6 has Y"); // #6 has Y

        // Assert

        // Centroid of #1 in W-C-B-H is at ~(1050, 950) (using rectangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #2 in H-B-G-Z is at ~(1050, 450) (using rectangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1050.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #3 in C-D-A-B is at ~(700, 950) (using rectangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #4 in B-A-F-G is at ~(700, 450) (using rectangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
        // Centroid of #5 in D-X-E-A is at ~(350, 950) (using rectangle formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(950.00).Within(0.01));
        // Centroid of #6 in A-E-Y-F is at ~(350, 450) (using rectangle formula)
        Assert.That(sites[5].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[5].Centroid.Y, Is.EqualTo(450.00).Within(0.01));
    }

    [Test]
    public void FivePointsInARegularKite()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(800, 200), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 X------------------------A------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |         1             ,E,             4         |
        //      |                     ,'   ',                     |
        //  700 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  600 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  500 B---------F#             5             #H---------D
        //      |           ',                       ,'           |
        //  400 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  300 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  200 |         2             'G'             3         |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------C------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 800, 500), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, 800), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 800, 500), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 800), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 500), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 500, 200), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 800, 500), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in E-A-X-B-F is at ~(217, 783) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(217.07).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(782.93).Within(0.01));
        // Centroid of #2 in G-F-B-Y-C is at ~(217, 217) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(217.07).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(217.07).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(783, 217) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(782.93).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(217.07).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(783, 783) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(782.93).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(782.93).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(500, 500) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void FivePointsInARegularKite_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-300, -300), // #2
            new VoronoiSite(300, -300), // #3
            new VoronoiSite(300, 300), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 X------------------------A------------------------Z
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |         1             ,E,             4         |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //    0 B---------F#             5             #H---------D
        //      |           ',                       ,'           |
        // -100 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        // -200 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        // -300 |         2             'G'             3         |
        //      |                        |                        |
        // -400 |                        |                        |
        //      |                        |                        |
        // -500 Y------------------------C------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, -300, 0), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -300, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 0, -300), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, -300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, 300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -300, 0), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 0, -300), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 300, 0), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in E-A-X-B-F is at ~(-283, 283) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-282.93).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(282.93).Within(0.01));
        // Centroid of #2 in G-F-B-Y-C is at ~(-283, -283) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-282.93).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-282.93).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(283, -283) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(282.93).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-282.93).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(283, 283) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(282.93).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(282.93).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(0, 0) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void FivePointsInARegularKite_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(600, 0), // #3
            new VoronoiSite(600, 600), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 X------------------------A------------------------Z
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |         1             ,E,             4         |
        //      |                     ,'   ',                     |
        //  500 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  400 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  300 B---------F#             5             #H---------D
        //      |           ',                       ,'           |
        //  200 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 |         2             'G'             3         |
        //      |                        |                        |
        // -100 |                        |                        |
        //      |                        |                        |
        // -200 Y------------------------C------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 600), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 600, 300), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 300, 600), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 600, 300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 600), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 300), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 300, 0), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 600, 300), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in E-A-X-B-F is at ~(17, 583) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(17.07).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(582.93).Within(0.01));
        // Centroid of #2 in G-F-B-Y-C is at ~(17, 17) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(17.07).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(17.07).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(583, 17) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(582.93).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(17.07).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(583, 583) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(582.93).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(582.93).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(300, 300) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void FivePointsInARegularKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(1000, 400), // #3
            new VoronoiSite(1000, 1000), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 X------------------------A------------------------Z
        //      |                        |                        |
        // 1100 |                        |                        |
        //      |                        |                        |
        // 1000 |         1             ,E,             4         |
        //      |                     ,'   ',                     |
        //  900 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  800 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  700 B---------F#             5             #H---------D
        //      |           ',                       ,'           |
        //  600 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  500 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  400 |         2             'G'             3         |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 Y------------------------C------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 400, 700), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 700), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 700, 400), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 700, 400), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 1000, 700), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 700, 1000), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 1000, 700), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 1000), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 400, 700), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 700, 400), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 1000, 700), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in E-A-X-B-F is at ~(417, 983) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(417.07).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(982.93).Within(0.01));
        // Centroid of #2 in G-F-B-Y-C is at ~(417, 417) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(417.07).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(417.07).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(983, 417) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(982.93).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(417.07).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(983, 983) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(982.93).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(982.93).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(700, 700) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(1000, 0), // #3
            new VoronoiSite(1000, 1000), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 1-----------------------#A#-----------------------4
        //      |                     ,'   ',                     |
        //  900 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  800 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  700 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  600 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  500 B#                       5                       #D
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 2-----------------------#C#-----------------------3
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 500, 1000), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 500), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 1000), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 0, 500), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 500, 0), Is.True, "Expected: site #5 has C"); // #5 has C
        Assume.That(HasPoint(sites[4].Points, 1000, 500), Is.True, "Expected: site #5 has D"); // #5 has D

        // Assert

        // Centroid of #1 in X-B-A is at ~(167, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in Y-C-B is at ~(167, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in W-D-C is at ~(833, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #4 in Z-A-D is at ~(833, 833) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #5 in D-A-B-C is at ~(500, 500) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -500), // #2
            new VoronoiSite(500, -500), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(0, 0), // #5
        };

        //  500 1-----------------------#A#-----------------------4
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 B#                       5                       #D
        //      | ',                                           ,' |
        // -100 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        // -200 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        // -300 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        // -400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        // -500 2-----------------------#C#-----------------------3
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 500), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, 500), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, 500), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -500, 0), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 0, -500), Is.True, "Expected: site #5 has C"); // #5 has C
        Assume.That(HasPoint(sites[4].Points, 500, 0), Is.True, "Expected: site #5 has D"); // #5 has D

        // Assert

        // Centroid of #1 in X-B-A is at ~(-333, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in Y-C-B is at ~(-333, -333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #3 in W-D-C is at ~(333, -333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #4 in Z-A-D is at ~(333, 333) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #5 in D-A-B-C is at ~(0, 0) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(800, -200), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 1-----------------------#A#-----------------------4
        //      |                     ,'   ',                     |
        //  700 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  600 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  500 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  400 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  300 B#                       5                       #D
        //      | ',                                           ,' |
        //  200 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  100 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //    0 |         ●   '·,                 ,·'             |
        //      |                ',             ,'                |
        // -100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        // -200 2-----------------------#C#-----------------------3
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 300, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 300), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 800), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, -200, 300), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 300, -200), Is.True, "Expected: site #5 has C"); // #5 has C
        Assume.That(HasPoint(sites[4].Points, 800, 300), Is.True, "Expected: site #5 has D"); // #5 has D

        // Assert

        // Centroid of #1 in X-B-A is at ~(-33, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in Y-C-B is at ~(-33, -33) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #3 in W-D-C is at ~(633, -33) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #4 in Z-A-D is at ~(633, 633) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #5 in D-A-B-C is at ~(300, 300) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(1200, 200), // #3
            new VoronoiSite(1200, 1200), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1200 1-----------------------#A#-----------------------4
        //      |                     ,'   ',                     |
        // 1100 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        // 1000 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  900 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  800 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  700 B#                       5                       #D
        //      | ',                                           ,' |
        //  600 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  500 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  400 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  300 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  200 2-----------------------#C#-----------------------3
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 1200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1200, 700), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1200, 1200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 1200), Is.True, "Expected: site #5 has A"); // #5 has A
        Assume.That(HasPoint(sites[4].Points, 200, 700), Is.True, "Expected: site #5 has B"); // #5 has B
        Assume.That(HasPoint(sites[4].Points, 700, 200), Is.True, "Expected: site #5 has C"); // #5 has C
        Assume.That(HasPoint(sites[4].Points, 1200, 700), Is.True, "Expected: site #5 has D"); // #5 has D

        // Assert

        // Centroid of #1 in X-B-A is at ~(367, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in Y-C-B is at ~(367, 367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #3 in W-D-C is at ~(1033, 367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #4 in Z-A-D is at ~(1033, 1033) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #5 in D-A-B-C is at ~(700, 700) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void FivePointsInASkewedKite()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(600, 200), // #3
            new VoronoiSite(600, 600), // #4
            new VoronoiSite(500, 300), // #5
        };

        //  800 X-------------------A-------------------Z
        //      |                   |                   |
        //  700 |                   |                   |
        //      |                   |                   |
        //  600 |         1         |         4         |
        //      |                   |                   |
        //  500 |                  ,E,,,                |
        //      |                ,'     '''··,,,        |
        //  400 B--------------F'               ''#H----D
        //      |               ·               ,'      |
        //  300 |                ·       5   ,·'        |
        //      |                ·         ,'           |
        //  200 |         2       ·     ,·'   3         |
        //      |                  ·  ,'                |
        //  100 |                   G'                  |
        //      |                   |                   |
        //    0 Y-------------------C-------------------W
        //       0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 500), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 300, 400), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 400), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 400, 100), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 400, 100), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 700, 400), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 800), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 400, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 700, 400), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 800, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 300, 400), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 400, 100), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 700, 400), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in A-X-B-F-E is at ~(195, 605) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(194.62).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(605.38).Within(0.01));
        // Centroid of #2 in F-B-Y-C-G is at ~(183, 190) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(182.76).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(189.66).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(639, 161) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(639.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(160.87).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(610, 617) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(610.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(617.24).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(467, 333) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    [Test]
    public void FivePointsInASkewedKite_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(100, -100), // #5
        };

        //  400 X-------------------A-------------------Z
        //      |                   |                   |
        //  300 |                   |                   |
        //      |                   |                   |
        //  200 |         1         |         4         |
        //      |                   |                   |
        //  100 |                  ,E,,,                |
        //      |                ,'     '''··,,,        |
        //    0 B--------------F'   ●           ''#H----D
        //      |               ·               ,'      |
        // -100 |                ·       5   ,·'        |
        //      |                ·         ,'           |
        // -200 |         2       ·     ,·'   3         |
        //      |                  ·  ,'                |
        // -300 |                   G'                  |
        //      |                   |                   |
        // -400 Y-------------------C-------------------W
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -400, -400, 400, 400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 100), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, -100, 0), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -400, 400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 0, -300), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -400, -400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, -300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 400, -400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 400, 400), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, 100), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, -100, 0), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 0, -300), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 300, 0), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in A-X-B-F-E is at ~(-205, 205) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-205.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(205.38).Within(0.01));
        // Centroid of #2 in F-B-Y-C-G is at ~(-217, -210) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-217.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-210.34).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(239, -239) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(239.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-239.13).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(210, 217) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(210.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(217.24).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(67, -67) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
    }

    [Test]
    public void FivePointsInASkewedKite_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(400, 400), // #4
            new VoronoiSite(300, 100), // #5
        };

        //  600 X-------------------A-------------------Z
        //      |                   |                   |
        //  500 |                   |                   |
        //      |                   |                   |
        //  400 |         1         |         4         |
        //      |                   |                   |
        //  300 |                  ,E,,,                |
        //      |                ,'     '''··,,,        |
        //  200 B--------------F'               ''#H----D
        //      |               ·               ,'      |
        //  100 |                ·       5   ,·'        |
        //      |                ·         ,'           |
        //    0 |         2       ·     ,·'   3         |
        //      |                  ·  ,'                |
        // -100 |                   G'                  |
        //      |                   |                   |
        // -200 Y-------------------C-------------------W
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 300), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 100, 200), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 200, -100), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, -100), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 600, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 600, 600), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 100, 200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 200, -100), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 500, 200), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in A-X-B-F-E is at ~(-5, 405) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-5.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(405.38).Within(0.01));
        // Centroid of #2 in F-B-Y-C-G is at ~(-17, -10) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-17.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-10.34).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(439, -39) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(439.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-39.13).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(410, 417) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(410.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(417.24).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(267, 133) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    [Test]
    public void FivePointsInASkewedKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(800, 400), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(700, 500), // #5
        };

        // 1000 X-------------------A-------------------Z
        //      |                   |                   |
        //  900 |                   |                   |
        //      |                   |                   |
        //  800 |         1         |         4         |
        //      |                   |                   |
        //  700 |                  ,E,,,                |
        //      |                ,'     '''··,,,        |
        //  600 B--------------F'               ''#H----D
        //      |               ·               ,'      |
        //  500 |                ·       5   ,·'        |
        //      |                ·         ,'           |
        //  400 |         2       ·     ,·'   3         |
        //      |                  ·  ,'                |
        //  300 |                   G'                  |
        //      |                   |                   |
        //  200 Y-------------------C-------------------W
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 700), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 500, 600), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 600), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 600, 300), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 900, 600), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 1000), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1000, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 600, 700), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 900, 600), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1000, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 700), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 500, 600), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 600, 300), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 900, 600), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in A-X-B-F-E is at ~(395, 805) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(394.62).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(805.38).Within(0.01));
        // Centroid of #2 in F-B-Y-C-G is at ~(383, 390) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(382.76).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(389.66).Within(0.01));
        // Centroid of #3 in D-H-G-C-W is at ~(839, 361) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(839.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(360.87).Within(0.01));
        // Centroid of #4 in Z-A-E-H-D is at ~(810, 817) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(810.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(817.24).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(667, 533) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(200, 600), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(600, 200), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  800 Y-------------------B-------------------X
        //      |                   |                   |
        //  700 |                   |                   |
        //      |                   |                   |
        //  600 |         2         |         1         |
        //      |                   |                   |
        //  500 |                ,,,F,                  |
        //      |        ,,,··'''     ',                |
        //  400 C----G#''               'E--------------A
        //      |      ',               ·               |
        //  300 |        '·,   5       ·                |
        //      |           ',        ·                 |
        //  200 |         3   '·,     ·       4         |
        //      |                ',  ·                  |
        //  100 |                  'H                   |
        //      |                   |                   |
        //    0 W-------------------D-------------------Z
        //       0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 400), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 400, 500), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 100, 400), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 100, 400), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 400, 100), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 800, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, 400), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 400, 100), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 800, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 400), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 400, 500), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 100, 400), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 400, 100), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in X-B-F-E-A is at ~(605, 605) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(605.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(605.38).Within(0.01));
        // Centroid of #2 in B-Y-C-G-F is at ~(190, 617) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(189.66).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(617.24).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(161, 161) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(160.87).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(160.87).Within(0.01));
        // Centroid of #4 in A-E-H-D-Z is at ~(617, 190) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(617.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(189.66).Within(0.01));
        // Centroid of #5 in E-F-G-H is at ~(333, 333) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(200, -200), // #4
            new VoronoiSite(-100, -100), // #5
        };

        //  400 Y-------------------B-------------------X
        //      |                   |                   |
        //  300 |                   |                   |
        //      |                   |                   |
        //  200 |         2         |         1         |
        //      |                   |                   |
        //  100 |                ,,,F,                  |
        //      |        ,,,··'''     ',                |
        //    0 C----G#''           ●   'E--------------A
        //      |      ',               ·               |
        // -100 |        '·,   5       ·                |
        //      |           ',        ·                 |
        // -200 |         3   '·,     ·       4         |
        //      |                ',  ·                  |
        // -300 |                  'H                   |
        //      |                   |                   |
        // -400 W-------------------D-------------------Z
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -400, -400, 400, 400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, 0), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 0, 100), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -400, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 100), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -300, 0), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -400, 400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, -400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -300, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, -300), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, -400, -400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, -400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 100, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, -300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 400, -400), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, 100), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -300, 0), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 0, -300), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in X-B-F-E-A is at ~(205, 205) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(205.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(205.38).Within(0.01));
        // Centroid of #2 in B-Y-C-G-F is at ~(-210, 217) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-210.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(217.24).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(-239, -239) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-239.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-239.13).Within(0.01));
        // Centroid of #4 in A-E-H-D-Z is at ~(217, -210) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(217.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-210.34).Within(0.01));
        // Centroid of #5 in E-F-G-H is at ~(-67, -67) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(0, 400), // #2
            new VoronoiSite(0, 0), // #3
            new VoronoiSite(400, 0), // #4
            new VoronoiSite(100, 100), // #5
        };

        //  600 Y-------------------B-------------------X
        //      |                   |                   |
        //  500 |                   |                   |
        //      |                   |                   |
        //  400 |         2         |         1         |
        //      |                   |                   |
        //  300 |                ,,,F,                  |
        //      |        ,,,··'''     ',                |
        //  200 C----G#''               'E--------------A
        //      |      ',               ·               |
        //  100 |        '·,   5       ·                |
        //      |           ',        ·                 |
        //    0 |         3   '·,     ·       4         |
        //      |                ',  ·                  |
        // -100 |                  'H                   |
        //      |                   |                   |
        // -200 W-------------------D-------------------Z
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 200), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 200, 300), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 300), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, -100, 200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -100, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, -100), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, -200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 300, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, -100), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 600, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 300), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, -100, 200), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 200, -100), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in X-B-F-E-A is at ~(405, 405) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(405.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(405.38).Within(0.01));
        // Centroid of #2 in B-Y-C-G-F is at ~(-10, 417) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-10.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(417.24).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(-39, -39) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-39.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-39.13).Within(0.01));
        // Centroid of #4 in A-E-H-D-Z is at ~(417, -10) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(417.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-10.34).Within(0.01));
        // Centroid of #5 in E-F-G-H is at ~(133, 133) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(400, 800), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(800, 400), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 Y-------------------B-------------------X
        //      |                   |                   |
        //  900 |                   |                   |
        //      |                   |                   |
        //  800 |         2         |         1         |
        //      |                   |                   |
        //  700 |                ,,,F,                  |
        //      |        ,,,··'''     ',                |
        //  600 C----G#''               'E--------------A
        //      |      ',               ·               |
        //  500 |        '·,   5       ·                |
        //      |           ',        ·                 |
        //  400 |         3   '·,     ·       4         |
        //      |                ',  ·                  |
        //  300 |                  'H                   |
        //      |                   |                   |
        //  200 W-------------------D-------------------Z
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 700, 600), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 600, 700), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 700), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 300, 600), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 600), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 600, 300), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 1000, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 700, 600), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 600, 300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 1000, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 700, 600), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 600, 700), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 300, 600), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 600, 300), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in X-B-F-E-A is at ~(805, 805) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(805.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(805.38).Within(0.01));
        // Centroid of #2 in B-Y-C-G-F is at ~(390, 817) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(389.66).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(817.24).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(361, 361) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(360.87).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(360.87).Within(0.01));
        // Centroid of #4 in A-E-H-D-Z is at ~(817, 390) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(817.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(389.66).Within(0.01));
        // Centroid of #5 in E-F-G-H is at ~(533, 533) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(200, 600), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(300, 500), // #5
        };

        //  800 W-------------------C-------------------Y
        //      |                   |                   |
        //  700 |                  ,G                   |
        //      |                ,'  ·                  |
        //  600 |         3   ,·'     ·       2         |
        //      |           ,'         ·                |
        //  500 |        ,·'   5       ·                |
        //      |      ,'               ·               |
        //  400 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                |
        //  300 |                '''E'                  |
        //      |                   |                   |
        //  200 |         4         |         1         |
        //      |                   |                   |
        //  100 |                   |                   |
        //      |                   |                   |
        //    0 Z-------------------A-------------------X
        //       0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 300), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 500, 400), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 400), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 400, 700), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 400, 700), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 100, 400), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 400, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 400, 300), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 100, 400), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 400, 300), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 500, 400), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 400, 700), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 100, 400), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in B-F-E-A-X is at ~(605, 195) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(605.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(194.62).Within(0.01));
        // Centroid of #2 in Y-C-G-F-B is at ~(617, 610) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(617.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(610.34).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(161, 639) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(160.87).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(639.13).Within(0.01));
        // Centroid of #4 in E-H-D-Z-A is at ~(190, 183) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(189.66).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(182.76).Within(0.01));
        // Centroid of #5 in G-H-E-F is at ~(333, 467) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(-200, -200), // #4
            new VoronoiSite(-100, 100), // #5
        };

        //  400 W-------------------C-------------------Y
        //      |                   |                   |
        //  300 |                  ,G                   |
        //      |                ,'  ·                  |
        //  200 |         3   ,·'     ·       2         |
        //      |           ,'         ·                |
        //  100 |        ,·'   5       ·                |
        //      |      ,'               ·               |
        //    0 D----H#,,           ●   ,F--------------B
        //      |        '''··,,,     ,'                |
        // -100 |                '''E'                  |
        //      |                   |                   |
        // -200 |         4         |         1         |
        //      |                   |                   |
        // -300 |                   |                   |
        //      |                   |                   |
        // -400 Z-------------------A-------------------X
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -400, -400, 400, 400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, -100), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 100, 0), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 400, -400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, 0), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -400, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -300, 0), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, -400, 400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, -400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -400, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, -100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -300, 0), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -400, -400), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 0, -100), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 100, 0), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 0, 300), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, -300, 0), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in B-F-E-A-X is at ~(205, -205) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(205.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-205.38).Within(0.01));
        // Centroid of #2 in Y-C-G-F-B is at ~(217, 210) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(217.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(210.34).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(-239, 239) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-239.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(239.13).Within(0.01));
        // Centroid of #4 in E-H-D-Z-A is at ~(-210, -217) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-210.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-217.24).Within(0.01));
        // Centroid of #5 in G-H-E-F is at ~(-67, 67) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(0, 400), // #3
            new VoronoiSite(0, 0), // #4
            new VoronoiSite(100, 300), // #5
        };

        //  600 W-------------------C-------------------Y
        //      |                   |                   |
        //  500 |                  ,G                   |
        //      |                ,'  ·                  |
        //  400 |         3   ,·'     ·       2         |
        //      |           ,'         ·                |
        //  300 |        ,·'   5       ·                |
        //      |      ,'               ·               |
        //  200 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                |
        //  100 |                '''E'                  |
        //      |                   |                   |
        //    0 |         4         |         1         |
        //      |                   |                   |
        // -100 |                   |                   |
        //      |                   |                   |
        // -200 Z-------------------A-------------------X
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 100), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 300, 200), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 300, 200), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, -100, 200), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, -200, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, -200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 100), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, -100, 200), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 200, 100), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 300, 200), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 200, 500), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, -100, 200), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in B-F-E-A-X is at ~(405, -5) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(405.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-5.38).Within(0.01));
        // Centroid of #2 in Y-C-G-F-B is at ~(417, 410) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(417.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(410.34).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(-39, 439) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-39.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(439.13).Within(0.01));
        // Centroid of #4 in E-H-D-Z-A is at ~(-10, -17) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-10.34).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-17.24).Within(0.01));
        // Centroid of #5 in G-H-E-F is at ~(133, 267) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(400, 800), // #3
            new VoronoiSite(400, 400), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1000 W-------------------C-------------------Y
        //      |                   |                   |
        //  900 |                  ,G                   |
        //      |                ,'  ·                  |
        //  800 |         3   ,·'     ·       2         |
        //      |           ,'         ·                |
        //  700 |        ,·'   5       ·                |
        //      |      ,'               ·               |
        //  600 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                |
        //  500 |                '''E'                  |
        //      |                   |                   |
        //  400 |         4         |         1         |
        //      |                   |                   |
        //  300 |                   |                   |
        //      |                   |                   |
        //  200 Z-------------------A-------------------X
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 500), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 700, 600), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 700, 600), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 600, 900), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, 900), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 300, 600), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 600, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 600, 500), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 300, 600), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 600, 500), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 700, 600), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 600, 900), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 300, 600), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in B-F-E-A-X is at ~(805, 395) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(805.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(394.62).Within(0.01));
        // Centroid of #2 in Y-C-G-F-B is at ~(817, 810) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(817.24).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(810.34).Within(0.01));
        // Centroid of #3 in G-C-W-D-H is at ~(361, 839) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(360.87).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(839.13).Within(0.01));
        // Centroid of #4 in E-H-D-Z-A is at ~(390, 383) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(389.66).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(382.76).Within(0.01));
        // Centroid of #5 in G-H-E-F is at ~(533, 667) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(600, 200), // #2
            new VoronoiSite(600, 600), // #3
            new VoronoiSite(200, 600), // #4
            new VoronoiSite(500, 500), // #5
        };

        //  800 Z-------------------D-------------------W
        //      |                   |                   |
        //  700 |                   H,                  |
        //      |                  ·  ',                |
        //  600 |         4       ·     '·,   3         |
        //      |                 ·        ',           |
        //  500 |                ·       5   '·,        |
        //      |               ·               ',      |
        //  400 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''        |
        //  300 |                  'F'''                |
        //      |                   |                   |
        //  200 |         1         |         2         |
        //      |                   |                   |
        //  100 |                   |                   |
        //      |                   |                   |
        //    0 X-------------------B-------------------Y
        //       0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 400), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 400, 300), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 300), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 700, 400), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 700, 400), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 400, 700), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 400), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 300, 400), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 400, 700), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 0, 800), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 300, 400), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 400, 300), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 700, 400), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 400, 700), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in F-E-A-X-B is at ~(195, 195) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(194.62).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(194.62).Within(0.01));
        // Centroid of #2 in C-G-F-B-Y is at ~(610, 183) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(610.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(182.76).Within(0.01));
        // Centroid of #3 in W-D-H-G-C is at ~(639, 639) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(639.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(639.13).Within(0.01));
        // Centroid of #4 in H-D-Z-A-E is at ~(183, 610) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(182.76).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(610.34).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(467, 467) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(-200, 200), // #4
            new VoronoiSite(100, 100), // #5
        };

        //  400 Z-------------------D-------------------W
        //      |                   |                   |
        //  300 |                   H,                  |
        //      |                  ·  ',                |
        //  200 |         4       ·     '·,   3         |
        //      |                 ·        ',           |
        //  100 |                ·       5   '·,        |
        //      |               ·               ',      |
        //    0 A--------------E,   ●           ,,#G----C
        //      |                ',     ,,,··'''        |
        // -100 |                  'F'''                |
        //      |                   |                   |
        // -200 |         1         |         2         |
        //      |                   |                   |
        // -300 |                   |                   |
        //      |                   |                   |
        // -400 X-------------------B-------------------Y
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -400, -400, 400, 400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, -400, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -100, 0), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 0, -100), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -400, -400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -100), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 400, -400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 0, 300), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, -400, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -100, 0), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 0, 300), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -400, 400), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, -100, 0), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 0, -100), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 300, 0), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 0, 300), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in F-E-A-X-B is at ~(-205, -205) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-205.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-205.38).Within(0.01));
        // Centroid of #2 in C-G-F-B-Y is at ~(210, -217) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(210.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-217.24).Within(0.01));
        // Centroid of #3 in W-D-H-G-C is at ~(239, 239) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(239.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(239.13).Within(0.01));
        // Centroid of #4 in H-D-Z-A-E is at ~(-217, 210) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-217.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(210.34).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(67, 67) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 0), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(0, 400), // #4
            new VoronoiSite(300, 300), // #5
        };

        //  600 Z-------------------D-------------------W
        //      |                   |                   |
        //  500 |                   H,                  |
        //      |                  ·  ',                |
        //  400 |         4       ·     '·,   3         |
        //      |                 ·        ',           |
        //  300 |                ·       5   '·,        |
        //      |               ·               ',      |
        //  200 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''        |
        //  100 |                  'F'''                |
        //      |                   |                   |
        //    0 |         1         |         2         |
        //      |                   |                   |
        // -100 |                   |                   |
        //      |                   |                   |
        // -200 X-------------------B-------------------Y
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, 200), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 200, 100), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 100), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 200, 500), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 100, 200), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 200, 500), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, -200, 600), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 100, 200), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 200, 100), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 500, 200), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 200, 500), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in F-E-A-X-B is at ~(-5, -5) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-5.38).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-5.38).Within(0.01));
        // Centroid of #2 in C-G-F-B-Y is at ~(410, -17) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(410.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-17.24).Within(0.01));
        // Centroid of #3 in W-D-H-G-C is at ~(439, 439) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(439.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(439.13).Within(0.01));
        // Centroid of #4 in H-D-Z-A-E is at ~(-17, 410) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-17.24).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(410.34).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(267, 267) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(800, 400), // #2
            new VoronoiSite(800, 800), // #3
            new VoronoiSite(400, 800), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1000 Z-------------------D-------------------W
        //      |                   |                   |
        //  900 |                   H,                  |
        //      |                  ·  ',                |
        //  800 |         4       ·     '·,   3         |
        //      |                 ·        ',           |
        //  700 |                ·       5   '·,        |
        //      |               ·               ',      |
        //  600 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''        |
        //  500 |                  'F'''                |
        //      |                   |                   |
        //  400 |         1         |         2         |
        //      |                   |                   |
        //  300 |                   |                   |
        //      |                   |                   |
        //  200 X-------------------B-------------------Y
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(5), "Expected: site #1 point count 5"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 600), Is.True, "Expected: site #1 has E"); // #1 has E
        Assume.That(HasPoint(sites[0].Points, 600, 500), Is.True, "Expected: site #1 has F"); // #1 has F
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(5), "Expected: site #2 point count 5"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 500), Is.True, "Expected: site #2 has F"); // #2 has F
        Assume.That(HasPoint(sites[1].Points, 900, 600), Is.True, "Expected: site #2 has G"); // #2 has G
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(5), "Expected: site #3 point count 5"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 900, 600), Is.True, "Expected: site #3 has G"); // #3 has G
        Assume.That(HasPoint(sites[2].Points, 600, 900), Is.True, "Expected: site #3 has H"); // #3 has H
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(5), "Expected: site #4 point count 5"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 600), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 1000), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 500, 600), Is.True, "Expected: site #4 has E"); // #4 has E
        Assume.That(HasPoint(sites[3].Points, 600, 900), Is.True, "Expected: site #4 has H"); // #4 has H
        Assume.That(HasPoint(sites[3].Points, 200, 1000), Is.True, "Expected: site #4 has Z"); // #4 has Z
        Assume.That(sites[4].Points, Is.Not.Null);
        Assume.That(sites[4].Points.Count(), Is.EqualTo(4), "Expected: site #5 point count 4"); // #5
        Assume.That(HasPoint(sites[4].Points, 500, 600), Is.True, "Expected: site #5 has E"); // #5 has E
        Assume.That(HasPoint(sites[4].Points, 600, 500), Is.True, "Expected: site #5 has F"); // #5 has F
        Assume.That(HasPoint(sites[4].Points, 900, 600), Is.True, "Expected: site #5 has G"); // #5 has G
        Assume.That(HasPoint(sites[4].Points, 600, 900), Is.True, "Expected: site #5 has H"); // #5 has H

        // Assert

        // Centroid of #1 in F-E-A-X-B is at ~(395, 395) (using generic closed polygon formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(394.62).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(394.62).Within(0.01));
        // Centroid of #2 in C-G-F-B-Y is at ~(810, 383) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(810.34).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(382.76).Within(0.01));
        // Centroid of #3 in W-D-H-G-C is at ~(839, 839) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(839.13).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(839.13).Within(0.01));
        // Centroid of #4 in H-D-Z-A-E is at ~(383, 810) (using generic closed polygon formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(382.76).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(810.34).Within(0.01));
        // Centroid of #5 in H-E-F-G is at ~(667, 667) (using quadrilateral formula)
        Assert.That(sites[4].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[4].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 X-----------------------------------------------##B
        //      |                                          ,,·''  |
        //  900 |              1                      ,,·''       |
        //      |                                ,,·''            |
        //  800 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  700 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  600 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  500 A##                      3                        |
        //      |  ''·,,                                          |
        //  400 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //    0 Y-----------------------------------------------##C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(333, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(333, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in B-A-C is at ~(667, 500) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(-200, -400), // #2
            new VoronoiSite(0, 0), // #3
        };

        //  500 X-----------------------------------------------##B
        //      |                                          ,,·''  |
        //  400 |              1                      ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //    0 A##                      3                        |
        //      |  ''·,,                                          |
        // -100 |       ''·,,                                     |
        //      |            ''·,,                                |
        // -200 |                 ''·,,                           |
        //      |                      ''·,,                      |
        // -300 |                           ''·,,                 |
        //      |                                ''·,,            |
        // -400 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        // -500 Y-----------------------------------------------##C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(-167, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(-167, -333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #3 in B-A-C is at ~(167, 0) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(300, 300), // #3
        };

        //  800 X-----------------------------------------------##B
        //      |                                          ,,·''  |
        //  700 |              1                      ,,·''       |
        //      |                                ,,·''            |
        //  600 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  500 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  400 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  300 A##                      3                        |
        //      |  ''·,,                                          |
        //  200 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  100 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //    0 |         ●                 ''·,,                 |
        //      |                                ''·,,            |
        // -100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        // -200 Y-----------------------------------------------##C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(133, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(133, -33) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #3 in B-A-C is at ~(467, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1200 X-----------------------------------------------##B
        //      |                                          ,,·''  |
        // 1100 |              1                      ,,·''       |
        //      |                                ,,·''            |
        // 1000 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  900 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  800 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  700 A##                      3                        |
        //      |  ''·,,                                          |
        //  600 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  500 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  400 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  300 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //  200 Y-----------------------------------------------##C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(533, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(533, 367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #3 in B-A-C is at ~(867, 700) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 Y------------------------A------------------------X
        //      |                       ' '                       |
        //  900 |                     ,'   ',                     |
        //      |                    ,       ,                    |
        //  800 |                   ·         ·                   |
        //      |                  '           '                  |
        //  700 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  600 |              ·                   ·              |
        //      |             '                     '             |
        //  500 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  400 |         ·                             ·         |
        //      |        '                               '        |
        //  300 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  200 |    ·                                       ·    |
        //      |   '                                         '   |
        //  100 | ,'                                           ', |
        //      |,                                               ,|
        //    0 C-------------------------------------------------B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in X-A-B is at ~(833, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(167, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(500, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(-400, 200), // #2
            new VoronoiSite(0, 0), // #3
        };

        //  500 Y------------------------A------------------------X
        //      |                       ' '                       |
        //  400 |                     ,'   ',                     |
        //      |                    ,       ,                    |
        //  300 |                   ·         ·                   |
        //      |                  '           '                  |
        //  200 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  100 |              ·                   ·              |
        //      |             '                     '             |
        //    0 |           ,'           3           ',           |
        //      |          ,                           ,          |
        // -100 |         ·                             ·         |
        //      |        '                               '        |
        // -200 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        // -300 |    ·                                       ·    |
        //      |   '                                         '   |
        // -400 | ,'                                           ', |
        //      |,                                               ,|
        // -500 C-------------------------------------------------B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in X-A-B is at ~(333, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(-333, 167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(0, -167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(-100, 500), // #2
            new VoronoiSite(300, 300), // #3
        };

        //  800 Y------------------------A------------------------X
        //      |                       ' '                       |
        //  700 |                     ,'   ',                     |
        //      |                    ,       ,                    |
        //  600 |                   ·         ·                   |
        //      |                  '           '                  |
        //  500 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  400 |              ·                   ·              |
        //      |             '                     '             |
        //  300 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  200 |         ·                             ·         |
        //      |        '                               '        |
        //  100 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //    0 |    ·    ●                                  ·    |
        //      |   '                                         '   |
        // -100 | ,'                                           ', |
        //      |,                                               ,|
        // -200 C-------------------------------------------------B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in X-A-B is at ~(633, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(-33, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(300, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1200 Y------------------------A------------------------X
        //      |                       ' '                       |
        // 1100 |                     ,'   ',                     |
        //      |                    ,       ,                    |
        // 1000 |                   ·         ·                   |
        //      |                  '           '                  |
        //  900 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  800 |              ·                   ·              |
        //      |             '                     '             |
        //  700 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  600 |         ·                             ·         |
        //      |        '                               '        |
        //  500 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  400 |    ·                                       ·    |
        //      |   '                                         '   |
        //  300 | ,'                                           ', |
        //      |,                                               ,|
        //  200 C-------------------------------------------------B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in X-A-B is at ~(1033, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in A-Y-C is at ~(367, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(700, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 C##-----------------------------------------------Y
        //      |  ''·,,                                          |
        //  900 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  800 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  700 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  600 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  500 |                        3                      ##A
        //      |                                          ,,·''  |
        //  400 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                      1              |
        //      |  ,,·''                                          |
        //    0 B##-----------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in A-B-X is at ~(667, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in Y-C-A is at ~(667, 833) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(333, 500) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -400), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(0, 0), // #3
        };

        //  500 C##-----------------------------------------------Y
        //      |  ''·,,                                          |
        //  400 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //    0 |                        3                      ##A
        //      |                                          ,,·''  |
        // -100 |                                     ,,·''       |
        //      |                                ,,·''            |
        // -200 |                           ,,·''                 |
        //      |                      ,,·''                      |
        // -300 |                 ,,·''                           |
        //      |            ,,·''                                |
        // -400 |       ,,·''                      1              |
        //      |  ,,·''                                          |
        // -500 B##-----------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in A-B-X is at ~(167, -333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #2 in Y-C-A is at ~(167, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(-167, 0) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -100), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 300), // #3
        };

        //  800 C##-----------------------------------------------Y
        //      |  ''·,,                                          |
        //  700 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  600 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  500 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  400 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  300 |                        3                      ##A
        //      |                                          ,,·''  |
        //  200 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  100 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //    0 |         ●       ,,·''                           |
        //      |            ,,·''                                |
        // -100 |       ,,·''                      1              |
        //      |  ,,·''                                          |
        // -200 B##-----------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in A-B-X is at ~(467, -33) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #2 in Y-C-A is at ~(467, 633) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(133, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1200 C##-----------------------------------------------Y
        //      |  ''·,,                                          |
        // 1100 |       ''·,,                      2              |
        //      |            ''·,,                                |
        // 1000 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  900 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  800 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  700 |                        3                      ##A
        //      |                                          ,,·''  |
        //  600 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  500 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  400 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  300 |       ,,·''                      1              |
        //      |  ,,·''                                          |
        //  200 B##-----------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in A-B-X is at ~(867, 367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #2 in Y-C-A is at ~(867, 1033) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #3 in A-C-B is at ~(533, 700) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 B-------------------------------------------------C
        //      |'                                               '|
        //  900 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  800 |    ·                                       ·    |
        //      |     '                                     '     |
        //  700 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  600 |         ·                             ·         |
        //      |          '                           '          |
        //  500 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  400 |              ·                   ·              |
        //      |               '                 '               |
        //  300 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //  200 |                   ·         ·                   |
        //      |                    '       '                    |
        //  100 |                     ',   ,'                     |
        //      |                       , ,                       |
        //    0 X------------------------A------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(167, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in C-A-Y is at ~(833, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in C-B-A is at ~(500, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, -200), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(0, 0), // #3
        };

        //  500 B-------------------------------------------------C
        //      |'                                               '|
        //  400 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  300 |    ·                                       ·    |
        //      |     '                                     '     |
        //  200 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  100 |         ·                             ·         |
        //      |          '                           '          |
        //    0 |           ',           3           ,'           |
        //      |             ,                     ,             |
        // -100 |              ·                   ·              |
        //      |               '                 '               |
        // -200 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        // -300 |                   ·         ·                   |
        //      |                    '       '                    |
        // -400 |                     ',   ,'                     |
        //      |                       , ,                       |
        // -500 X------------------------A------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(-333, -167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #2 in C-A-Y is at ~(333, -167) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #3 in C-B-A is at ~(0, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 100), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 300), // #3
        };

        //  800 B-------------------------------------------------C
        //      |'                                               '|
        //  700 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  600 |    ·                                       ·    |
        //      |     '                                     '     |
        //  500 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  400 |         ·                             ·         |
        //      |          '                           '          |
        //  300 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  200 |              ·                   ·              |
        //      |               '                 '               |
        //  100 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //    0 |         ●         ·         ·                   |
        //      |                    '       '                    |
        // -100 |                     ',   ,'                     |
        //      |                       , ,                       |
        // -200 X------------------------A------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(-33, 133) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in C-A-Y is at ~(633, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in C-B-A is at ~(300, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1200 B-------------------------------------------------C
        //      |'                                               '|
        // 1100 | ',                                           ,' |
        //      |   ,                                         ,   |
        // 1000 |    ·                                       ·    |
        //      |     '                                     '     |
        //  900 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  800 |         ·                             ·         |
        //      |          '                           '          |
        //  700 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  600 |              ·                   ·              |
        //      |               '                 '               |
        //  500 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //  400 |                   ·         ·                   |
        //      |                    '       '                    |
        //  300 |                     ',   ,'                     |
        //      |                       , ,                       |
        //  200 X------------------------A------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has C"); // #3 has C

        // Assert

        // Centroid of #1 in B-X-A is at ~(367, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in C-A-Y is at ~(1033, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in C-B-A is at ~(700, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 900), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 X-------------------------------------##B---------W
        //      |                                ,,·''            |
        //  900 |    1                      ,,·''                 |
        //      |                      ,,·''                      |
        //  800 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  700 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  600 A''                                               |
        //      |                                                 |
        //  500 |              3                                  |
        //      |                                                 |
        //  400 D,,                                               |
        //      |  ''·,,                                          |
        //  300 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  200 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  100 |    2                      ''·,,                 |
        //      |                                ''·,,            |
        //    0 Y-------------------------------------##C---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(267, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(267, 133) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in W-B-A-D-C-Z is at ~(610, 500) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(609.80).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 400), // #1
            new VoronoiSite(-400, -400), // #2
            new VoronoiSite(-200, 0), // #3
        };

        //  500 X-------------------------------------##B---------W
        //      |                                ,,·''            |
        //  400 |    1                      ,,·''                 |
        //      |                      ,,·''                      |
        //  300 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  200 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  100 A''                                               |
        //      |                                                 |
        //    0 |              3         ●                        |
        //      |                                                 |
        // -100 D,,                                               |
        //      |  ''·,,                                          |
        // -200 |       ''·,,                                     |
        //      |            ''·,,                                |
        // -300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        // -400 |    2                      ''·,,                 |
        //      |                                ''·,,            |
        // -500 Y-------------------------------------##C---------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(-233, 367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(-233, -367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-366.67).Within(0.01));
        // Centroid of #3 in W-B-A-D-C-Z is at ~(110, 0) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(109.80).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 700), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(100, 300), // #3
        };

        //  800 X-------------------------------------##B---------W
        //      |                                ,,·''            |
        //  700 |    1                      ,,·''                 |
        //      |                      ,,·''                      |
        //  600 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  500 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  400 A''                                               |
        //      |                                                 |
        //  300 |              3                                  |
        //      |                                                 |
        //  200 D,,                                               |
        //      |  ''·,,                                          |
        //  100 |       ''·,,                                     |
        //      |            ''·,,                                |
        //    0 |         ●       ''·,,                           |
        //      |                      ''·,,                      |
        // -100 |    2                      ''·,,                 |
        //      |                                ''·,,            |
        // -200 Y-------------------------------------##C---------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(67, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(67, -67) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
        // Centroid of #3 in W-B-A-D-C-Z is at ~(410, 300) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(409.80).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1200 X-------------------------------------##B---------W
        //      |                                ,,·''            |
        // 1100 |    1                      ,,·''                 |
        //      |                      ,,·''                      |
        // 1000 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  900 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  800 A''                                               |
        //      |                                                 |
        //  700 |              3                                  |
        //      |                                                 |
        //  600 D,,                                               |
        //      |  ''·,,                                          |
        //  500 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  400 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  300 |    2                      ''·,,                 |
        //      |                                ''·,,            |
        //  200 Y-------------------------------------##C---------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(467, 1067) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1066.67).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(467, 333) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in W-B-A-D-C-Z is at ~(810, 700) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(809.80).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 Y-------------------D---------A-------------------X
        //      |                  '           '                  |
        //  900 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  800 |              ·                   ·              |
        //      |             '                     '             |
        //  700 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  600 |         ·                             ·         |
        //      |        '                               '        |
        //  500 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  400 |    ·                                       ·    |
        //      |   '                                         '   |
        //  300 | ,'                                           ', |
        //      |,                                               ,|
        //  200 C                                                 B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(867, 733) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(133, 733) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #3 in A-D-C-Z-W-B is at ~(500, 390) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(390.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(-400, 400), // #2
            new VoronoiSite(0, 200), // #3
        };

        //  500 Y-------------------D---------A-------------------X
        //      |                  '           '                  |
        //  400 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  300 |              ·                   ·              |
        //      |             '                     '             |
        //  200 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  100 |         ·                             ·         |
        //      |        '                               '        |
        //    0 |      ,'                ●                ',      |
        //      |     ,                                     ,     |
        // -100 |    ·                                       ·    |
        //      |   '                                         '   |
        // -200 | ,'                                           ', |
        //      |,                                               ,|
        // -300 C                                                 B
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Z-------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -500, -300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -100, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(367, 233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(-367, 233) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
        // Centroid of #3 in A-D-C-Z-W-B is at ~(-0, -110) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-109.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(-100, 700), // #2
            new VoronoiSite(300, 500), // #3
        };

        //  800 Y-------------------D---------A-------------------X
        //      |                  '           '                  |
        //  700 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  600 |              ·                   ·              |
        //      |             '                     '             |
        //  500 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  400 |         ·                             ·         |
        //      |        '                               '        |
        //  300 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  200 |    ·                                       ·    |
        //      |   '                                         '   |
        //  100 | ,'                                           ', |
        //      |,                                               ,|
        //    0 C         ●                                       B
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Z-------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(667, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(-67, 533) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in A-D-C-Z-W-B is at ~(300, 190) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(190.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 1100), // #1
            new VoronoiSite(300, 1100), // #2
            new VoronoiSite(700, 900), // #3
        };

        // 1200 Y-------------------D---------A-------------------X
        //      |                  '           '                  |
        // 1100 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        // 1000 |              ·                   ·              |
        //      |             '                     '             |
        //  900 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  800 |         ·                             ·         |
        //      |        '                               '        |
        //  700 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  600 |    ·                                       ·    |
        //      |   '                                         '   |
        //  500 | ,'                                           ', |
        //      |,                                               ,|
        //  400 C                                                 B
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Z-------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in X-A-B is at ~(1067, 933) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1066.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #2 in D-Y-C is at ~(333, 933) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #3 in A-D-C-Z-W-B is at ~(700, 590) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(590.20).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 100), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 Z---------C##-------------------------------------Y
        //      |            ''·,,                                |
        //  900 |                 ''·,,                      2    |
        //      |                      ''·,,                      |
        //  800 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  700 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  600 |                                               ''D
        //      |                                                 |
        //  500 |                                  3              |
        //      |                                                 |
        //  400 |                                               ,,A
        //      |                                          ,,·''  |
        //  300 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  200 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  100 |                 ,,·''                      1    |
        //      |            ,,·''                                |
        //    0 W---------B##-------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(733, 133) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in Y-C-D is at ~(733, 867) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #3 in D-C-Z-W-B-A is at ~(390, 500) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(390.20).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, -400), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 0), // #3
        };

        //  500 Z---------C##-------------------------------------Y
        //      |            ''·,,                                |
        //  400 |                 ''·,,                      2    |
        //      |                      ''·,,                      |
        //  300 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  200 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  100 |                                               ''D
        //      |                                                 |
        //    0 |                        ●         3              |
        //      |                                                 |
        // -100 |                                               ,,A
        //      |                                          ,,·''  |
        // -200 |                                     ,,·''       |
        //      |                                ,,·''            |
        // -300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        // -400 |                 ,,·''                      1    |
        //      |            ,,·''                                |
        // -500 W---------B##-------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, -100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -300, -500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -300, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(233, -367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-366.67).Within(0.01));
        // Centroid of #2 in Y-C-D is at ~(233, 367) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #3 in D-C-Z-W-B-A is at ~(-110, 0) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-109.80).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, -100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 300), // #3
        };

        //  800 Z---------C##-------------------------------------Y
        //      |            ''·,,                                |
        //  700 |                 ''·,,                      2    |
        //      |                      ''·,,                      |
        //  600 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  500 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  400 |                                               ''D
        //      |                                                 |
        //  300 |                                  3              |
        //      |                                                 |
        //  200 |                                               ,,A
        //      |                                          ,,·''  |
        //  100 |                                     ,,·''       |
        //      |                                ,,·''            |
        //    0 |         ●                 ,,·''                 |
        //      |                      ,,·''                      |
        // -100 |                 ,,·''                      1    |
        //      |            ,,·''                                |
        // -200 W---------B##-------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(533, -67) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
        // Centroid of #2 in Y-C-D is at ~(533, 667) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in D-C-Z-W-B-A is at ~(190, 300) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(190.20).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 300), // #1
            new VoronoiSite(1100, 1100), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1200 Z---------C##-------------------------------------Y
        //      |            ''·,,                                |
        // 1100 |                 ''·,,                      2    |
        //      |                      ''·,,                      |
        // 1000 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  900 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  800 |                                               ''D
        //      |                                                 |
        //  700 |                                  3              |
        //      |                                                 |
        //  600 |                                               ,,A
        //      |                                          ,,·''  |
        //  500 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  400 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  300 |                 ,,·''                      1    |
        //      |            ,,·''                                |
        //  200 W---------B##-------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in A-B-X is at ~(933, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in Y-C-D is at ~(933, 1067) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1066.67).Within(0.01));
        // Centroid of #3 in D-C-Z-W-B-A is at ~(590, 700) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(590.20).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(900, 100), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B                                                 C
        //      |'                                               '|
        //  700 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  600 |    ·                                       ·    |
        //      |     '                                     '     |
        //  500 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  400 |         ·                             ·         |
        //      |          '                           '          |
        //  300 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  200 |              ·                   ·              |
        //      |               '                 '               |
        //  100 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //    0 X-------------------A---------D-------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(133, 267) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in C-D-Y is at ~(867, 267) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #3 in C-Z-W-B-A-D is at ~(500, 610) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(609.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, -400), // #1
            new VoronoiSite(400, -400), // #2
            new VoronoiSite(0, -200), // #3
        };

        //  500 W-------------------------------------------------Z
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 B                                                 C
        //      |'                                               '|
        //  200 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  100 |    ·                                       ·    |
        //      |     '                                     '     |
        //    0 |      ',                ●                ,'      |
        //      |        ,                               ,        |
        // -100 |         ·                             ·         |
        //      |          '                           '          |
        // -200 |           ',           3           ,'           |
        //      |             ,                     ,             |
        // -300 |              ·                   ·              |
        //      |               '                 '               |
        // -400 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        // -500 X-------------------A---------D-------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(-367, -233) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
        // Centroid of #2 in C-D-Y is at ~(367, -233) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
        // Centroid of #3 in C-Z-W-B-A-D is at ~(0, 110) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(109.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(700, -100), // #2
            new VoronoiSite(300, 100), // #3
        };

        //  800 W-------------------------------------------------Z
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 B                                                 C
        //      |'                                               '|
        //  500 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  400 |    ·                                       ·    |
        //      |     '                                     '     |
        //  300 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  200 |         ·                             ·         |
        //      |          '                           '          |
        //  100 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //    0 |         ●    ·                   ·              |
        //      |               '                 '               |
        // -100 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        // -200 X-------------------A---------D-------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(-67, 67) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
        // Centroid of #2 in C-D-Y is at ~(667, 67) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
        // Centroid of #3 in C-Z-W-B-A-D is at ~(300, 410) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(409.80).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(1100, 300), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1200 W-------------------------------------------------Z
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 B                                                 C
        //      |'                                               '|
        //  900 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  800 |    ·                                       ·    |
        //      |     '                                     '     |
        //  700 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  600 |         ·                             ·         |
        //      |          '                           '          |
        //  500 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  400 |              ·                   ·              |
        //      |               '                 '               |
        //  300 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //  200 X-------------------A---------D-------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(6), "Expected: site #3 point count 6"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Z"); // #3 has Z

        // Assert

        // Centroid of #1 in B-X-A is at ~(333, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in C-D-Y is at ~(1067, 467) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1066.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in C-Z-W-B-A-D is at ~(700, 810) (using generic closed polygon formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(809.80).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 600), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 300), // #3
        };

        // 1200 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1100 |                                                           |
        //      |                                                           |
        // 1000 |                                                        ,,,C
        //      |                                                ,,,··'''   |
        //  900 |                   2                     ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  800 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  700 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  600 A###                     1                                  |
        //      |   '''··,,,                                                |
        //  500 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  400 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  300 |                   3                     '''·,,,           |
        //      |                                                '''··,,,   |
        //  200 |                                                        '''B
        //      |                                                           |
        //  100 |                                                           |
        //      |                                                           |
        //    0 Y-----------------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(800, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(500, 983) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(983.33).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(500, 217) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 0), // #1
            new VoronoiSite(-200, 300), // #2
            new VoronoiSite(-200, -300), // #3
        };

        //  600 X-----------------------------------------------------------Z
        //      |                                                           |
        //  500 |                                                           |
        //      |                                                           |
        //  400 |                                                        ,,,C
        //      |                                                ,,,··'''   |
        //  300 |                   2                     ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  200 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  100 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //    0 A###                     1    ●                             |
        //      |   '''··,,,                                                |
        // -100 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        // -200 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        // -300 |                   3                     '''·,,,           |
        //      |                                                '''··,,,   |
        // -400 |                                                        '''B
        //      |                                                           |
        // -500 |                                                           |
        //      |                                                           |
        // -600 Y-----------------------------------------------------------W
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, -400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -600, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, -400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, -600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -600, -600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(200, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(-100, 383) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(383.33).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(-100, -383) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-383.33).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(200, 700), // #2
            new VoronoiSite(200, 100), // #3
        };

        // 1000 X-----------------------------------------------------------Z
        //      |                                                           |
        //  900 |                                                           |
        //      |                                                           |
        //  800 |                                                        ,,,C
        //      |                                                ,,,··'''   |
        //  700 |                   2                     ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  600 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  500 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  400 A###                     1                                  |
        //      |   '''··,,,                                                |
        //  300 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  200 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  100 |                   3                     '''·,,,           |
        //      |                                                '''··,,,   |
        //    0 |         ●                                              '''B
        //      |                                                           |
        // -100 |                                                           |
        //      |                                                           |
        // -200 Y-----------------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(600, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(300, 783) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(783.33).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(300, 17) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(16.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 800), // #1
            new VoronoiSite(600, 1100), // #2
            new VoronoiSite(600, 500), // #3
        };

        // 1400 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1300 |                                                           |
        //      |                                                           |
        // 1200 |                                                        ,,,C
        //      |                                                ,,,··'''   |
        // 1100 |                   2                     ,,,·'''           |
        //      |                                 ,,,··'''                  |
        // 1000 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  900 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  800 A###                     1                                  |
        //      |   '''··,,,                                                |
        //  700 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  600 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  500 |                   3                     '''·,,,           |
        //      |                                                '''··,,,   |
        //  400 |                                                        '''B
        //      |                                                           |
        //  300 |                                                           |
        //      |                                                           |
        //  200 Y-----------------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1400, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1400, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1400, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1400, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1400, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-A-B is at ~(1000, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(700, 1183) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1183.33).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(700, 417) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(416.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 700), // #1
            new VoronoiSite(900, 800), // #2
            new VoronoiSite(300, 800), // #3
        };

        // 1200 Y-----------------------------A-----------------------------X
        //      |                            · ·                            |
        // 1100 |                           ·   ·                           |
        //      |                          ·     ·                          |
        // 1000 |                          ·     ·                          |
        //      |                         ·       ·                         |
        //  900 |                        ·         ·                        |
        //      |                       ·           ·                       |
        //  800 |              3       ·             ·       2              |
        //      |                     ·               ·                     |
        //  700 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  600 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  500 |                 ·                       ·                 |
        //      |                ·                         ·                |
        //  400 |                ·                         ·                |
        //      |               ·                           ·               |
        //  300 |              ·                             ·              |
        //      |             ·                               ·             |
        //  200 |            ·                                 ·            |
        //      |           ·                                   ·           |
        //  100 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //    0 W---------B---------------------------------------C---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(600, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in X-A-C-Z is at ~(983, 700) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(983.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(217, 700) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 100), // #1
            new VoronoiSite(300, 200), // #2
            new VoronoiSite(-300, 200), // #3
        };

        //  600 Y-----------------------------A-----------------------------X
        //      |                            · ·                            |
        //  500 |                           ·   ·                           |
        //      |                          ·     ·                          |
        //  400 |                          ·     ·                          |
        //      |                         ·       ·                         |
        //  300 |                        ·         ·                        |
        //      |                       ·           ·                       |
        //  200 |              3       ·             ·       2              |
        //      |                     ·               ·                     |
        //  100 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //    0 |                   ·         ●         ·                   |
        //      |                  ·                     ·                  |
        // -100 |                 ·                       ·                 |
        //      |                ·                         ·                |
        // -200 |                ·                         ·                |
        //      |               ·                           ·               |
        // -300 |              ·                             ·              |
        //      |             ·                               ·             |
        // -400 |            ·                                 ·            |
        //      |           ·                                   ·           |
        // -500 |           ·                                   ·           |
        //      |          ·                                     ·          |
        // -600 W---------B---------------------------------------C---------Z
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -400, -600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, -600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, -600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -400, -600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -600, -600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -600, 600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(0, -200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-200.00).Within(0.01));
        // Centroid of #2 in X-A-C-Z is at ~(383, 100) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(383.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(-383, 100) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-383.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 500), // #1
            new VoronoiSite(700, 600), // #2
            new VoronoiSite(100, 600), // #3
        };

        // 1000 Y-----------------------------A-----------------------------X
        //      |                            · ·                            |
        //  900 |                           ·   ·                           |
        //      |                          ·     ·                          |
        //  800 |                          ·     ·                          |
        //      |                         ·       ·                         |
        //  700 |                        ·         ·                        |
        //      |                       ·           ·                       |
        //  600 |              3       ·             ·       2              |
        //      |                     ·               ·                     |
        //  500 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  400 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  300 |                 ·                       ·                 |
        //      |                ·                         ·                |
        //  200 |                ·                         ·                |
        //      |               ·                           ·               |
        //  100 |              ·                             ·              |
        //      |             ·                               ·             |
        //    0 |         ●  ·                                 ·            |
        //      |           ·                                   ·           |
        // -100 |           ·                                   ·           |
        //      |          ·                                     ·          |
        // -200 W---------B---------------------------------------C---------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(400, 200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in X-A-C-Z is at ~(783, 500) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(783.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(17, 500) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(16.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 900), // #1
            new VoronoiSite(1100, 1000), // #2
            new VoronoiSite(500, 1000), // #3
        };

        // 1400 Y-----------------------------A-----------------------------X
        //      |                            · ·                            |
        // 1300 |                           ·   ·                           |
        //      |                          ·     ·                          |
        // 1200 |                          ·     ·                          |
        //      |                         ·       ·                         |
        // 1100 |                        ·         ·                        |
        //      |                       ·           ·                       |
        // 1000 |              3       ·             ·       2              |
        //      |                     ·               ·                     |
        //  900 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  800 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  700 |                 ·                       ·                 |
        //      |                ·                         ·                |
        //  600 |                ·                         ·                |
        //      |               ·                           ·               |
        //  500 |              ·                             ·              |
        //      |             ·                               ·             |
        //  400 |            ·                                 ·            |
        //      |           ·                                   ·           |
        //  300 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //  200 W---------B---------------------------------------C---------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 1400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 1400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 1400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1400), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(800, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in X-A-C-Z is at ~(1183, 900) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1183.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #3 in A-Y-W-B is at ~(417, 900) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(416.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 600), // #1
            new VoronoiSite(800, 300), // #2
            new VoronoiSite(800, 900), // #3
        };

        // 1200 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1100 |                                                           |
        //      |                                                           |
        // 1000 B,,,                                                        |
        //      |   '''··,,,                                                |
        //  900 |           '''·,,,                     3                   |
        //      |                  '''··,,,                                 |
        //  800 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  700 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  600 |                                  1                     ###A
        //      |                                                ,,,··'''   |
        //  500 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  400 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  300 |           ,,,·'''                     2                   |
        //      |   ,,,··'''                                                |
        //  200 C'''                                                        |
        //      |                                                           |
        //  100 |                                                           |
        //      |                                                           |
        //    0 Z-----------------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(400, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in A-C-Z-X is at ~(700, 217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
        // Centroid of #3 in Y-W-B-A is at ~(700, 983) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(983.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 0), // #1
            new VoronoiSite(200, -300), // #2
            new VoronoiSite(200, 300), // #3
        };

        //  600 W-----------------------------------------------------------Y
        //      |                                                           |
        //  500 |                                                           |
        //      |                                                           |
        //  400 B,,,                                                        |
        //      |   '''··,,,                                                |
        //  300 |           '''·,,,                     3                   |
        //      |                  '''··,,,                                 |
        //  200 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  100 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //    0 |                             ●    1                     ###A
        //      |                                                ,,,··'''   |
        // -100 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        // -200 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        // -300 |           ,,,·'''                     2                   |
        //      |   ,,,··'''                                                |
        // -400 C'''                                                        |
        //      |                                                           |
        // -500 |                                                           |
        //      |                                                           |
        // -600 Z-----------------------------------------------------------X
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -600, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -600, -400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -600, -400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -600, 400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -600, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(-200, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-C-Z-X is at ~(100, -383) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-383.33).Within(0.01));
        // Centroid of #3 in Y-W-B-A is at ~(100, 383) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(383.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 400), // #1
            new VoronoiSite(600, 100), // #2
            new VoronoiSite(600, 700), // #3
        };

        // 1000 W-----------------------------------------------------------Y
        //      |                                                           |
        //  900 |                                                           |
        //      |                                                           |
        //  800 B,,,                                                        |
        //      |   '''··,,,                                                |
        //  700 |           '''·,,,                     3                   |
        //      |                  '''··,,,                                 |
        //  600 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  500 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  400 |                                  1                     ###A
        //      |                                                ,,,··'''   |
        //  300 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  200 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  100 |           ,,,·'''                     2                   |
        //      |   ,,,··'''                                                |
        //    0 C'''      ●                                                 |
        //      |                                                           |
        // -100 |                                                           |
        //      |                                                           |
        // -200 Z-----------------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(200, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in A-C-Z-X is at ~(500, 17) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(16.67).Within(0.01));
        // Centroid of #3 in Y-W-B-A is at ~(500, 783) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(783.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 800), // #1
            new VoronoiSite(1000, 500), // #2
            new VoronoiSite(1000, 1100), // #3
        };

        // 1400 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1300 |                                                           |
        //      |                                                           |
        // 1200 B,,,                                                        |
        //      |   '''··,,,                                                |
        // 1100 |           '''·,,,                     3                   |
        //      |                  '''··,,,                                 |
        // 1000 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  900 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  800 |                                  1                     ###A
        //      |                                                ,,,··'''   |
        //  700 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  600 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  500 |           ,,,·'''                     2                   |
        //      |   ,,,··'''                                                |
        //  400 C'''                                                        |
        //      |                                                           |
        //  300 |                                                           |
        //      |                                                           |
        //  200 Z-----------------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1400, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1400, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1400, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 1400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1400, 1400), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-B-C is at ~(600, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in A-C-Z-X is at ~(900, 417) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(416.67).Within(0.01));
        // Centroid of #3 in Y-W-B-A is at ~(900, 1183) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1183.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 500), // #1
            new VoronoiSite(300, 400), // #2
            new VoronoiSite(900, 400), // #3
        };

        // 1200 Z---------C---------------------------------------B---------W
        //      |          ·                                     ·          |
        // 1100 |           ·                                   ·           |
        //      |           ·                                   ·           |
        // 1000 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  900 |              ·                             ·              |
        //      |               ·                           ·               |
        //  800 |                ·                         ·                |
        //      |                ·                         ·                |
        //  700 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  600 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  500 |                     ·       1       ·                     |
        //      |                     ·               ·                     |
        //  400 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //  300 |                        ·         ·                        |
        //      |                         ·       ·                         |
        //  200 |                          ·     ·                          |
        //      |                          ·     ·                          |
        //  100 |                           ·   ·                           |
        //      |                            · ·                            |
        //    0 X-----------------------------A-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(600, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(217, 500) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in W-B-A-Y is at ~(983, 500) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(983.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -100), // #1
            new VoronoiSite(-300, -200), // #2
            new VoronoiSite(300, -200), // #3
        };

        //  600 Z---------C---------------------------------------B---------W
        //      |          ·                                     ·          |
        //  500 |           ·                                   ·           |
        //      |           ·                                   ·           |
        //  400 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  300 |              ·                             ·              |
        //      |               ·                           ·               |
        //  200 |                ·                         ·                |
        //      |                ·                         ·                |
        //  100 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //    0 |                   ·         ●         ·                   |
        //      |                    ·                 ·                    |
        // -100 |                     ·       1       ·                     |
        //      |                     ·               ·                     |
        // -200 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        // -300 |                        ·         ·                        |
        //      |                         ·       ·                         |
        // -400 |                          ·     ·                          |
        //      |                          ·     ·                          |
        // -500 |                           ·   ·                           |
        //      |                            · ·                            |
        // -600 X-----------------------------A-----------------------------Y
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -400, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -400, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 600, -600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(0, 200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(-383, -100) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-383.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
        // Centroid of #3 in W-B-A-Y is at ~(383, -100) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(383.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(100, 200), // #2
            new VoronoiSite(700, 200), // #3
        };

        // 1000 Z---------C---------------------------------------B---------W
        //      |          ·                                     ·          |
        //  900 |           ·                                   ·           |
        //      |           ·                                   ·           |
        //  800 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  700 |              ·                             ·              |
        //      |               ·                           ·               |
        //  600 |                ·                         ·                |
        //      |                ·                         ·                |
        //  500 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  400 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  300 |                     ·       1       ·                     |
        //      |                     ·               ·                     |
        //  200 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //  100 |                        ·         ·                        |
        //      |                         ·       ·                         |
        //    0 |         ●                ·     ·                          |
        //      |                          ·     ·                          |
        // -100 |                           ·   ·                           |
        //      |                            · ·                            |
        // -200 X-----------------------------A-----------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(400, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(17, 300) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(16.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in W-B-A-Y is at ~(783, 300) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(783.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 700), // #1
            new VoronoiSite(500, 600), // #2
            new VoronoiSite(1100, 600), // #3
        };

        // 1400 Z---------C---------------------------------------B---------W
        //      |          ·                                     ·          |
        // 1300 |           ·                                   ·           |
        //      |           ·                                   ·           |
        // 1200 |            ·                                 ·            |
        //      |             ·                               ·             |
        // 1100 |              ·                             ·              |
        //      |               ·                           ·               |
        // 1000 |                ·                         ·                |
        //      |                ·                         ·                |
        //  900 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  800 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  700 |                     ·       1       ·                     |
        //      |                     ·               ·                     |
        //  600 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //  500 |                        ·         ·                        |
        //      |                         ·       ·                         |
        //  400 |                          ·     ·                          |
        //      |                          ·     ·                          |
        //  300 |                           ·   ·                           |
        //      |                            · ·                            |
        //  200 X-----------------------------A-----------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 400, 1400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 1400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 1400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1400, 1400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1400, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-C-A is at ~(800, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in C-Z-X-A is at ~(417, 700) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(416.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in W-B-A-Y is at ~(1183, 700) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1183.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(100, 300), // #3
        };

        // 1200 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1100 |                                                        ,,,B
        //      |                                                ,,,··'''   |
        // 1000 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  900 |    2                     ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  800 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  700 A'''                                                        |
        //      |                                                           |
        //  600 |         1                                                 |
        //      |                                                           |
        //  500 D,,,                                                        |
        //      |   '''··,,,                                                |
        //  400 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  300 |    3                     '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  200 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  100 |                                                        '''C
        //      |                                                           |
        //    0 Y-----------------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 1100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 1100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-A-D-C is at ~(733, 600) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(467, 1028) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1027.78).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(467, 172) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(172.22).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-500, 300), // #2
            new VoronoiSite(-500, -300), // #3
        };

        //  600 X-----------------------------------------------------------Z
        //      |                                                           |
        //  500 |                                                        ,,,B
        //      |                                                ,,,··'''   |
        //  400 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  300 |    2                     ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  200 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  100 A'''                                                        |
        //      |                                                           |
        //    0 |         1                   ●                             |
        //      |                                                           |
        // -100 D,,,                                                        |
        //      |   '''··,,,                                                |
        // -200 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        // -300 |    3                     '''·,,,                          |
        //      |                                 '''··,,,                  |
        // -400 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        // -500 |                                                        '''C
        //      |                                                           |
        // -600 Y-----------------------------------------------------------W
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -600, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 600, -500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -600, -100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -600, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -600, -100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, -600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -600, -600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-A-D-C is at ~(133, 0) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(-133, 428) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(427.78).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(-133, -428) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-427.78).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-100, 700), // #2
            new VoronoiSite(-100, 100), // #3
        };

        // 1000 X-----------------------------------------------------------Z
        //      |                                                           |
        //  900 |                                                        ,,,B
        //      |                                                ,,,··'''   |
        //  800 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  700 |    2                     ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  600 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  500 A'''                                                        |
        //      |                                                           |
        //  400 |         1                                                 |
        //      |                                                           |
        //  300 D,,,                                                        |
        //      |   '''··,,,                                                |
        //  200 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  100 |    3                     '''·,,,                          |
        //      |                                 '''··,,,                  |
        //    0 |         ●                               '''·,,,           |
        //      |                                                '''··,,,   |
        // -100 |                                                        '''C
        //      |                                                           |
        // -200 Y-----------------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, -100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-A-D-C is at ~(533, 400) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(267, 828) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(827.78).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(267, -28) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-27.78).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(300, 1100), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1400 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1300 |                                                        ,,,B
        //      |                                                ,,,··'''   |
        // 1200 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        // 1100 |    2                     ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        // 1000 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  900 A'''                                                        |
        //      |                                                           |
        //  800 |         1                                                 |
        //      |                                                           |
        //  700 D,,,                                                        |
        //      |   '''··,,,                                                |
        //  600 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  500 |    3                     '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  400 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  300 |                                                        '''C
        //      |                                                           |
        //  200 Y-----------------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1400, 1300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1400, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1400, 1300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1400, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1400, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in B-A-D-C is at ~(933, 800) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(667, 1228) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(1227.78).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(667, 372) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(372.22).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(300, 1100), // #3
        };

        // 1200 Y------------------------D---------A------------------------X
        //      |                       ·           ·                       |
        // 1100 |              3       ·             ·       2              |
        //      |                      ·              ·                     |
        // 1000 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  900 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  800 |                 ·                       ·                 |
        //      |                 ·                        ·                |
        //  700 |                ·                         ·                |
        //      |               ·                           ·               |
        //  600 |              ·                             ·              |
        //      |             ·                               ·             |
        //  500 |            ·                                 ·            |
        //      |            ·                                  ·           |
        //  400 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //  300 |         ·                                       ·         |
        //      |        ·                                         ·        |
        //  200 |       ·                                           ·       |
        //      |       ·                                            ·      |
        //  100 |      ·                                             ·      |
        //      |     ·                                               ·     |
        //    0 W----C-------------------------------------------------B----Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1100, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 100, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1100, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 0, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-C-B is at ~(600, 467) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in X-A-B-Z is at ~(1028, 733) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1027.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(172, 733) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(172.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-300, 500), // #3
        };

        //  600 Y------------------------D---------A------------------------X
        //      |                       ·           ·                       |
        //  500 |              3       ·             ·       2              |
        //      |                      ·              ·                     |
        //  400 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  300 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  200 |                 ·                       ·                 |
        //      |                 ·                        ·                |
        //  100 |                ·                         ·                |
        //      |               ·                           ·               |
        //    0 |              ·              ●              ·              |
        //      |             ·                               ·             |
        // -100 |            ·                                 ·            |
        //      |            ·                                  ·           |
        // -200 |           ·                                   ·           |
        //      |          ·                                     ·          |
        // -300 |         ·                                       ·         |
        //      |        ·                                         ·        |
        // -400 |       ·                                           ·       |
        //      |       ·                                            ·      |
        // -500 |      ·                                             ·      |
        //      |     ·                                               ·     |
        // -600 W----C-------------------------------------------------B----Z
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -100, 600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -100, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -600, -600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -600, 600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-C-B is at ~(0, -133) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-133.33).Within(0.01));
        // Centroid of #2 in X-A-B-Z is at ~(428, 133) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(427.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(-428, 133) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-427.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(100, 900), // #3
        };

        // 1000 Y------------------------D---------A------------------------X
        //      |                       ·           ·                       |
        //  900 |              3       ·             ·       2              |
        //      |                      ·              ·                     |
        //  800 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  700 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  600 |                 ·                       ·                 |
        //      |                 ·                        ·                |
        //  500 |                ·                         ·                |
        //      |               ·                           ·               |
        //  400 |              ·                             ·              |
        //      |             ·                               ·             |
        //  300 |            ·                                 ·            |
        //      |            ·                                  ·           |
        //  200 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //  100 |         ·                                       ·         |
        //      |        ·                                         ·        |
        //    0 |       · ●                                         ·       |
        //      |       ·                                            ·      |
        // -100 |      ·                                             ·      |
        //      |     ·                                               ·     |
        // -200 W----C-------------------------------------------------B----Z
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -100, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 300, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -100, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 300, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, -200, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-C-B is at ~(400, 267) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #2 in X-A-B-Z is at ~(828, 533) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(827.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(-28, 533) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-27.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 1200), // #1
            new VoronoiSite(1100, 1300), // #2
            new VoronoiSite(500, 1300), // #3
        };

        // 1400 Y------------------------D---------A------------------------X
        //      |                       ·           ·                       |
        // 1300 |              3       ·             ·       2              |
        //      |                      ·              ·                     |
        // 1200 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        // 1100 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        // 1000 |                 ·                       ·                 |
        //      |                 ·                        ·                |
        //  900 |                ·                         ·                |
        //      |               ·                           ·               |
        //  800 |              ·                             ·              |
        //      |             ·                               ·             |
        //  700 |            ·                                 ·            |
        //      |            ·                                  ·           |
        //  600 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //  500 |         ·                                       ·         |
        //      |        ·                                         ·        |
        //  400 |       ·                                           ·       |
        //      |       ·                                            ·      |
        //  300 |      ·                                             ·      |
        //      |     ·                                               ·     |
        //  200 W----C-------------------------------------------------B----Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 1400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1300, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 300, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 700, 1400), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 1400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1300, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 700, 1400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 200, 1400), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in A-D-C-B is at ~(800, 667) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in X-A-B-Z is at ~(1228, 933) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(1227.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #3 in D-Y-W-C is at ~(372, 933) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(372.22).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 600), // #1
            new VoronoiSite(1100, 300), // #2
            new VoronoiSite(1100, 900), // #3
        };

        // 1200 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1100 C,,,                                                        |
        //      |   '''··,,,                                                |
        // 1000 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  900 |                          '''·,,,                     3    |
        //      |                                 '''··,,,                  |
        //  800 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  700 |                                                        '''D
        //      |                                                           |
        //  600 |                                                 1         |
        //      |                                                           |
        //  500 |                                                        ,,,A
        //      |                                                ,,,··'''   |
        //  400 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  300 |                          ,,,·'''                     2    |
        //      |                  ,,,··'''                                 |
        //  200 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  100 B'''                                                        |
        //      |                                                           |
        //    0 Z-----------------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 1100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-C-B-A is at ~(467, 600) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in A-B-Z-X is at ~(733, 172) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(172.22).Within(0.01));
        // Centroid of #3 in Y-W-C-D is at ~(733, 1028) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1027.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(500, -300), // #2
            new VoronoiSite(500, 300), // #3
        };

        //  600 W-----------------------------------------------------------Y
        //      |                                                           |
        //  500 C,,,                                                        |
        //      |   '''··,,,                                                |
        //  400 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  300 |                          '''·,,,                     3    |
        //      |                                 '''··,,,                  |
        //  200 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  100 |                                                        '''D
        //      |                                                           |
        //    0 |                             ●                   1         |
        //      |                                                           |
        // -100 |                                                        ,,,A
        //      |                                                ,,,··'''   |
        // -200 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        // -300 |                          ,,,·'''                     2    |
        //      |                  ,,,··'''                                 |
        // -400 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        // -500 B'''                                                        |
        //      |                                                           |
        // -600 Z-----------------------------------------------------------X
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, -100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -600, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -600, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 100), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, -100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -600, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -600, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 600, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -600, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-C-B-A is at ~(-133, 0) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in A-B-Z-X is at ~(133, -428) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-427.78).Within(0.01));
        // Centroid of #3 in Y-W-C-D is at ~(133, 428) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(427.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(900, 100), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1000 W-----------------------------------------------------------Y
        //      |                                                           |
        //  900 C,,,                                                        |
        //      |   '''··,,,                                                |
        //  800 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  700 |                          '''·,,,                     3    |
        //      |                                 '''··,,,                  |
        //  600 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  500 |                                                        '''D
        //      |                                                           |
        //  400 |                                                 1         |
        //      |                                                           |
        //  300 |                                                        ,,,A
        //      |                                                ,,,··'''   |
        //  200 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  100 |                          ,,,·'''                     2    |
        //      |                  ,,,··'''                                 |
        //    0 |         ● ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        // -100 B'''                                                        |
        //      |                                                           |
        // -200 Z-----------------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 900), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 900), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-C-B-A is at ~(267, 400) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in A-B-Z-X is at ~(533, -28) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-27.78).Within(0.01));
        // Centroid of #3 in Y-W-C-D is at ~(533, 828) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(827.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1200, 800), // #1
            new VoronoiSite(1300, 500), // #2
            new VoronoiSite(1300, 1100), // #3
        };

        // 1400 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1300 C,,,                                                        |
        //      |   '''··,,,                                                |
        // 1200 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        // 1100 |                          '''·,,,                     3    |
        //      |                                 '''··,,,                  |
        // 1000 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  900 |                                                        '''D
        //      |                                                           |
        //  800 |                                                 1         |
        //      |                                                           |
        //  700 |                                                        ,,,A
        //      |                                                ,,,··'''   |
        //  600 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  500 |                          ,,,·'''                     2    |
        //      |                  ,,,··'''                                 |
        //  400 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  300 B'''                                                        |
        //      |                                                           |
        //  200 Z-----------------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1400, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1400, 900), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1400, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1400, 900), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1400, 1400), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in D-C-B-A is at ~(667, 800) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in A-B-Z-X is at ~(933, 372) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(372.22).Within(0.01));
        // Centroid of #3 in Y-W-C-D is at ~(933, 1228) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1227.78).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1200 Z----B-------------------------------------------------C----W
        //      |     ·                                               ·     |
        // 1100 |      ·                                             ·      |
        //      |      ·                                            ·       |
        // 1000 |       ·                                           ·       |
        //      |        ·                                         ·        |
        //  900 |         ·                                       ·         |
        //      |          ·                                     ·          |
        //  800 |           ·                                   ·           |
        //      |           ·                                  ·            |
        //  700 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  600 |              ·                             ·              |
        //      |               ·                           ·               |
        //  500 |                ·                         ·                |
        //      |                ·                        ·                 |
        //  400 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  300 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  200 |                     ·       1       ·                     |
        //      |                     ·              ·                      |
        //  100 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //    0 X------------------------A---------D------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1100, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1100, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 700, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1200, 0), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-B-A-D is at ~(600, 733) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(172, 467) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(172.22).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in W-C-D-Y is at ~(1028, 467) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1027.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(-300, -500), // #2
            new VoronoiSite(300, -500), // #3
        };

        //  600 Z----B-------------------------------------------------C----W
        //      |     ·                                               ·     |
        //  500 |      ·                                             ·      |
        //      |      ·                                            ·       |
        //  400 |       ·                                           ·       |
        //      |        ·                                         ·        |
        //  300 |         ·                                       ·         |
        //      |          ·                                     ·          |
        //  200 |           ·                                   ·           |
        //      |           ·                                  ·            |
        //  100 |            ·                                 ·            |
        //      |             ·                               ·             |
        //    0 |              ·              ●              ·              |
        //      |               ·                           ·               |
        // -100 |                ·                         ·                |
        //      |                ·                        ·                 |
        // -200 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        // -300 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        // -400 |                     ·       1       ·                     |
        //      |                     ·              ·                      |
        // -500 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        // -600 X------------------------A---------D------------------------Y
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -100, -600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 100, -600), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -100, -600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 100, -600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 600, -600), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-B-A-D is at ~(0, 133) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(-428, -133) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-427.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-133.33).Within(0.01));
        // Centroid of #3 in W-C-D-Y is at ~(428, -133) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(427.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(700, -100), // #3
        };

        // 1000 Z----B-------------------------------------------------C----W
        //      |     ·                                               ·     |
        //  900 |      ·                                             ·      |
        //      |      ·                                            ·       |
        //  800 |       ·                                           ·       |
        //      |        ·                                         ·        |
        //  700 |         ·                                       ·         |
        //      |          ·                                     ·          |
        //  600 |           ·                                   ·           |
        //      |           ·                                  ·            |
        //  500 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  400 |              ·                             ·              |
        //      |               ·                           ·               |
        //  300 |                ·                         ·                |
        //      |                ·                        ·                 |
        //  200 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  100 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //    0 |         ●           ·       1       ·                     |
        //      |                     ·              ·                      |
        // -100 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        // -200 X------------------------A---------D------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 900, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1000, -200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-B-A-D is at ~(400, 533) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(-28, 267) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-27.78).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
        // Centroid of #3 in W-C-D-Y is at ~(828, 267) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(827.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(1100, 300), // #3
        };

        // 1400 Z----B-------------------------------------------------C----W
        //      |     ·                                               ·     |
        // 1300 |      ·                                             ·      |
        //      |      ·                                            ·       |
        // 1200 |       ·                                           ·       |
        //      |        ·                                         ·        |
        // 1100 |         ·                                       ·         |
        //      |          ·                                     ·          |
        // 1000 |           ·                                   ·           |
        //      |           ·                                  ·            |
        //  900 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  800 |              ·                             ·              |
        //      |               ·                           ·               |
        //  700 |                ·                         ·                |
        //      |                ·                        ·                 |
        //  600 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  500 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  400 |                     ·       1       ·                     |
        //      |                     ·              ·                      |
        //  300 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //  200 X------------------------A---------D------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 1400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1300, 1400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 1400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has X"); // #2 has X
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1300, 1400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 900, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1400, 1400), Is.True, "Expected: site #3 has W"); // #3 has W
        Assume.That(HasPoint(sites[2].Points, 1400, 200), Is.True, "Expected: site #3 has Y"); // #3 has Y

        // Assert

        // Centroid of #1 in C-B-A-D is at ~(800, 933) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
        // Centroid of #2 in B-Z-X-A is at ~(372, 667) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(372.22).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in W-C-D-Y is at ~(1228, 667) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1227.78).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(900, 300), // #3
        };

        // 1000 X-----------------------------B-------------------Z
        //      |                            '                    |
        //  900 |              1           ,'                     |
        //      |                         ,                       |
        //  800 |                        ·                        |
        //      |                       '                         |
        //  700 |                     ,'           2              |
        //      |                    ,                            |
        //  600 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  500 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  400 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  300 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //  200 |        ,A''                                     |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 D#------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(208, 635) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(207.84).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(635.29).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(667, 667) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in C-A-D-W is at ~(635, 208) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(635.29).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(207.84).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(400, -200), // #3
        };

        //  500 X-----------------------------B-------------------Z
        //      |                            '                    |
        //  400 |              1           ,'                     |
        //      |                         ,                       |
        //  300 |                        ·                        |
        //      |                       '                         |
        //  200 |                     ,'           2              |
        //      |                    ,                            |
        //  100 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //    0 |                ,'      ●            ,,·''       |
        //      |               ,                ,,·''            |
        // -100 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        // -200 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        // -300 |        ,A''                                     |
        //      |      ,'                                         |
        // -400 |   ,·'                                           |
        //      | ,'                                              |
        // -500 D#------------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, -300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(-292, 135) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-292.16).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(135.29).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(167, 167) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in C-A-D-W is at ~(135, -292) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(135.29).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-292.16).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 100), // #3
        };

        //  800 X-----------------------------B-------------------Z
        //      |                            '                    |
        //  700 |              1           ,'                     |
        //      |                         ,                       |
        //  600 |                        ·                        |
        //      |                       '                         |
        //  500 |                     ,'           2              |
        //      |                    ,                            |
        //  400 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  300 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  200 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  100 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //    0 |        ,A''                                     |
        //      |      ,'                                         |
        // -100 |   ,·'                                           |
        //      | ,'                                              |
        // -200 D#------------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(8, 435) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(7.84).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(435.29).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(467, 467) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in C-A-D-W is at ~(435, 8) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(435.29).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(7.84).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(1100, 500), // #3
        };

        // 1200 X-----------------------------B-------------------Z
        //      |                            '                    |
        // 1100 |              1           ,'                     |
        //      |                         ,                       |
        // 1000 |                        ·                        |
        //      |                       '                         |
        //  900 |                     ,'           2              |
        //      |                    ,                            |
        //  800 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  700 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  600 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  500 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //  400 |        ,A''                                     |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 D#------------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(408, 835) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(407.84).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(835.29).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(867, 867) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #3 in C-A-D-W is at ~(835, 408) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(835.29).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(407.84).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 100), // #3
        };

        // 1000 D#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        'A,,                                     |
        //      |          ' ''·,,                                |
        //  700 |           ',    ''·,,                      1    |
        //      |             ,        ''·,,                      |
        //  600 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  500 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  400 |                   ·                           ''B
        //      |                    '                            |
        //  300 |                     ',           2              |
        //      |                       ,                         |
        //  200 |                        ·                        |
        //      |                         '                       |
        //  100 |              3           ',                     |
        //      |                            ,                    |
        //    0 W-----------------------------C-------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(635, 792) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(635.29).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(792.16).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(667, 333) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(208, 365) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(207.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(364.71).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(-200, -400), // #3
        };

        //  500 D#------------------------------------------------X
        //      | ',                                              |
        //  400 |   '·,                                           |
        //      |      ',                                         |
        //  300 |        'A,,                                     |
        //      |          ' ''·,,                                |
        //  200 |           ',    ''·,,                      1    |
        //      |             ,        ''·,,                      |
        //  100 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //    0 |                ',      ●            ''·,,       |
        //      |                  ,                       ''·,,  |
        // -100 |                   ·                           ''B
        //      |                    '                            |
        // -200 |                     ',           2              |
        //      |                       ,                         |
        // -300 |                        ·                        |
        //      |                         '                       |
        // -400 |              3           ',                     |
        //      |                            ,                    |
        // -500 W-----------------------------C-------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(135, 292) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(135.29).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(292.16).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(167, -167) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(-292, -135) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-292.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-135.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(100, -100), // #3
        };

        //  800 D#------------------------------------------------X
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        'A,,                                     |
        //      |          ' ''·,,                                |
        //  500 |           ',    ''·,,                      1    |
        //      |             ,        ''·,,                      |
        //  400 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  300 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  200 |                   ·                           ''B
        //      |                    '                            |
        //  100 |                     ',           2              |
        //      |                       ,                         |
        //    0 |         ●              ·                        |
        //      |                         '                       |
        // -100 |              3           ',                     |
        //      |                            ,                    |
        // -200 W-----------------------------C-------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(435, 592) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(435.29).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(592.16).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(467, 133) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(8, 165) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(7.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(164.71).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1200 D#------------------------------------------------X
        //      | ',                                              |
        // 1100 |   '·,                                           |
        //      |      ',                                         |
        // 1000 |        'A,,                                     |
        //      |          ' ''·,,                                |
        //  900 |           ',    ''·,,                      1    |
        //      |             ,        ''·,,                      |
        //  800 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  700 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  600 |                   ·                           ''B
        //      |                    '                            |
        //  500 |                     ',           2              |
        //      |                       ,                         |
        //  400 |                        ·                        |
        //      |                         '                       |
        //  300 |              3           ',                     |
        //      |                            ,                    |
        //  200 W-----------------------------C-------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-D-A-B is at ~(835, 992) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(835.29).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(992.16).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(867, 533) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(408, 565) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(407.84).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(564.71).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(100, 700), // #3
        };

        // 1000 W------------------------------------------------#D
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                     ,,A'        |
        //      |                                ,,·'' '          |
        //  700 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  600 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  500 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  400 C''                           ·                   |
        //      |                            '                    |
        //  300 |              2           ,'                     |
        //      |                         ,                       |
        //  200 |                        ·                        |
        //      |                       '                         |
        //  100 |                     ,'           1              |
        //      |                    ,                            |
        //    0 Z-------------------B-----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(792, 365) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(792.16).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(364.71).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(333, 333) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(365, 792) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(364.71).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(792.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -400), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(-400, 200), // #3
        };

        //  500 W------------------------------------------------#D
        //      |                                              ,' |
        //  400 |                                           ,·'   |
        //      |                                         ,'      |
        //  300 |                                     ,,A'        |
        //      |                                ,,·'' '          |
        //  200 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  100 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //    0 |       ,,·''            ●      ,'                |
        //      |  ,,·''                       ,                  |
        // -100 C''                           ·                   |
        //      |                            '                    |
        // -200 |              2           ,'                     |
        //      |                         ,                       |
        // -300 |                        ·                        |
        //      |                       '                         |
        // -400 |                     ,'           1              |
        //      |                    ,                            |
        // -500 Z-------------------B-----------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -100, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(292, -135) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(292.16).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-135.29).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(-167, -167) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(-135, 292) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-135.29).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(292.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -100), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, 500), // #3
        };

        //  800 W------------------------------------------------#D
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                                     ,,A'        |
        //      |                                ,,·'' '          |
        //  500 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  400 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  300 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  200 C''                           ·                   |
        //      |                            '                    |
        //  100 |              2           ,'                     |
        //      |                         ,                       |
        //    0 |         ●              ·                        |
        //      |                       '                         |
        // -100 |                     ,'           1              |
        //      |                    ,                            |
        // -200 Z-------------------B-----------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(592, 165) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(592.16).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(164.71).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(133, 133) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(165, 592) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(164.71).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(592.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 900), // #3
        };

        // 1200 W------------------------------------------------#D
        //      |                                              ,' |
        // 1100 |                                           ,·'   |
        //      |                                         ,'      |
        // 1000 |                                     ,,A'        |
        //      |                                ,,·'' '          |
        //  900 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  800 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  700 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  600 C''                           ·                   |
        //      |                            '                    |
        //  500 |              2           ,'                     |
        //      |                         ,                       |
        //  400 |                        ·                        |
        //      |                       '                         |
        //  300 |                     ,'           1              |
        //      |                    ,                            |
        //  200 Z-------------------B-----------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in D-A-B-X is at ~(992, 565) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(992.16).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(564.71).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(533, 533) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #3 in A-D-W-C is at ~(565, 992) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(564.71).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(992.16).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 900), // #3
        };

        // 1000 Z-------------------C-----------------------------W
        //      |                    '                            |
        //  900 |                     ',           3              |
        //      |                       ,                         |
        //  800 |                        ·                        |
        //      |                         '                       |
        //  700 |              2           ',                     |
        //      |                            ,                    |
        //  600 B,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  500 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  400 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  300 |    1                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //  200 |                                     ''A,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(365, 208) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(364.71).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(207.84).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(333, 667) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #3 in W-C-A-D is at ~(792, 635) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(792.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(635.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, -200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(200, 400), // #3
        };

        //  500 Z-------------------C-----------------------------W
        //      |                    '                            |
        //  400 |                     ',           3              |
        //      |                       ,                         |
        //  300 |                        ·                        |
        //      |                         '                       |
        //  200 |              2           ',                     |
        //      |                            ,                    |
        //  100 B,,                           ·                   |
        //      |  ''·,,                       '                  |
        //    0 |       ''·,,            ●      ',                |
        //      |            ''·,,                ,               |
        // -100 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        // -200 |    1                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        // -300 |                                     ''A,        |
        //      |                                         ',      |
        // -400 |                                           '·,   |
        //      |                                              ', |
        // -500 X------------------------------------------------#D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(-135, -292) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-135.29).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-292.16).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(-167, 167) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #3 in W-C-A-D is at ~(292, 135) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(292.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(135.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 100), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(500, 700), // #3
        };

        //  800 Z-------------------C-----------------------------W
        //      |                    '                            |
        //  700 |                     ',           3              |
        //      |                       ,                         |
        //  600 |                        ·                        |
        //      |                         '                       |
        //  500 |              2           ',                     |
        //      |                            ,                    |
        //  400 B,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  300 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  200 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  100 |    1                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //    0 |         ●                           ''A,        |
        //      |                                         ',      |
        // -100 |                                           '·,   |
        //      |                                              ', |
        // -200 X------------------------------------------------#D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(165, 8) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(164.71).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(7.84).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(133, 467) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #3 in W-C-A-D is at ~(592, 435) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(592.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(435.29).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(900, 1100), // #3
        };

        // 1200 Z-------------------C-----------------------------W
        //      |                    '                            |
        // 1100 |                     ',           3              |
        //      |                       ,                         |
        // 1000 |                        ·                        |
        //      |                         '                       |
        //  900 |              2           ',                     |
        //      |                            ,                    |
        //  800 B,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  700 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  600 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  500 |    1                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //  400 |                                     ''A,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 X------------------------------------------------#D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has D"); // #1 has D
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(4), "Expected: site #3 point count 4"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-D-A is at ~(565, 408) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(564.71).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(407.84).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(533, 867) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #3 in W-C-A-D is at ~(992, 835) (using quadrilateral formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(992.16).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(835.29).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 100), // #3
        };

        // 1000 X------------------------B------------------------Z
        //      |                       '                         |
        //  900 |                     ,'                          |
        //      |                    ,                            |
        //  800 |                   ·                             |
        //      |                  '                              |
        //  700 |    1           ,'                               |
        //      |               ,                                 |
        //  600 |              ·                                  |
        //      |             '                                   |
        //  500 |           ,'           2                      ,,C
        //      |          ,                               ,,·''  |
        //  400 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  300 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  200 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  100 | ,'    ,,·''                      3              |
        //      |, ,,·''                                          |
        //    0 A##-----------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(167, 667) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(583, 583) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(583.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(583.33).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(667, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-400, 200), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(200, -400), // #3
        };

        //  500 X------------------------B------------------------Z
        //      |                       '                         |
        //  400 |                     ,'                          |
        //      |                    ,                            |
        //  300 |                   ·                             |
        //      |                  '                              |
        //  200 |    1           ,'                               |
        //      |               ,                                 |
        //  100 |              ·                                  |
        //      |             '                                   |
        //    0 |           ,'           2                      ,,C
        //      |          ,                               ,,·''  |
        // -100 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        // -200 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        // -300 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        // -400 | ,'    ,,·''                      3              |
        //      |, ,,·''                                          |
        // -500 A##-----------------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(-333, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(83, 83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(83.33).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(167, -333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, -100), // #3
        };

        //  800 X------------------------B------------------------Z
        //      |                       '                         |
        //  700 |                     ,'                          |
        //      |                    ,                            |
        //  600 |                   ·                             |
        //      |                  '                              |
        //  500 |    1           ,'                               |
        //      |               ,                                 |
        //  400 |              ·                                  |
        //      |             '                                   |
        //  300 |           ,'           2                      ,,C
        //      |          ,                               ,,·''  |
        //  200 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  100 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //    0 |    ·    ●       ,,·''                           |
        //      |   '        ,,·''                                |
        // -100 | ,'    ,,·''                      3              |
        //      |, ,,·''                                          |
        // -200 A##-----------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(-33, 467) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(383, 383) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(383.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(383.33).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(467, -33) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(900, 300), // #3
        };

        // 1200 X------------------------B------------------------Z
        //      |                       '                         |
        // 1100 |                     ,'                          |
        //      |                    ,                            |
        // 1000 |                   ·                             |
        //      |                  '                              |
        //  900 |    1           ,'                               |
        //      |               ,                                 |
        //  800 |              ·                                  |
        //      |             '                                   |
        //  700 |           ,'           2                      ,,C
        //      |          ,                               ,,·''  |
        //  600 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  500 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  400 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  300 | ,'    ,,·''                      3              |
        //      |, ,,·''                                          |
        //  200 A##-----------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(367, 867) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(783, 783) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(783.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(783.33).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(867, 367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 300), // #3
        };

        // 1000 A##-----------------------------------------------X
        //      |' ''·,,                                          |
        //  900 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  800 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  700 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  600 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  500 |           ',           2                      ''B
        //      |             ,                                   |
        //  400 |              ·                                  |
        //      |               '                                 |
        //  300 |    3           ',                               |
        //      |                  ,                              |
        //  200 |                   ·                             |
        //      |                    '                            |
        //  100 |                     ',                          |
        //      |                       ,                         |
        //    0 W------------------------C------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-B is at ~(667, 833) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(583, 417) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(583.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(416.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(167, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-400, -200), // #3
        };

        //  500 A##-----------------------------------------------X
        //      |' ''·,,                                          |
        //  400 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  300 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  200 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  100 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //    0 |           ',           2                      ''B
        //      |             ,                                   |
        // -100 |              ·                                  |
        //      |               '                                 |
        // -200 |    3           ',                               |
        //      |                  ,                              |
        // -300 |                   ·                             |
        //      |                    '                            |
        // -400 |                     ',                          |
        //      |                       ,                         |
        // -500 W------------------------C------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-B is at ~(167, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(83, -83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-83.33).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-333, -167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 100), // #3
        };

        //  800 A##-----------------------------------------------X
        //      |' ''·,,                                          |
        //  700 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  600 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  500 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  400 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  300 |           ',           2                      ''B
        //      |             ,                                   |
        //  200 |              ·                                  |
        //      |               '                                 |
        //  100 |    3           ',                               |
        //      |                  ,                              |
        //    0 |         ●         ·                             |
        //      |                    '                            |
        // -100 |                     ',                          |
        //      |                       ,                         |
        // -200 W------------------------C------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-B is at ~(467, 633) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(383, 217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(383.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-33, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-33.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1200 A##-----------------------------------------------X
        //      |' ''·,,                                          |
        // 1100 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        // 1000 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  900 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  800 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  700 |           ',           2                      ''B
        //      |             ,                                   |
        //  600 |              ·                                  |
        //      |               '                                 |
        //  500 |    3           ',                               |
        //      |                  ,                              |
        //  400 |                   ·                             |
        //      |                    '                            |
        //  300 |                     ',                          |
        //      |                       ,                         |
        //  200 W------------------------C------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-B is at ~(867, 1033) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(783, 617) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(783.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(616.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(367, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 900), // #3
        };

        // 1000 W-----------------------------------------------##A
        //      |                                          ,,·'' '|
        //  900 |              3                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  800 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  700 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  600 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  500 C''                      2           ,'           |
        //      |                                   ,             |
        //  400 |                                  ·              |
        //      |                                 '               |
        //  300 |                               ,'           1    |
        //      |                              ,                  |
        //  200 |                             ·                   |
        //      |                            '                    |
        //  100 |                          ,'                     |
        //      |                         ,                       |
        //    0 Z------------------------B------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-B-X is at ~(833, 333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(417, 417) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(416.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(416.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(333, 833) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(833.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, -200), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-200, 400), // #3
        };

        //  500 W-----------------------------------------------##A
        //      |                                          ,,·'' '|
        //  400 |              3                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  300 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  200 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  100 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //    0 C''                      2           ,'           |
        //      |                                   ,             |
        // -100 |                                  ·              |
        //      |                                 '               |
        // -200 |                               ,'           1    |
        //      |                              ,                  |
        // -300 |                             ·                   |
        //      |                            '                    |
        // -400 |                          ,'                     |
        //      |                         ,                       |
        // -500 Z------------------------B------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-B-X is at ~(333, -167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-166.67).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(-83, -83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-83.33).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-167, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(100, 700), // #3
        };

        //  800 W-----------------------------------------------##A
        //      |                                          ,,·'' '|
        //  700 |              3                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  600 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  500 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  400 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  300 C''                      2           ,'           |
        //      |                                   ,             |
        //  200 |                                  ·              |
        //      |                                 '               |
        //  100 |                               ,'           1    |
        //      |                              ,                  |
        //    0 |         ●                   ·                   |
        //      |                            '                    |
        // -100 |                          ,'                     |
        //      |                         ,                       |
        // -200 Z------------------------B------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 300), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-B-X is at ~(633, 133) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(217, 217) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(216.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(133, 633) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(633.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 1100), // #3
        };

        // 1200 W-----------------------------------------------##A
        //      |                                          ,,·'' '|
        // 1100 |              3                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        // 1000 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  900 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  800 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  700 C''                      2           ,'           |
        //      |                                   ,             |
        //  600 |                                  ·              |
        //      |                                 '               |
        //  500 |                               ,'           1    |
        //      |                              ,                  |
        //  400 |                             ·                   |
        //      |                            '                    |
        //  300 |                          ,'                     |
        //      |                         ,                       |
        //  200 Z------------------------B------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 700), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-B-X is at ~(1033, 533) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(617, 617) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(616.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(616.67).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(533, 1033) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1033.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1000 Z------------------------C------------------------W
        //      |                         '                       |
        //  900 |                          ',                     |
        //      |                            ,                    |
        //  800 |                             ·                   |
        //      |                              '                  |
        //  700 |                               ',           3    |
        //      |                                 ,               |
        //  600 |                                  ·              |
        //      |                                   '             |
        //  500 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  400 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  300 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  200 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  100 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //    0 X-----------------------------------------------##A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(333, 167) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(417, 583) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(416.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(583.33).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(833, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(833.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(400, 200), // #3
        };

        //  500 Z------------------------C------------------------W
        //      |                         '                       |
        //  400 |                          ',                     |
        //      |                            ,                    |
        //  300 |                             ·                   |
        //      |                              '                  |
        //  200 |                               ',           3    |
        //      |                                 ,               |
        //  100 |                                  ·              |
        //      |                                   '             |
        //    0 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        // -100 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        // -200 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        // -300 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        // -400 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        // -500 X-----------------------------------------------##A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(-167, -333) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-166.67).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-333.33).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(-83, 83) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-83.33).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(83.33).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(333, 167) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(166.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, -100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 500), // #3
        };

        //  800 Z------------------------C------------------------W
        //      |                         '                       |
        //  700 |                          ',                     |
        //      |                            ,                    |
        //  600 |                             ·                   |
        //      |                              '                  |
        //  500 |                               ',           3    |
        //      |                                 ,               |
        //  400 |                                  ·              |
        //      |                                   '             |
        //  300 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  200 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  100 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //    0 |         ●                 ''·,,            ·    |
        //      |                                ''·,,        '   |
        // -100 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        // -200 X-----------------------------------------------##A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 300, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(133, -33) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-33.33).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(217, 383) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(216.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(383.33).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(633, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(633.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1100, 900), // #3
        };

        // 1200 Z------------------------C------------------------W
        //      |                         '                       |
        // 1100 |                          ',                     |
        //      |                            ,                    |
        // 1000 |                             ·                   |
        //      |                              '                  |
        //  900 |                               ',           3    |
        //      |                                 ,               |
        //  800 |                                  ·              |
        //      |                                   '             |
        //  700 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  600 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  500 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  400 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  300 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //  200 X-----------------------------------------------##A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-A is at ~(533, 367) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(617, 783) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(616.67).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(783.33).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(1033, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1033.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1000 X----------------------------------B--------------Z
        //      |                                 '               |
        //  900 |                               ,'                |
        //      |                              ,                  |
        //  800 |                             ·                   |
        //      |                            '                    |
        //  700 |              1           ,'                     |
        //      |                         ,                       |
        //  600 |                        ·                        |
        //      |                       '                         |
        //  500 |                     ,'           2              |
        //      |                    ,                            |
        //  400 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  300 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  200 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  100 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //    0 Y---------A##-------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(248, 593) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(248.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(592.59).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(695, 544) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(694.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(543.59).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(733, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, -400), // #3
        };

        //  500 X----------------------------------B--------------Z
        //      |                                 '               |
        //  400 |                               ,'                |
        //      |                              ,                  |
        //  300 |                             ·                   |
        //      |                            '                    |
        //  200 |              1           ,'                     |
        //      |                         ,                       |
        //  100 |                        ·                        |
        //      |                       '                         |
        //    0 |                     ,' ●         2              |
        //      |                    ,                            |
        // -100 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        // -200 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        // -300 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        // -400 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        // -500 Y---------A##-------------------------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, -100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(-252, 93) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(92.59).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(195, 44) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(194.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(43.59).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(233, -367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-366.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, -100), // #3
        };

        //  800 X----------------------------------B--------------Z
        //      |                                 '               |
        //  700 |                               ,'                |
        //      |                              ,                  |
        //  600 |                             ·                   |
        //      |                            '                    |
        //  500 |              1           ,'                     |
        //      |                         ,                       |
        //  400 |                        ·                        |
        //      |                       '                         |
        //  300 |                     ,'           2              |
        //      |                    ,                            |
        //  200 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  100 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //    0 |         ●    ·            ,,·''                 |
        //      |             '        ,,·''                      |
        // -100 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        // -200 Y---------A##-------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(48, 393) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(48.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(392.59).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(495, 344) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(494.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(343.59).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(533, -67) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(1100, 300), // #3
        };

        // 1200 X----------------------------------B--------------Z
        //      |                                 '               |
        // 1100 |                               ,'                |
        //      |                              ,                  |
        // 1000 |                             ·                   |
        //      |                            '                    |
        //  900 |              1           ,'                     |
        //      |                         ,                       |
        //  800 |                        ·                        |
        //      |                       '                         |
        //  700 |                     ,'           2              |
        //      |                    ,                            |
        //  600 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  500 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  400 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  300 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //  200 Y---------A##-------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(448, 793) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(448.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(792.59).Within(0.01));
        // Centroid of #2 in Z-B-A-C is at ~(895, 744) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(894.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(743.59).Within(0.01));
        // Centroid of #3 in C-A-W is at ~(933, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 A,,                                               |
        //      |' ''·,,                                          |
        //  700 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  600 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  500 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  400 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  300 |           ',           2                      ''B
        //      |             ,                                   |
        //  200 |              ·                                  |
        //      |               '                                 |
        //  100 |    3           ',                               |
        //      |                  ,                              |
        //    0 W-------------------C-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-Y-A-B is at ~(593, 752) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(592.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(751.85).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(544, 305) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(543.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(305.13).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(133, 267) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(-400, -400), // #3
        };

        //  500 Y-------------------------------------------------X
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 A,,                                               |
        //      |' ''·,,                                          |
        //  200 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  100 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //    0 |      ',                ●  ''·,,                 |
        //      |        ,                       ''·,,            |
        // -100 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        // -200 |           ',           2                      ''B
        //      |             ,                                   |
        // -300 |              ·                                  |
        //      |               '                                 |
        // -400 |    3           ',                               |
        //      |                  ,                              |
        // -500 W-------------------C-----------------------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -100, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-Y-A-B is at ~(93, 252) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(92.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(251.85).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(44, -195) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(43.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-194.87).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-367, -233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-366.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(-100, -100), // #3
        };

        //  800 Y-------------------------------------------------X
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 A,,                                               |
        //      |' ''·,,                                          |
        //  500 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  400 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  300 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  200 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  100 |           ',           2                      ''B
        //      |             ,                                   |
        //    0 |         ●    ·                                  |
        //      |               '                                 |
        // -100 |    3           ',                               |
        //      |                  ,                              |
        // -200 W-------------------C-----------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-Y-A-B is at ~(393, 552) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(392.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(551.85).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(344, 105) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(343.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(105.13).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-67, 67) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1200 Y-------------------------------------------------X
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 A,,                                               |
        //      |' ''·,,                                          |
        //  900 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  800 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  700 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  600 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  500 |           ',           2                      ''B
        //      |             ,                                   |
        //  400 |              ·                                  |
        //      |               '                                 |
        //  300 |    3           ',                               |
        //      |                  ,                              |
        //  200 W-------------------C-----------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-Y-A-B is at ~(793, 952) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(792.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(951.85).Within(0.01));
        // Centroid of #2 in B-A-C-Z is at ~(744, 505) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(743.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(505.13).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(333, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 900), // #3
        };

        // 1000 W-------------------------------------##A---------Y
        //      |                                ,,·'' '          |
        //  900 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  800 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  700 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  600 C''                           ·                   |
        //      |                            '                    |
        //  500 |              2           ,'                     |
        //      |                         ,                       |
        //  400 |                        ·                        |
        //      |                       '                         |
        //  300 |                     ,'           1              |
        //      |                    ,                            |
        //  200 |                   ·                             |
        //      |                  '                              |
        //  100 |                ,'                               |
        //      |               ,                                 |
        //    0 Z--------------B----------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in Y-A-B-X is at ~(752, 407) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(751.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(407.41).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(305, 456) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(305.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(456.41).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(267, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-400, 400), // #3
        };

        //  500 W-------------------------------------##A---------Y
        //      |                                ,,·'' '          |
        //  400 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  300 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  200 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  100 C''                           ·                   |
        //      |                            '                    |
        //    0 |              2         ● ,'                     |
        //      |                         ,                       |
        // -100 |                        ·                        |
        //      |                       '                         |
        // -200 |                     ,'           1              |
        //      |                    ,                            |
        // -300 |                   ·                             |
        //      |                  '                              |
        // -400 |                ,'                               |
        //      |               ,                                 |
        // -500 Z--------------B----------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in Y-A-B-X is at ~(252, -93) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-92.59).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(-195, -44) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-194.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-43.59).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(-233, 367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(-100, 700), // #3
        };

        //  800 W-------------------------------------##A---------Y
        //      |                                ,,·'' '          |
        //  700 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  600 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  500 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  400 C''                           ·                   |
        //      |                            '                    |
        //  300 |              2           ,'                     |
        //      |                         ,                       |
        //  200 |                        ·                        |
        //      |                       '                         |
        //  100 |                     ,'           1              |
        //      |                    ,                            |
        //    0 |         ●         ·                             |
        //      |                  '                              |
        // -100 |                ,'                               |
        //      |               ,                                 |
        // -200 Z--------------B----------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in Y-A-B-X is at ~(552, 207) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(551.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(207.41).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(105, 256) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(105.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(256.41).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(67, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 1100), // #3
        };

        // 1200 W-------------------------------------##A---------Y
        //      |                                ,,·'' '          |
        // 1100 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        // 1000 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  900 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  800 C''                           ·                   |
        //      |                            '                    |
        //  700 |              2           ,'                     |
        //      |                         ,                       |
        //  600 |                        ·                        |
        //      |                       '                         |
        //  500 |                     ,'           1              |
        //      |                    ,                            |
        //  400 |                   ·                             |
        //      |                  '                              |
        //  300 |                ,'                               |
        //      |               ,                                 |
        //  200 Z--------------B----------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in Y-A-B-X is at ~(952, 607) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(951.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(607.41).Within(0.01));
        // Centroid of #2 in A-C-Z-B is at ~(505, 656) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(505.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(656.41).Within(0.01));
        // Centroid of #3 in A-W-C is at ~(467, 1067) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1066.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1000 Z-----------------------------C-------------------W
        //      |                              '                  |
        //  900 |                               ',           3    |
        //      |                                 ,               |
        //  800 |                                  ·              |
        //      |                                   '             |
        //  700 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  600 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  500 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  400 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  300 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //  200 |                                               ''A
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(407, 248) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(407.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(248.15).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(456, 695) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(456.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(694.87).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(867, 733) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(400, 400), // #3
        };

        //  500 Z-----------------------------C-------------------W
        //      |                              '                  |
        //  400 |                               ',           3    |
        //      |                                 ,               |
        //  300 |                                  ·              |
        //      |                                   '             |
        //  200 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  100 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //    0 |                 ''·,,  ●                ',      |
        //      |                      ''·,,                ,     |
        // -100 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        // -200 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        // -300 |                                               ''A
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 X-------------------------------------------------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, -300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(-93, -252) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-92.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-251.85).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(-44, 195) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-43.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(194.87).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(367, 233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(700, 700), // #3
        };

        //  800 Z-----------------------------C-------------------W
        //      |                              '                  |
        //  700 |                               ',           3    |
        //      |                                 ,               |
        //  600 |                                  ·              |
        //      |                                   '             |
        //  500 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  400 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  300 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  200 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  100 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //    0 |         ●                                     ''A
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 X-------------------------------------------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(207, 48) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(207.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(48.15).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(256, 495) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(256.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(494.87).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(667, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(1100, 1100), // #3
        };

        // 1200 Z-----------------------------C-------------------W
        //      |                              '                  |
        // 1100 |                               ',           3    |
        //      |                                 ,               |
        // 1000 |                                  ·              |
        //      |                                   '             |
        //  900 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  800 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  700 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  600 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  500 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //  400 |                                               ''A
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 X-------------------------------------------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-X-Y-A is at ~(607, 448) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(607.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(448.15).Within(0.01));
        // Centroid of #2 in C-Z-B-A is at ~(656, 895) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(656.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(894.87).Within(0.01));
        // Centroid of #3 in W-C-A is at ~(1067, 933) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1066.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1000 Z--------------B----------------------------------X
        //      |               '                                 |
        //  900 |                ',                               |
        //      |                  ,                              |
        //  800 |                   ·                             |
        //      |                    '                            |
        //  700 |                     ',           1              |
        //      |                       ,                         |
        //  600 |                        ·                        |
        //      |                         '                       |
        //  500 |              2           ',                     |
        //      |                            ,                    |
        //  400 C,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  300 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  200 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  100 |    3                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //    0 W-------------------------------------##A---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 1000), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-Y is at ~(752, 593) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(751.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(592.59).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(305, 544) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(305.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(543.59).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(267, 133) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(266.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(133.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-400, -400), // #3
        };

        //  500 Z--------------B----------------------------------X
        //      |               '                                 |
        //  400 |                ',                               |
        //      |                  ,                              |
        //  300 |                   ·                             |
        //      |                    '                            |
        //  200 |                     ',           1              |
        //      |                       ,                         |
        //  100 |                        ·                        |
        //      |                         '                       |
        //    0 |              2         ● ',                     |
        //      |                            ,                    |
        // -100 C,,                           ·                   |
        //      |  ''·,,                       '                  |
        // -200 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        // -300 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        // -400 |    3                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        // -500 W-------------------------------------##A---------Y
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -500, -100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, -500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -500, -100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-Y is at ~(252, 93) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(92.59).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(-195, 44) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-194.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(43.59).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(-233, -367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-233.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(-100, -100), // #3
        };

        //  800 Z--------------B----------------------------------X
        //      |               '                                 |
        //  700 |                ',                               |
        //      |                  ,                              |
        //  600 |                   ·                             |
        //      |                    '                            |
        //  500 |                     ',           1              |
        //      |                       ,                         |
        //  400 |                        ·                        |
        //      |                         '                       |
        //  300 |              2           ',                     |
        //      |                            ,                    |
        //  200 C,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  100 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //    0 |         ●       ''·,,            ·              |
        //      |                      ''·,,        '             |
        // -100 |    3                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        // -200 W-------------------------------------##A---------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 800), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, 800), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-Y is at ~(552, 393) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(551.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(392.59).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(105, 344) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(105.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(343.59).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(67, -67) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(66.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1200 Z--------------B----------------------------------X
        //      |               '                                 |
        // 1100 |                ',                               |
        //      |                  ,                              |
        // 1000 |                   ·                             |
        //      |                    '                            |
        //  900 |                     ',           1              |
        //      |                       ,                         |
        //  800 |                        ·                        |
        //      |                         '                       |
        //  700 |              2           ',                     |
        //      |                            ,                    |
        //  600 C,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  500 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  400 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  300 |    3                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //  200 W-------------------------------------##A---------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-B-A-Y is at ~(952, 793) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(951.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(792.59).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(505, 744) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(505.13).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(743.59).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(467, 333) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(466.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(333.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 900), // #3
        };

        // 1000 W-------------------C-----------------------------Z
        //      |                  '                              |
        //  900 |    3           ,'                               |
        //      |               ,                                 |
        //  800 |              ·                                  |
        //      |             '                                   |
        //  700 |           ,'           2                      ,,B
        //      |          ,                               ,,·''  |
        //  600 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  500 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  400 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  300 | ,'    ,,·''                      1              |
        //      |, ,,·''                                          |
        //  200 A''                                               |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1000, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 0, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-Y-X is at ~(593, 248) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(592.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(248.15).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(544, 695) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(543.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(694.87).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(133, 733) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(133.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(733.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(-400, 400), // #3
        };

        //  500 W-------------------C-----------------------------Z
        //      |                  '                              |
        //  400 |    3           ,'                               |
        //      |               ,                                 |
        //  300 |              ·                                  |
        //      |             '                                   |
        //  200 |           ,'           2                      ,,B
        //      |          ,                               ,,·''  |
        //  100 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //    0 |      ,'                ●  ,,·''                 |
        //      |     ,                ,,·''                      |
        // -100 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        // -200 | ,'    ,,·''                      1              |
        //      |, ,,·''                                          |
        // -300 A''                                               |
        //      |                                                 |
        // -400 |                                                 |
        //      |                                                 |
        // -500 Y-------------------------------------------------X
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -500, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -500, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -100, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, 500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -500, -300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -100, 500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-Y-X is at ~(93, -252) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(92.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-251.85).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(44, 195) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(43.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(194.87).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(-367, 233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-366.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(233.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-100, 700), // #3
        };

        //  800 W-------------------C-----------------------------Z
        //      |                  '                              |
        //  700 |    3           ,'                               |
        //      |               ,                                 |
        //  600 |              ·                                  |
        //      |             '                                   |
        //  500 |           ,'           2                      ,,B
        //      |          ,                               ,,·''  |
        //  400 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  300 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  200 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  100 | ,'    ,,·''                      1              |
        //      |, ,,·''                                          |
        //    0 A''       ●                                       |
        //      |                                                 |
        // -100 |                                                 |
        //      |                                                 |
        // -200 Y-------------------------------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 800, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 800, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 800), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, -200, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-Y-X is at ~(393, 48) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(392.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(48.15).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(344, 495) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(343.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(494.87).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(-67, 533) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-66.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(533.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 1100), // #3
        };

        // 1200 W-------------------C-----------------------------Z
        //      |                  '                              |
        // 1100 |    3           ,'                               |
        //      |               ,                                 |
        // 1000 |              ·                                  |
        //      |             '                                   |
        //  900 |           ,'           2                      ,,B
        //      |          ,                               ,,·''  |
        //  800 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  700 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  600 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  500 | ,'    ,,·''                      1              |
        //      |, ,,·''                                          |
        //  400 A''                                               |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 Y-------------------------------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 1200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 400), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in B-A-Y-X is at ~(793, 448) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(792.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(448.15).Within(0.01));
        // Centroid of #2 in B-Z-C-A is at ~(744, 895) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(743.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(894.87).Within(0.01));
        // Centroid of #3 in C-W-A is at ~(333, 933) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(333.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(933.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1000 Y---------A##-------------------------------------W
        //      |          ' ''·,,                                |
        //  900 |           ',    ''·,,                      3    |
        //      |             ,        ''·,,                      |
        //  800 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  700 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  600 |                   ·                           ''C
        //      |                    '                            |
        //  500 |                     ',           2              |
        //      |                       ,                         |
        //  400 |                        ·                        |
        //      |                         '                       |
        //  300 |              1           ',                     |
        //      |                            ,                    |
        //  200 |                             ·                   |
        //      |                              '                  |
        //  100 |                               ',                |
        //      |                                 ,               |
        //    0 X----------------------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 0), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1000, 600), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(248, 407) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(248.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(407.41).Within(0.01));
        // Centroid of #2 in C-A-B-Z is at ~(695, 456) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(694.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(456.41).Within(0.01));
        // Centroid of #3 in W-A-C is at ~(733, 867) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(733.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(866.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, 400), // #3
        };

        //  500 Y---------A##-------------------------------------W
        //      |          ' ''·,,                                |
        //  400 |           ',    ''·,,                      3    |
        //      |             ,        ''·,,                      |
        //  300 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  200 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  100 |                   ·                           ''C
        //      |                    '                            |
        //    0 |                     ', ●         2              |
        //      |                       ,                         |
        // -100 |                        ·                        |
        //      |                         '                       |
        // -200 |              1           ',                     |
        //      |                            ,                    |
        // -300 |                             ·                   |
        //      |                              '                  |
        // -400 |                               ',                |
        //      |                                 ,               |
        // -500 X----------------------------------B--------------Z
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, -500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, -500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, -500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, 500), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 500, 100), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, 500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(-252, -93) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-251.85).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-92.59).Within(0.01));
        // Centroid of #2 in C-A-B-Z is at ~(195, -44) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(194.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-43.59).Within(0.01));
        // Centroid of #3 in W-A-C is at ~(233, 367) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(233.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(366.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, 700), // #3
        };

        //  800 Y---------A##-------------------------------------W
        //      |          ' ''·,,                                |
        //  700 |           ',    ''·,,                      3    |
        //      |             ,        ''·,,                      |
        //  600 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  500 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  400 |                   ·                           ''C
        //      |                    '                            |
        //  300 |                     ',           2              |
        //      |                       ,                         |
        //  200 |                        ·                        |
        //      |                         '                       |
        //  100 |              1           ',                     |
        //      |                            ,                    |
        //    0 |         ●                   ·                   |
        //      |                              '                  |
        // -100 |                               ',                |
        //      |                                 ,               |
        // -200 X----------------------------------B--------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 400), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, 800), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(48, 207) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(48.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(207.41).Within(0.01));
        // Centroid of #2 in C-A-B-Z is at ~(495, 256) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(494.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(256.41).Within(0.01));
        // Centroid of #3 in W-A-C is at ~(533, 667) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(533.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(666.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(1100, 1100), // #3
        };

        // 1200 Y---------A##-------------------------------------W
        //      |          ' ''·,,                                |
        // 1100 |           ',    ''·,,                      3    |
        //      |             ,        ''·,,                      |
        // 1000 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  900 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  800 |                   ·                           ''C
        //      |                    '                            |
        //  700 |                     ',           2              |
        //      |                       ,                         |
        //  600 |                        ·                        |
        //      |                         '                       |
        //  500 |              1           ',                     |
        //      |                            ,                    |
        //  400 |                             ·                   |
        //      |                              '                  |
        //  300 |                               ',                |
        //      |                                 ,               |
        //  200 X----------------------------------B--------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 400, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 400, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 400, 1200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1200, 800), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(448, 607) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(448.15).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(607.41).Within(0.01));
        // Centroid of #2 in C-A-B-Z is at ~(895, 656) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(894.87).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(656.41).Within(0.01));
        // Centroid of #3 in W-A-C is at ~(933, 1067) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(933.33).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1066.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1000 X-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                               ,,A
        //      |                                          ,,·'' '|
        //  700 |              1                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  600 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  500 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  400 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  300 B''                      2           ,'           |
        //      |                                   ,             |
        //  200 |                                  ·              |
        //      |                                 '               |
        //  100 |                               ,'           3    |
        //      |                              ,                  |
        //    0 Z-----------------------------C-------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 800), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 0, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 800), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 800), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1000, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(407, 752) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(407.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(751.85).Within(0.01));
        // Centroid of #2 in A-B-Z-C is at ~(456, 305) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(456.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(305.13).Within(0.01));
        // Centroid of #3 in A-C-W is at ~(867, 267) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(866.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(266.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(400, -400), // #3
        };

        //  500 X-------------------------------------------------Y
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                               ,,A
        //      |                                          ,,·'' '|
        //  200 |              1                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  100 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //    0 |                 ,,·''  ●                ,'      |
        //      |            ,,·''                       ,        |
        // -100 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        // -200 B''                      2           ,'           |
        //      |                                   ,             |
        // -300 |                                  ·              |
        //      |                                 '               |
        // -400 |                               ,'           3    |
        //      |                              ,                  |
        // -500 Z-----------------------------C-------------------W
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -500, -500, 500, 500);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -500, -200), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -500, 500), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 500, 500), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -500, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, -500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -500, -500), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 300), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 100, -500), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 500, -500), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(-93, 252) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-92.59).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(251.85).Within(0.01));
        // Centroid of #2 in A-B-Z-C is at ~(-44, -195) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-43.59).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-194.87).Within(0.01));
        // Centroid of #3 in A-C-W is at ~(367, -233) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(366.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-233.33).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, -100), // #3
        };

        //  800 X-------------------------------------------------Y
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                               ,,A
        //      |                                          ,,·'' '|
        //  500 |              1                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  400 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  300 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  200 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  100 B''                      2           ,'           |
        //      |                                   ,             |
        //    0 |         ●                        ·              |
        //      |                                 '               |
        // -100 |                               ,'           3    |
        //      |                              ,                  |
        // -200 Z-----------------------------C-------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 800, 800);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 800, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, -200, 800), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 800, 800), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 800, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 800, 600), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 800, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(207, 552) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(207.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(551.85).Within(0.01));
        // Centroid of #2 in A-B-Z-C is at ~(256, 105) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(256.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(105.13).Within(0.01));
        // Centroid of #3 in A-C-W is at ~(667, 67) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(666.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(66.67).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(1100, 300), // #3
        };

        // 1200 X-------------------------------------------------Y
        //      |                                                 |
        // 1100 |                                                 |
        //      |                                                 |
        // 1000 |                                               ,,A
        //      |                                          ,,·'' '|
        //  900 |              1                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  800 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  700 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  600 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  500 B''                      2           ,'           |
        //      |                                   ,             |
        //  400 |                                  ·              |
        //      |                                 '               |
        //  300 |                               ,'           3    |
        //      |                              ,                  |
        //  200 Z-----------------------------C-------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(4), "Expected: site #1 point count 4"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has B"); // #1 has B
        Assume.That(HasPoint(sites[0].Points, 200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has Y"); // #1 has Y
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(4), "Expected: site #2 point count 4"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 1000), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has C"); // #3 has C
        Assume.That(HasPoint(sites[2].Points, 1200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-Y-X-B is at ~(607, 952) (using quadrilateral formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(607.41).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(951.85).Within(0.01));
        // Centroid of #2 in A-B-Z-C is at ~(656, 505) (using quadrilateral formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(656.41).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(505.13).Within(0.01));
        // Centroid of #3 in A-C-W is at ~(1067, 467) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1066.67).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(466.67).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1100, 100), // #3
        };

        // 1200 X-----------------------------C-----------------------------Z
        //      |                           ,'                              |
        // 1100 |    1                    ,'                                |
        //      |                        ·                                  |
        // 1000 |                      ,'                                   |
        //      |                    ,'                                     |
        //  900 |                   ·                                       |
        //      |                 ,'                                        |
        //  800 |               ,'                                          |
        //      |              ·                                            |
        //  700 |            ,'                    2                        |
        //      |          ,'                                               |
        //  600 |         ·                                                ,D
        //      |       ,'                                             ,·'' |
        //  500 |     ,'                                           ,,''     |
        //      |    ·                                         ,,·'         |
        //  400 |  ,'                                       ,·'             |
        //      |,'                                     ,·''                |
        //  300 A                                   ,,''                    |
        //      |                               ,,·'                        |
        //  200 |                            ,·'                            |
        //      |                        ,·''                               |
        //  100 |                    ,,''                              3    |
        //      |                ,,·'                                       |
        //    0 Y--------------B#-------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 1200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1200, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(200, 900) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
        // Centroid of #2 in Z-C-A-Y-B-D is at ~(630, 630) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(630.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(630.00).Within(0.01));
        // Centroid of #3 in D-B-W is at ~(900, 200) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, -500), // #3
        };

        //  600 X-----------------------------C-----------------------------Z
        //      |                           ,'                              |
        //  500 |    1                    ,'                                |
        //      |                        ·                                  |
        //  400 |                      ,'                                   |
        //      |                    ,'                                     |
        //  300 |                   ·                                       |
        //      |                 ,'                                        |
        //  200 |               ,'                                          |
        //      |              ·                                            |
        //  100 |            ,'                    2                        |
        //      |          ,'                                               |
        //    0 |         ·                   ●                            ,D
        //      |       ,'                                             ,·'' |
        // -100 |     ,'                                           ,,''     |
        //      |    ·                                         ,,·'         |
        // -200 |  ,'                                       ,·'             |
        //      |,'                                     ,·''                |
        // -300 A                                   ,,''                    |
        //      |                               ,,·'                        |
        // -400 |                            ,·'                            |
        //      |                        ,·''                               |
        // -500 |                    ,,''                              3    |
        //      |                ,,·'                                       |
        // -600 Y--------------B#-------------------------------------------W
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -600, -300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -600, 600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -600, -300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -300, -600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -300, -600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, -600), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(-400, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in Z-C-A-Y-B-D is at ~(30, 30) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(30.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(30.00).Within(0.01));
        // Centroid of #3 in D-B-W is at ~(300, -400) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-400.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, -100), // #3
        };

        // 1000 X-----------------------------C-----------------------------Z
        //      |                           ,'                              |
        //  900 |    1                    ,'                                |
        //      |                        ·                                  |
        //  800 |                      ,'                                   |
        //      |                    ,'                                     |
        //  700 |                   ·                                       |
        //      |                 ,'                                        |
        //  600 |               ,'                                          |
        //      |              ·                                            |
        //  500 |            ,'                    2                        |
        //      |          ,'                                               |
        //  400 |         ·                                                ,D
        //      |       ,'                                             ,·'' |
        //  300 |     ,'                                           ,,''     |
        //      |    ·                                         ,,·'         |
        //  200 |  ,'                                       ,·'             |
        //      |,'                                     ,·''                |
        //  100 A                                   ,,''                    |
        //      |                               ,,·'                        |
        //    0 |         ●                  ,·'                            |
        //      |                        ,·''                               |
        // -100 |                    ,,''                              3    |
        //      |                ,,·'                                       |
        // -200 Y--------------B#-------------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, 1000), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 100, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1000, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(0, 700) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #2 in Z-C-A-Y-B-D is at ~(430, 430) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(430.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(430.00).Within(0.01));
        // Centroid of #3 in D-B-W is at ~(700, 0) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
    }

    [Test]
    public void ThreePointsMeetingPastCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1300), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(1300, 300), // #3
        };

        // 1400 X-----------------------------C-----------------------------Z
        //      |                           ,'                              |
        // 1300 |    1                    ,'                                |
        //      |                        ·                                  |
        // 1200 |                      ,'                                   |
        //      |                    ,'                                     |
        // 1100 |                   ·                                       |
        //      |                 ,'                                        |
        // 1000 |               ,'                                          |
        //      |              ·                                            |
        //  900 |            ,'                    2                        |
        //      |          ,'                                               |
        //  800 |         ·                                                ,D
        //      |       ,'                                             ,·'' |
        //  700 |     ,'                                           ,,''     |
        //      |    ·                                         ,,·'         |
        //  600 |  ,'                                       ,·'             |
        //      |,'                                     ,·''                |
        //  500 A                                   ,,''                    |
        //      |                               ,,·'                        |
        //  400 |                            ,·'                            |
        //      |                        ,·''                               |
        //  300 |                    ,,''                              3    |
        //      |                ,,·'                                       |
        //  200 Y--------------B#-------------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 1400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 500, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 1400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 1400, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1400, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1400, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(400, 1100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1100.00).Within(0.01));
        // Centroid of #2 in Z-C-A-Y-B-D is at ~(830, 830) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(830.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(830.00).Within(0.01));
        // Centroid of #3 in D-B-W is at ~(1100, 400) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 1100), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1200 Y--------------A#-------------------------------------------X
        //      |                ''·,                                       |
        // 1100 |                    '',,                              1    |
        //      |                        '·,,                               |
        // 1000 |                            '·,                            |
        //      |                               ''·,                        |
        //  900 B                                   '',,                    |
        //      |',                                     '·,,                |
        //  800 |  ',                                       '·,             |
        //      |    ·                                         ''·,         |
        //  700 |     ',                                           '',,     |
        //      |       ',                                             '·,, |
        //  600 |         ·                                                'C
        //      |          ',                                               |
        //  500 |            ',                    2                        |
        //      |              ·                                            |
        //  400 |               ',                                          |
        //      |                 ',                                        |
        //  300 |                   ·                                       |
        //      |                    ',                                     |
        //  200 |                      ',                                   |
        //      |                        ·                                  |
        //  100 |    3                    ',                                |
        //      |                           ',                              |
        //    0 W-----------------------------D-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, 1200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1200, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 1200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, 1200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1200, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 900), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(900, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(900.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in C-A-Y-B-D-Z is at ~(630, 570) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(630.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(570.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(200, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(-500, -500), // #3
        };

        //  600 Y--------------A#-------------------------------------------X
        //      |                ''·,                                       |
        //  500 |                    '',,                              1    |
        //      |                        '·,,                               |
        //  400 |                            '·,                            |
        //      |                               ''·,                        |
        //  300 B                                   '',,                    |
        //      |',                                     '·,,                |
        //  200 |  ',                                       '·,             |
        //      |    ·                                         ''·,         |
        //  100 |     ',                                           '',,     |
        //      |       ',                                             '·,, |
        //    0 |         ·                   ●                            'C
        //      |          ',                                               |
        // -100 |            ',                    2                        |
        //      |              ·                                            |
        // -200 |               ',                                          |
        //      |                 ',                                        |
        // -300 |                   ·                                       |
        //      |                    ',                                     |
        // -400 |                      ',                                   |
        //      |                        ·                                  |
        // -500 |    3                    ',                                |
        //      |                           ',                              |
        // -600 W-----------------------------D-----------------------------Z
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -300, 600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, 600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, -300, 600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -600, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, -600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -600, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, -600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -600, -600), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(300, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in C-A-Y-B-D-Z is at ~(30, -30) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(30.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-30.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(-400, -300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(-100, -100), // #3
        };

        // 1000 Y--------------A#-------------------------------------------X
        //      |                ''·,                                       |
        //  900 |                    '',,                              1    |
        //      |                        '·,,                               |
        //  800 |                            '·,                            |
        //      |                               ''·,                        |
        //  700 B                                   '',,                    |
        //      |',                                     '·,,                |
        //  600 |  ',                                       '·,             |
        //      |    ·                                         ''·,         |
        //  500 |     ',                                           '',,     |
        //      |       ',                                             '·,, |
        //  400 |         ·                                                'C
        //      |          ',                                               |
        //  300 |            ',                    2                        |
        //      |              ·                                            |
        //  200 |               ',                                          |
        //      |                 ',                                        |
        //  100 |                   ·                                       |
        //      |                    ',                                     |
        //    0 |         ●            ',                                   |
        //      |                        ·                                  |
        // -100 |    3                    ',                                |
        //      |                           ',                              |
        // -200 W-----------------------------D-----------------------------Z
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 100, 1000), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1000, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, 1000), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 100, 1000), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1000, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(700, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in C-A-Y-B-D-Z is at ~(430, 370) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(430.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(370.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(0, 100) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(0.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1300, 1300), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1400 Y--------------A#-------------------------------------------X
        //      |                ''·,                                       |
        // 1300 |                    '',,                              1    |
        //      |                        '·,,                               |
        // 1200 |                            '·,                            |
        //      |                               ''·,                        |
        // 1100 B                                   '',,                    |
        //      |',                                     '·,,                |
        // 1000 |  ',                                       '·,             |
        //      |    ·                                         ''·,         |
        //  900 |     ',                                           '',,     |
        //      |       ',                                             '·,, |
        //  800 |         ·                                                'C
        //      |          ',                                               |
        //  700 |            ',                    2                        |
        //      |              ·                                            |
        //  600 |               ',                                          |
        //      |                 ',                                        |
        //  500 |                   ·                                       |
        //      |                    ',                                     |
        //  400 |                      ',                                   |
        //      |                        ·                                  |
        //  300 |    3                    ',                                |
        //      |                           ',                              |
        //  200 W-----------------------------D-----------------------------Z
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 500, 1400), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1400, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1400, 1400), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 500, 1400), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1400, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(1100, 1200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1200.00).Within(0.01));
        // Centroid of #2 in C-A-Y-B-D-Z is at ~(830, 770) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(830.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(770.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(400, 500) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 1100), // #3
        };

        // 1200 W-------------------------------------------#B--------------Y
        //      |                                       ,·''                |
        // 1100 |    3                              ,,''                    |
        //      |                               ,,·'                        |
        // 1000 |                            ,·'                            |
        //      |                        ,·''                               |
        //  900 |                    ,,''                                   A
        //      |                ,,·'                                     ,'|
        //  800 |             ,·'                                       ,'  |
        //      |         ,·''                                         ·    |
        //  700 |     ,,''                                           ,'     |
        //      | ,,·'                                             ,'       |
        //  600 D'                                                ·         |
        //      |                                               ,'          |
        //  500 |                        2                    ,'            |
        //      |                                            ·              |
        //  400 |                                          ,'               |
        //      |                                        ,'                 |
        //  300 |                                       ·                   |
        //      |                                     ,'                    |
        //  200 |                                   ,'                      |
        //      |                                  ·                        |
        //  100 |                                ,'                    1    |
        //      |                              ,'                           |
        //    0 Z-----------------------------C-----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1200, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1200, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 1200, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 1200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 1200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 1200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 0, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(1000, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-Y-B-D-Z-C is at ~(570, 570) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(570.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(570.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(300, 1000) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(-500, 500), // #3
        };

        //  600 W-------------------------------------------#B--------------Y
        //      |                                       ,·''                |
        //  500 |    3                              ,,''                    |
        //      |                               ,,·'                        |
        //  400 |                            ,·'                            |
        //      |                        ,·''                               |
        //  300 |                    ,,''                                   A
        //      |                ,,·'                                     ,'|
        //  200 |             ,·'                                       ,'  |
        //      |         ,·''                                         ·    |
        //  100 |     ,,''                                           ,'     |
        //      | ,,·'                                             ,'       |
        //    0 D'                            ●                   ·         |
        //      |                                               ,'          |
        // -100 |                        2                    ,'            |
        //      |                                            ·              |
        // -200 |                                          ,'               |
        //      |                                        ,'                 |
        // -300 |                                       ·                   |
        //      |                                     ,'                    |
        // -400 |                                   ,'                      |
        //      |                                  ·                        |
        // -500 |                                ,'                    1    |
        //      |                              ,'                           |
        // -600 Z-----------------------------C-----------------------------X
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 600, 300), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, -600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 600, -600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 600, 300), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 300, 600), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, -600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -600, 0), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 600, 600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -600, -600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 300, 600), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -600, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -600, 600), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(400, -300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-300.00).Within(0.01));
        // Centroid of #2 in A-Y-B-D-Z-C is at ~(-30, -30) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-30.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-30.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(-300, 400) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, -100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 900), // #3
        };

        // 1000 W-------------------------------------------#B--------------Y
        //      |                                       ,·''                |
        //  900 |    3                              ,,''                    |
        //      |                               ,,·'                        |
        //  800 |                            ,·'                            |
        //      |                        ,·''                               |
        //  700 |                    ,,''                                   A
        //      |                ,,·'                                     ,'|
        //  600 |             ,·'                                       ,'  |
        //      |         ,·''                                         ·    |
        //  500 |     ,,''                                           ,'     |
        //      | ,,·'                                             ,'       |
        //  400 D'                                                ·         |
        //      |                                               ,'          |
        //  300 |                        2                    ,'            |
        //      |                                            ·              |
        //  200 |                                          ,'               |
        //      |                                        ,'                 |
        //  100 |                                       ·                   |
        //      |                                     ,'                    |
        //    0 |         ●                         ,'                      |
        //      |                                  ·                        |
        // -100 |                                ,'                    1    |
        //      |                              ,'                           |
        // -200 Z-----------------------------C-----------------------------X
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1000, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1000, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 1000, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 1000), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, 1000), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 1000), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, -200, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(800, 100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in A-Y-B-D-Z-C is at ~(370, 370) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(370.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(370.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(100, 800) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1300, 300), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 1300), // #3
        };

        // 1400 W-------------------------------------------#B--------------Y
        //      |                                       ,·''                |
        // 1300 |    3                              ,,''                    |
        //      |                               ,,·'                        |
        // 1200 |                            ,·'                            |
        //      |                        ,·''                               |
        // 1100 |                    ,,''                                   A
        //      |                ,,·'                                     ,'|
        // 1000 |             ,·'                                       ,'  |
        //      |         ,·''                                         ·    |
        //  900 |     ,,''                                           ,'     |
        //      | ,,·'                                             ,'       |
        //  800 D'                                                ·         |
        //      |                                               ,'          |
        //  700 |                        2                    ,'            |
        //      |                                            ·              |
        //  600 |                                          ,'               |
        //      |                                        ,'                 |
        //  500 |                                       ·                   |
        //      |                                     ,'                    |
        //  400 |                                   ,'                      |
        //      |                                  ·                        |
        //  300 |                                ,'                    1    |
        //      |                              ,'                           |
        //  200 Z-----------------------------C-----------------------------X
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1400, 1100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1400, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 1400, 1100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1100, 1400), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1400, 1400), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1100, 1400), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 200, 1400), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(1200, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1200.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-Y-B-D-Z-C is at ~(770, 770) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(770.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(770.00).Within(0.01));
        // Centroid of #3 in B-W-D is at ~(500, 1200) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1200.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(1100, 1100), // #3
        };

        // 1200 Z-----------------------------D-----------------------------W
        //      |                              ',                           |
        // 1100 |                                ',                    3    |
        //      |                                  ·                        |
        // 1000 |                                   ',                      |
        //      |                                     ',                    |
        //  900 |                                       ·                   |
        //      |                                        ',                 |
        //  800 |                                          ',               |
        //      |                                            ·              |
        //  700 |                        2                    ',            |
        //      |                                               ',          |
        //  600 C,                                                ·         |
        //      | ''·,                                             ',       |
        //  500 |     '',,                                           ',     |
        //      |         '·,,                                         ·    |
        //  400 |             '·,                                       ',  |
        //      |                ''·,                                     ',|
        //  300 |                    '',,                                   B
        //      |                        '·,,                               |
        //  200 |                            '·,                            |
        //      |                               ''·,                        |
        //  100 |    1                              '',,                    |
        //      |                                       '·,,                |
        //    0 X-------------------------------------------#A--------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1200, 300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 600, 1200), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1200, 0), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 0, 1200), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1200, 300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 1200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1200, 1200), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(300, 200) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #2 in D-Z-C-A-Y-B is at ~(570, 630) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(570.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(630.00).Within(0.01));
        // Centroid of #3 in W-D-B is at ~(1000, 900) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(900.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(500, 500), // #3
        };

        //  600 Z-----------------------------D-----------------------------W
        //      |                              ',                           |
        //  500 |                                ',                    3    |
        //      |                                  ·                        |
        //  400 |                                   ',                      |
        //      |                                     ',                    |
        //  300 |                                       ·                   |
        //      |                                        ',                 |
        //  200 |                                          ',               |
        //      |                                            ·              |
        //  100 |                        2                    ',            |
        //      |                                               ',          |
        //    0 C,                            ●                   ·         |
        //      | ''·,                                             ',       |
        // -100 |     '',,                                           ',     |
        //      |         '·,,                                         ·    |
        // -200 |             '·,                                       ',  |
        //      |                ''·,                                     ',|
        // -300 |                    '',,                                   B
        //      |                        '·,,                               |
        // -400 |                            '·,                            |
        //      |                               ''·,                        |
        // -500 |    1                              '',,                    |
        //      |                                       '·,,                |
        // -600 X-------------------------------------------#A--------------Y
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -600, -600, 600, 600);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 300, -600), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -600, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -600, -600), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 300, -600), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 600, -300), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 0, 600), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 600, -600), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -600, 600), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 600, -300), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 600, 600), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(-300, -400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-400.00).Within(0.01));
        // Centroid of #2 in D-Z-C-A-Y-B is at ~(-30, 30) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-30.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(30.00).Within(0.01));
        // Centroid of #3 in W-D-B is at ~(400, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1000 Z-----------------------------D-----------------------------W
        //      |                              ',                           |
        //  900 |                                ',                    3    |
        //      |                                  ·                        |
        //  800 |                                   ',                      |
        //      |                                     ',                    |
        //  700 |                                       ·                   |
        //      |                                        ',                 |
        //  600 |                                          ',               |
        //      |                                            ·              |
        //  500 |                        2                    ',            |
        //      |                                               ',          |
        //  400 C,                                                ·         |
        //      | ''·,                                             ',       |
        //  300 |     '',,                                           ',     |
        //      |         '·,,                                         ·    |
        //  200 |             '·,                                       ',  |
        //      |                ''·,                                     ',|
        //  100 |                    '',,                                   B
        //      |                        '·,,                               |
        //    0 |         ●                  '·,                            |
        //      |                               ''·,                        |
        // -100 |    1                              '',,                    |
        //      |                                       '·,,                |
        // -200 X-------------------------------------------#A--------------Y
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 1000, 1000);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1000, 100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 400, 1000), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1000, -200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, -200, 1000), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1000, 100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 1000), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1000, 1000), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(100, 0) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(0.00).Within(0.01));
        // Centroid of #2 in D-Z-C-A-Y-B is at ~(370, 430) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(370.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(430.00).Within(0.01));
        // Centroid of #3 in W-D-B is at ~(800, 700) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(1300, 1300), // #3
        };

        // 1400 Z-----------------------------D-----------------------------W
        //      |                              ',                           |
        // 1300 |                                ',                    3    |
        //      |                                  ·                        |
        // 1200 |                                   ',                      |
        //      |                                     ',                    |
        // 1100 |                                       ·                   |
        //      |                                        ',                 |
        // 1000 |                                          ',               |
        //      |                                            ·              |
        //  900 |                        2                    ',            |
        //      |                                               ',          |
        //  800 C,                                                ·         |
        //      | ''·,                                             ',       |
        //  700 |     '',,                                           ',     |
        //      |         '·,,                                         ·    |
        //  600 |             '·,                                       ',  |
        //      |                ''·,                                     ',|
        //  500 |                    '',,                                   B
        //      |                        '·,,                               |
        //  400 |                            '·,                            |
        //      |                               ''·,                        |
        //  300 |    1                              '',,                    |
        //      |                                       '·,,                |
        //  200 X-------------------------------------------#A--------------Y
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1400, 1400);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1100, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(6), "Expected: site #2 point count 6"); // #2
        Assume.That(HasPoint(sites[1].Points, 1100, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1400, 500), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(HasPoint(sites[1].Points, 800, 1400), Is.True, "Expected: site #2 has D"); // #2 has D
        Assume.That(HasPoint(sites[1].Points, 1400, 200), Is.True, "Expected: site #2 has Y"); // #2 has Y
        Assume.That(HasPoint(sites[1].Points, 200, 1400), Is.True, "Expected: site #2 has Z"); // #2 has Z
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1400, 500), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 1400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(HasPoint(sites[2].Points, 1400, 1400), Is.True, "Expected: site #3 has W"); // #3 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(500, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in D-Z-C-A-Y-B is at ~(770, 830) (using generic closed polygon formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(770.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(830.00).Within(0.01));
        // Centroid of #3 in W-D-B is at ~(1200, 1100) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(1200.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(1100.00).Within(0.01));
    }

    [Test]
    public void FourPointsMeetingAtCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(400, 700), // #2
            new VoronoiSite(700, 400), // #3
            new VoronoiSite(800, 100), // #4
        };

        //  900 X--------------C----------------------------#B
        //      |             ·                           ,' |
        //  800 |    1       ·                         ,·'   |
        //      |            ·                       ,'      |
        //  700 |           ·       2             ,·'        |
        //      |          ·                    ,'           |
        //  600 |         ·                  ,·'             |
        //      |        ·                 ,'                |
        //  500 |       ·               ,·'                  |
        //      |       ·             ,'                     |
        //  400 |      ·           ,·'             3         |
        //      |     ·          ,'                          |
        //  300 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''   |
        //  200 |  ·     ,·'               ,,,·'''           |
        //      |  ·   ,'          ,,,··'''                  |
        //  100 | · ,·'     ,,,·'''                     4    |
        //      |·,',,,··'''                                 |
        //    0 A###-----------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 300, 900), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 900), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 300, 900), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 900), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 900, 300), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 900, 300), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 900, 0), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(100, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(400, 600) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #3 in B-A-D is at ~(600, 400) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #4 in D-A-W is at ~(600, 100) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    [Test]
    public void FourPointsMeetingAtCorner_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-350, 350), // #1
            new VoronoiSite(-50, 250), // #2
            new VoronoiSite(250, -50), // #3
            new VoronoiSite(350, -350), // #4
        };

        //      #--------------#---------------------------## 
        //  400 |             ·                          ,, | 
        //      |            ·                        ,··   | 
        //  300 |            ·                      ,,      | 
        //      |           ·                    ,··        | 
        //  200 |          ·                   ,,           | 
        //      |         ·                  ··             | 
        //  100 |        ·                ,,'               | 
        //      |       ·               ··                  | 
        //    0 |       ·            ,''                    | 
        //      |      ·           ··                       | 
        // -100 |     ·         ,,'                         | 
        //      |    ·        ··                         ,,,# 
        // -200 |   ·      ,,'                   ,,,···''   | 
        //      |  ·     ··               ,,,··''           | 
        // -300 |  ·   ,'          ,,···''                  | 
        //      | · ··'    ,,,··'''                         | 
        // -400 |·,',,···''                                 | 
        //      ####----------------------------------------#→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -450, -450, 450, 450);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -450, -450), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -150, 450), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -450, 450), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -450, -450), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 450, 450), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -150, 450), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -450, -450), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 450, 450), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 450, -150), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -450, -450), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 450, -150), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 450, -450), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(-350, 150) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(-50, 150) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #3 in B-A-D is at ~(150, -50) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #4 in D-A-W is at ~(150, -350) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
    }

    [Test]
    public void FourPointsMeetingAtCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, 600), // #1
            new VoronoiSite(200, 500), // #2
            new VoronoiSite(500, 200), // #3
            new VoronoiSite(600, -100), // #4
        };

        //  700 X--------------C----------------------------#B
        //      |             ·                           ,' |
        //  600 |    1       ·                         ,·'   |
        //      |            ·                       ,'      |
        //  500 |           ·       2             ,·'        |
        //      |          ·                    ,'           |
        //  400 |         ·                  ,·'             |
        //      |        ·                 ,'                |
        //  300 |       ·               ,·'                  |
        //      |       ·             ,'                     |
        //  200 |      ·           ,·'             3         |
        //      |     ·          ,'                          |
        //  100 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''   |
        //    0 |  ·     ,·'               ,,,·'''           |
        //      |  ·   ,'          ,,,··'''                  |
        // -100 | · ,·'     ,,,·'''                     4    |
        //      |·,',,,··'''                                 |
        // -200 A###-----------------------------------------W
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 700, 700);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 100, 700), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, 700), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 100, 700), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 700, 100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 700, 100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 700, -200), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(-100, 400) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(200, 400) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #3 in B-A-D is at ~(400, 200) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #4 in D-A-W is at ~(400, -100) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
    }

    [Test]
    public void FourPointsMeetingAtCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1000), // #1
            new VoronoiSite(600, 900), // #2
            new VoronoiSite(900, 600), // #3
            new VoronoiSite(1000, 300), // #4
        };

        // 1100 X--------------C----------------------------#B
        //      |             ·                           ,' |
        // 1000 |    1       ·                         ,·'   |
        //      |            ·                       ,'      |
        //  900 |           ·       2             ,·'        |
        //      |          ·                    ,'           |
        //  800 |         ·                  ,·'             |
        //      |        ·                 ,'                |
        //  700 |       ·               ,·'                  |
        //      |       ·             ,'                     |
        //  600 |      ·           ,·'             3         |
        //      |     ·          ,'                          |
        //  500 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''   |
        //  400 |  ·     ,·'               ,,,·'''           |
        //      |  ·   ,'          ,,,··'''                  |
        //  300 | · ,·'     ,,,·'''                     4    |
        //      |·,',,,··'''                                 |
        //  200 A###-----------------------------------------W
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1100, 1100);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 500, 1100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 1100), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1100, 1100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 500, 1100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1100, 1100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 1100, 500), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 1100, 500), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1100, 200), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(300, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(600, 800) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #3 in B-A-D is at ~(800, 600) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #4 in D-A-W is at ~(800, 300) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(400, 200), // #3
            new VoronoiSite(100, 100), // #4
        };

        //  900 A###-----------------------------------------X
        //      |·','''··,,,                                 |
        //  800 | · '·,     '''·,,,                     1    |
        //      |  ·   ',          '''··,,,                  |
        //  700 |  ·     '·,               '''·,,,           |
        //      |   ·       ',                    '''··,,,   |
        //  600 |    ·        '·,                         '''C
        //      |     ·          ',                          |
        //  500 |      ·           '·,             2         |
        //      |       ·             ',                     |
        //  400 |       ·               '·,                  |
        //      |        ·                 ',                |
        //  300 |         ·                  '·,             |
        //      |          ·                    ',           |
        //  200 |           ·       3             '·,        |
        //      |            ·                       ',      |
        //  100 |    4       ·                         '·,   |
        //      |             ·                           ', |
        //    0 W--------------D----------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 0, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 900, 600), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 900, 900), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 0, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 900, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 900, 600), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 0, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 900, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 300, 0), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 0, 900), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 300, 0), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 0), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(600, 800) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #2 in C-A-B is at ~(600, 500) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(400, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(100, 300) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(350, 350), // #1
            new VoronoiSite(250, 50), // #2
            new VoronoiSite(-50, -250), // #3
            new VoronoiSite(-350, -350), // #4
        };

        //      ####----------------------------------------# 
        //  400 |·',''···,,                                 | 
        //      | · ··,    '''··,,,                         | 
        //  300 |  ·   ',          ''···,,                  | 
        //      |  ·     ··               '''··,,           | 
        //  200 |   ·      '',                   '''···,,   | 
        //      |    ·        ··                         '''# 
        //  100 |     ·         '',                         | 
        //      |      ·           ··                       | 
        //    0 |       ·            ',,                    | 
        //      |       ·               ··                  | 
        // -100 |        ·                '',               | 
        //      |         ·                  ··             | 
        // -200 |          ·                   ''           | 
        //      |           ·                    '··        | 
        // -300 |            ·                      ''      | 
        //      |            ·                        '··   | 
        // -400 |             ·                          '' | 
        //      #--------------#---------------------------##→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -450, -450, 450, 450);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -450, 450), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 450, 150), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 450, 450), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -450, 450), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 450, -450), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 450, 150), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -450, 450), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 450, -450), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -150, -450), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -450, 450), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -150, -450), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -450, -450), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(150, 350) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
        // Centroid of #2 in C-A-B is at ~(150, 50) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(-50, -150) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(-150.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(-350, -150) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(-150.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(200, 0), // #3
            new VoronoiSite(-100, -100), // #4
        };

        //  700 A###-----------------------------------------X
        //      |·','''··,,,                                 |
        //  600 | · '·,     '''·,,,                     1    |
        //      |  ·   ',          '''··,,,                  |
        //  500 |  ·     '·,               '''·,,,           |
        //      |   ·       ',                    '''··,,,   |
        //  400 |    ·        '·,                         '''C
        //      |     ·          ',                          |
        //  300 |      ·           '·,             2         |
        //      |       ·             ',                     |
        //  200 |       ·               '·,                  |
        //      |        ·                 ',                |
        //  100 |         ·                  '·,             |
        //      |          ·                    ',           |
        //    0 |         ● ·       3             '·,        |
        //      |            ·                       ',      |
        // -100 |    4       ·                         '·,   |
        //      |             ·                           ', |
        // -200 W--------------D----------------------------#B
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 700, 700);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, -200, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 700, 400), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, -200, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 700, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 700, 400), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, -200, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 700, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 100, -200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, -200, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 100, -200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -200, -200), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(400, 600) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #2 in C-A-B is at ~(400, 300) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(400.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(200, 100) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(200.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(-100, 100) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-100.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(600, 400), // #3
            new VoronoiSite(300, 300), // #4
        };

        // 1100 A###-----------------------------------------X
        //      |·','''··,,,                                 |
        // 1000 | · '·,     '''·,,,                     1    |
        //      |  ·   ',          '''··,,,                  |
        //  900 |  ·     '·,               '''·,,,           |
        //      |   ·       ',                    '''··,,,   |
        //  800 |    ·        '·,                         '''C
        //      |     ·          ',                          |
        //  700 |      ·           '·,             2         |
        //      |       ·             ',                     |
        //  600 |       ·               '·,                  |
        //      |        ·                 ',                |
        //  500 |         ·                  '·,             |
        //      |          ·                    ',           |
        //  400 |           ·       3             '·,        |
        //      |            ·                       ',      |
        //  300 |    4       ·                         '·,   |
        //      |             ·                           ', |
        //  200 W--------------D----------------------------#B
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1100, 1100);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 200, 1100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 1100, 800), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1100, 1100), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 200, 1100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 1100, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 1100, 800), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 200, 1100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 1100, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 500, 200), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 200, 1100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 500, 200), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 200), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in X-A-C is at ~(800, 1000) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
        // Centroid of #2 in C-A-B is at ~(800, 700) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(600, 500) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(300, 500) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(500, 200), // #2
            new VoronoiSite(200, 500), // #3
            new VoronoiSite(100, 800), // #4
        };

        //  900 W-----------------------------------------###A
        //      |                                 ,,,··''','·|
        //  800 |    4                     ,,,·'''     ,·' · |
        //      |                  ,,,··'''          ,'   ·  |
        //  700 |           ,,,·'''               ,·'     ·  |
        //      |   ,,,··'''                    ,'       ·   |
        //  600 D'''                         ,·'        ·    |
        //      |                          ,'          ·     |
        //  500 |         3             ,·'           ·      |
        //      |                     ,'             ·       |
        //  400 |                  ,·'               ·       |
        //      |                ,'                 ·        |
        //  300 |             ,·'                  ·         |
        //      |           ,'                    ·          |
        //  200 |        ,·'             2       ·           |
        //      |      ,'                       ·            |
        //  100 |   ,·'                         ·       1    |
        //      | ,'                           ·             |
        //    0 B#----------------------------C--------------X
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 900), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 600, 0), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 900, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 900), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 0), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 600, 0), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 900), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 0), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 0, 600), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 900, 900), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 0, 600), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 0, 900), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(800, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in A-B-C is at ~(500, 300) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(300, 500) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(300, 800) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(350, -350), // #1
            new VoronoiSite(50, -250), // #2
            new VoronoiSite(-250, 50), // #3
            new VoronoiSite(-350, 350), // #4
        };

        //      #----------------------------------------#### 
        //  400 |                                 ,,···'','·| 
        //      |                         ,,,··'''    ,·· · | 
        //  300 |                  ,,···''          ,'   ·  | 
        //      |           ,,··'''               ··     ·  | 
        //  200 |   ,,···'''                   ,''      ·   | 
        //      #'''                         ··        ·    | 
        //  100 |                         ,''         ·     | 
        //      |                       ··           ·      | 
        //    0 |                    ,,'            ·       | 
        //      |                  ··               ·       | 
        // -100 |               ,''                ·        | 
        //      |             ··                  ·         | 
        // -200 |           ''                   ·          | 
        //      |        ··'                    ·           | 
        // -300 |      ''                      ·            | 
        //      |   ··'                        ·            | 
        // -400 | ''                          ·             | 
        //      ##---------------------------#--------------#→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -450, -450, 450, 450);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 450, 450), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 150, -450), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 450, -450), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 450, 450), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -450, -450), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 150, -450), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 450, 450), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -450, -450), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -450, 150), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 450, 450), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -450, 150), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -450, 450), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(350, -150) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-150.00).Within(0.01));
        // Centroid of #2 in A-B-C is at ~(50, -150) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-150.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(-150, 50) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(-150.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(50.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(-150, 350) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(-150.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(350.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, -100), // #1
            new VoronoiSite(300, 0), // #2
            new VoronoiSite(0, 300), // #3
            new VoronoiSite(-100, 600), // #4
        };

        //  700 W-----------------------------------------###A
        //      |                                 ,,,··''','·|
        //  600 |    4                     ,,,·'''     ,·' · |
        //      |                  ,,,··'''          ,'   ·  |
        //  500 |           ,,,·'''               ,·'     ·  |
        //      |   ,,,··'''                    ,'       ·   |
        //  400 D'''                         ,·'        ·    |
        //      |                          ,'          ·     |
        //  300 |         3             ,·'           ·      |
        //      |                     ,'             ·       |
        //  200 |                  ,·'               ·       |
        //      |                ,'                 ·        |
        //  100 |             ,·'                  ·         |
        //      |           ,'                    ·          |
        //    0 |        ,·'             2       ·           |
        //      |      ,'                       ·            |
        // -100 |   ,·'                         ·       1    |
        //      | ,'                           ·             |
        // -200 B#----------------------------C--------------X
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 700, 700);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, 700), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 400, -200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 700, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, 700), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, -200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 400, -200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, 700), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, -200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, -200, 400), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, -200, 400), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, -200, 700), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(600, 100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in A-B-C is at ~(300, 100) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(100, 300) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(100, 600) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 300), // #1
            new VoronoiSite(700, 400), // #2
            new VoronoiSite(400, 700), // #3
            new VoronoiSite(300, 1000), // #4
        };

        // 1100 W-----------------------------------------###A
        //      |                                 ,,,··''','·|
        // 1000 |    4                     ,,,·'''     ,·' · |
        //      |                  ,,,··'''          ,'   ·  |
        //  900 |           ,,,·'''               ,·'     ·  |
        //      |   ,,,··'''                    ,'       ·   |
        //  800 D'''                         ,·'        ·    |
        //      |                          ,'          ·     |
        //  700 |         3             ,·'           ·      |
        //      |                     ,'             ·       |
        //  600 |                  ,·'               ·       |
        //      |                ,'                 ·        |
        //  500 |             ,·'                  ·         |
        //      |           ,'                    ·          |
        //  400 |        ,·'             2       ·           |
        //      |      ,'                       ·            |
        //  300 |   ,·'                         ·       1    |
        //      | ,'                           ·             |
        //  200 B#----------------------------C--------------X
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1100, 1100);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1100, 1100), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 800, 200), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 1100, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1100, 1100), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 200), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 800, 200), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1100, 1100), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 200), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 200, 800), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 1100, 1100), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 200, 800), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 200, 1100), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in A-C-X is at ~(1000, 500) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #2 in A-B-C is at ~(700, 500) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(500.00).Within(0.01));
        // Centroid of #3 in A-D-B is at ~(500, 700) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(700.00).Within(0.01));
        // Centroid of #4 in A-W-D is at ~(500, 1000) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(1000.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(800, 800), // #4
        };

        //  900 B#----------------------------D--------------W
        //      | ',                           ·             |
        //  800 |   '·,                         ·       4    |
        //      |      ',                       ·            |
        //  700 |        '·,             3       ·           |
        //      |           ',                    ·          |
        //  600 |             '·,                  ·         |
        //      |                ',                 ·        |
        //  500 |                  '·,               ·       |
        //      |                     ',             ·       |
        //  400 |         2             '·,           ·      |
        //      |                          ',          ·     |
        //  300 C,,,                         '·,        ·    |
        //      |   '''··,,,                    ',       ·   |
        //  200 |           '''·,,,               '·,     ·  |
        //      |                  '''··,,,          ',   ·  |
        //  100 |    1                     '''·,,,     '·, · |
        //      |                                 '''··,,,',·|
        //    0 X-----------------------------------------###A
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 900, 0), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 0, 300), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 0, 0), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 900, 0), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 0, 900), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 0, 300), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 900, 0), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 0, 900), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 600, 900), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 900, 0), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 600, 900), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 900, 900), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(300, 100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(100.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(300, 400) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #3 in D-B-A is at ~(500, 600) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #4 in W-D-A is at ~(800, 600) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(800.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-350, -350), // #1
            new VoronoiSite(-250, -50), // #2
            new VoronoiSite(50, 250), // #3
            new VoronoiSite(350, 350), // #4
        };

        //      ##---------------------------#--------------# 
        //  400 | ,,                          ·             | 
        //      |   ··,                        ·            | 
        //  300 |      ,,                      ·            | 
        //      |        ··,                    ·           | 
        //  200 |           ,,                   ·          | 
        //      |             ··                  ·         | 
        //  100 |               ',,                ·        | 
        //      |                  ··               ·       | 
        //    0 |                    '',            ·       | 
        //      |                       ··           ·      | 
        // -100 |                         ',,         ·     | 
        //      #,,,                         ··        ·    | 
        // -200 |   ''···,,,                   ',,      ·   | 
        //      |           ''··,,,               ··     ·  | 
        // -300 |                  ''···,,          ',   ·  | 
        //      |                         '''··,,,    '·· · | 
        // -400 |                                 ''···,,',·| 
        //      #----------------------------------------####→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -450, -450, 450, 450);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 450, -450), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -450, -150), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -450, -450), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 450, -450), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -450, 450), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -450, -150), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 450, -450), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -450, 450), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 150, 450), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 450, -450), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 150, 450), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 450, 450), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(-150, -350) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(-150.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-350.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(-150, -50) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(-150.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(-50.00).Within(0.01));
        // Centroid of #3 in D-B-A is at ~(50, 150) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(50.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
        // Centroid of #4 in W-D-A is at ~(350, 150) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(350.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(150.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(600, 600), // #4
        };

        //  700 B#----------------------------D--------------W
        //      | ',                           ·             |
        //  600 |   '·,                         ·       4    |
        //      |      ',                       ·            |
        //  500 |        '·,             3       ·           |
        //      |           ',                    ·          |
        //  400 |             '·,                  ·         |
        //      |                ',                 ·        |
        //  300 |                  '·,               ·       |
        //      |                     ',             ·       |
        //  200 |         2             '·,           ·      |
        //      |                          ',          ·     |
        //  100 C,,,                         '·,        ·    |
        //      |   '''··,,,                    ',       ·   |
        //    0 |         ● '''·,,,               '·,     ·  |
        //      |                  '''··,,,          ',   ·  |
        // -100 |    1                     '''·,,,     '·, · |
        //      |                                 '''··,,,',·|
        // -200 X-----------------------------------------###A
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, -200, -200, 700, 700);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 700, -200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, -200, 100), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, -200, -200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 700, -200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, -200, 700), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, -200, 100), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 700, -200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, -200, 700), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 400, 700), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 700, -200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 400, 700), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 700, 700), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(100, -100) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(-100.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(100, 200) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(100.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(200.00).Within(0.01));
        // Centroid of #3 in D-B-A is at ~(300, 400) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(300.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
        // Centroid of #4 in W-D-A is at ~(600, 400) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(600.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(400.00).Within(0.01));
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(1000, 1000), // #4
        };

        // 1100 B#----------------------------D--------------W
        //      | ',                           ·             |
        // 1000 |   '·,                         ·       4    |
        //      |      ',                       ·            |
        //  900 |        '·,             3       ·           |
        //      |           ',                    ·          |
        //  800 |             '·,                  ·         |
        //      |                ',                 ·        |
        //  700 |                  '·,               ·       |
        //      |                     ',             ·       |
        //  600 |         2             '·,           ·      |
        //      |                          ',          ·     |
        //  500 C,,,                         '·,        ·    |
        //      |   '''··,,,                    ',       ·   |
        //  400 |           '''·,,,               '·,     ·  |
        //      |                  '''··,,,          ',   ·  |
        //  300 |    1                     '''·,,,     '·, · |
        //      |                                 '''··,,,',·|
        //  200 X-----------------------------------------###A
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 200, 200, 1100, 1100);

        // Assume

        Assume.That(sites[0].Points, Is.Not.Null);
        Assume.That(sites[0].Points.Count(), Is.EqualTo(3), "Expected: site #1 point count 3"); // #1
        Assume.That(HasPoint(sites[0].Points, 1100, 200), Is.True, "Expected: site #1 has A"); // #1 has A
        Assume.That(HasPoint(sites[0].Points, 200, 500), Is.True, "Expected: site #1 has C"); // #1 has C
        Assume.That(HasPoint(sites[0].Points, 200, 200), Is.True, "Expected: site #1 has X"); // #1 has X
        Assume.That(sites[1].Points, Is.Not.Null);
        Assume.That(sites[1].Points.Count(), Is.EqualTo(3), "Expected: site #2 point count 3"); // #2
        Assume.That(HasPoint(sites[1].Points, 1100, 200), Is.True, "Expected: site #2 has A"); // #2 has A
        Assume.That(HasPoint(sites[1].Points, 200, 1100), Is.True, "Expected: site #2 has B"); // #2 has B
        Assume.That(HasPoint(sites[1].Points, 200, 500), Is.True, "Expected: site #2 has C"); // #2 has C
        Assume.That(sites[2].Points, Is.Not.Null);
        Assume.That(sites[2].Points.Count(), Is.EqualTo(3), "Expected: site #3 point count 3"); // #3
        Assume.That(HasPoint(sites[2].Points, 1100, 200), Is.True, "Expected: site #3 has A"); // #3 has A
        Assume.That(HasPoint(sites[2].Points, 200, 1100), Is.True, "Expected: site #3 has B"); // #3 has B
        Assume.That(HasPoint(sites[2].Points, 800, 1100), Is.True, "Expected: site #3 has D"); // #3 has D
        Assume.That(sites[3].Points, Is.Not.Null);
        Assume.That(sites[3].Points.Count(), Is.EqualTo(3), "Expected: site #4 point count 3"); // #4
        Assume.That(HasPoint(sites[3].Points, 1100, 200), Is.True, "Expected: site #4 has A"); // #4 has A
        Assume.That(HasPoint(sites[3].Points, 800, 1100), Is.True, "Expected: site #4 has D"); // #4 has D
        Assume.That(HasPoint(sites[3].Points, 1100, 1100), Is.True, "Expected: site #4 has W"); // #4 has W

        // Assert

        // Centroid of #1 in C-X-A is at ~(500, 300) (using triangle formula)
        Assert.That(sites[0].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[0].Centroid.Y, Is.EqualTo(300.00).Within(0.01));
        // Centroid of #2 in B-C-A is at ~(500, 600) (using triangle formula)
        Assert.That(sites[1].Centroid.X, Is.EqualTo(500.00).Within(0.01));
        Assert.That(sites[1].Centroid.Y, Is.EqualTo(600.00).Within(0.01));
        // Centroid of #3 in D-B-A is at ~(700, 800) (using triangle formula)
        Assert.That(sites[2].Centroid.X, Is.EqualTo(700.00).Within(0.01));
        Assert.That(sites[2].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
        // Centroid of #4 in W-D-A is at ~(1000, 800) (using triangle formula)
        Assert.That(sites[3].Centroid.X, Is.EqualTo(1000.00).Within(0.01));
        Assert.That(sites[3].Centroid.Y, Is.EqualTo(800.00).Within(0.01));
    }

}
