using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using SharpVoronoiLib.Exceptions;
using static SharpVoronoiLib.UnitTests.CommonTestUtilities;

#pragma warning disable
// ReSharper disable All

namespace SharpVoronoiLib.UnitTests;

/// <summary>
/// These tests assert that <see cref="VoronoiPoint"/>`s have expected <see cref="VoronoiEdge"/>`s.
/// Specifically, that the <see cref="VoronoiPoint.Edges"/> contains the expected edges.
/// These tests are run without generating the border edges, i.e. <see cref="BorderEdgeGeneration.DoNotMakeBorderEdges"/>.
/// </summary>
/// <remarks>
/// This is an AUTO-GENERATED test fixture class from UnitTestGenerator.
/// This is one of the several auto-generated fixture classes each checking a different part of the algorithm's result.
/// It contains a bunch of known Voronoi site layouts, including many edge cases.
/// </remarks>
[Parallelizable(ParallelScope.All)]
[TestFixture]
public class GeneratedTest_PointEdges_OpenBorders
{
    [Test]
    public void NoPoints()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites = [ ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites = [ ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites = [ ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void NoPoints_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites = [ ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        1                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        1                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        1                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                        1                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 500), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |         1                                        
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 0), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         1              ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 300), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |         1                                        
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 700), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |         1                                        
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 800), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                        1                         
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 300), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        1                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 600), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                        1                         
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                        1                         
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 500), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                       1          
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 0), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●              1          
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 300), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                       1          
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 700), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                       1          
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 200), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                        1                         
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -300), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                        1                         
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 0), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●              1                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 400), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                        1                         
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointArbitrary()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 700), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |         1                                        
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointArbitrary_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |         1                                        
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointArbitrary_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 500), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |         1                                        
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointArbitrary_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 900), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |         1                                        
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 800), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                  1               
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 300), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                  1               
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 600), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                  1               
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                  1               
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 300), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                       1          
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                       1          
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 100), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                       1          
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 500), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                       1          
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 200), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |              1                                   
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -300), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |              1                                   
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 0), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●    1                                   
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 400), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |              1                                   
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderCentered()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 500), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderCentered_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 0), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 1                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderCentered_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 300), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 1                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderCentered_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 700), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 1                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                        1                         
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                        1                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 800), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                        1                         
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                        1                         
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 500), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                 1
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 0), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                        1
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 300), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                 1
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 700), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                 1
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 0), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●------------------------1------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └------------------------1------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -200), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └------------------------1------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └------------------------1------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderOffset()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 700), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 1                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderOffset_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 1                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 500), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointOnBorderOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 900), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 1                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                  1               
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                  1               
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 800), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                  1               
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 1200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                  1               
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 300), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                 1
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                 1
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 100), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                 1
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 500), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                 1
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 0), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●--------------1----------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └--------------1----------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, -200), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └--------------1----------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └--------------1----------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 700), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                 1
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                 1
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 500), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                 1
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 900), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                 1
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 0), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●----------------------------------1--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └----------------------------------1--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -200), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └----------------------------------1--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └----------------------------------1--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 300), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 1                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -200), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 1                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 100), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 1                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 500), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑              1                                   
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑              1                                   
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 800), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑              1                                   
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 1200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑              1                                   
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 1-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 1-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 1-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void OnePointInCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 1-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1000 1                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
        ];
        plane.SetSites(sites);

        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
        ];
        plane.SetSites(sites);

        //  800 1                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
        ];
        plane.SetSites(sites);

        // 1200 1                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                 1
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                 1
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                 1
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                 1
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 0), // #1
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -500), // #1
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, -200), // #1
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 200), // #1
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(0), "Expected: point count 0");
        Assume.That(edges.Count, Is.EqualTo(0), "Expected: edge count 0");
        Assume.That(edges, Is.Not.Null);

        // Assert

        // There are no points, so nothing to check
        Assert.Pass();
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 300), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                        1                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        2                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(0, -200), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                        1                         
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 A------------------------●------------------------B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                        2                         
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 0, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 100), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        1                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 A-------------------------------------------------B
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                        2                         
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 300, 800, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(700, 500), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                        1                         
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        2                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 700, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(300, 500), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                        A                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              2         |         1               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(-200, 0), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                        A                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |              2         ●         1               
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(100, 300), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                        A                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              2         |         1               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(500, 700), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                        A                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              2         |         1               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                        1                         
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        2                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                        1                         
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 A-------------------------------------------------B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        2                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 200, 500, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                        1                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        2                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 500, 800, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(700, 700), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                        1                         
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 A-------------------------------------------------B
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                        2                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 900, 1200, 900), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                  A               
        //      |                                  |               
        //  900 |                                  |               
        //      |                                  |               
        //  800 |                                  |               
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                                  |               
        //      |                                  |               
        //  500 |                        2         |         1     
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                                  |               
        //      |                                  |               
        //  100 |                                  |               
        //      |                                  |               
        //    0 ●----------------------------------B--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 0), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                  A               
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                                  |               
        //      |                                  |               
        //  100 |                                  |               
        //      |                                  |               
        //    0 |                        2         |         1     
        //      |                                  |               
        // -100 |                                  |               
        //      |                                  |               
        // -200 |                                  |               
        //      |                                  |               
        // -300 |                                  |               
        //      |                                  |               
        // -400 |                                  |               
        //      |                                  |               
        // -500 └----------------------------------B--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 200, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 300), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                  A               
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                                  |               
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                        2         |         1     
        //      |                                  |               
        //  200 |                                  |               
        //      |                                  |               
        //  100 |                                  |               
        //      |                                  |               
        //    0 |         ●                        |               
        //      |                                  |               
        // -100 |                                  |               
        //      |                                  |               
        // -200 └----------------------------------B--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 800, 500, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsHorizontalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(700, 700), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                  A               
        //      |                                  |               
        // 1100 |                                  |               
        //      |                                  |               
        // 1000 |                                  |               
        //      |                                  |               
        //  900 |                                  |               
        //      |                                  |               
        //  800 |                                  |               
        //      |                                  |               
        //  700 |                        2         |         1     
        //      |                                  |               
        //  600 |                                  |               
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 └----------------------------------B--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 1200, 900, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 900, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                        1                         
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        2                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 C-------------------------------------------------D
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                        3                         
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 300, 1000, 300), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1000, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 0, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(0, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                        1                         
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 A-------------------------------------------------B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        2                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 C-------------------------------------------------D
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                        3                         
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 200, 500, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, -200, 500, -200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 500, -200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 500, -200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -500, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(300, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                        1                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        2                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 C-------------------------------------------------D
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                        3                         
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 500, 800, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 100, 800, 100), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 800, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 800, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 800, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(700, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                        1                         
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 A-------------------------------------------------B
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                        2                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 C-------------------------------------------------D
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        3                         
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 900, 1200, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 500, 1200, 500), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 1200, 500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 1200, 500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 200, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              C                   A               
        //      |              |                   |               
        //  900 |              |                   |               
        //      |              |                   |               
        //  800 |              |                   |               
        //      |              |                   |               
        //  700 |              |                   |               
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 |    3         |         2         |         1     
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |              |                   |               
        //      |              |                   |               
        //  200 |              |                   |               
        //      |              |                   |               
        //  100 |              |                   |               
        //      |              |                   |               
        //    0 ●--------------D-------------------B--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 1000, 300, 0), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 300, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 700, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-400, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑              C                   A               
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |              |                   |               
        //      |              |                   |               
        //  200 |              |                   |               
        //      |              |                   |               
        //  100 |              |                   |               
        //      |              |                   |               
        //    0 |    3         |         2         |         1     
        //      |              |                   |               
        // -100 |              |                   |               
        //      |              |                   |               
        // -200 |              |                   |               
        //      |              |                   |               
        // -300 |              |                   |               
        //      |              |                   |               
        // -400 |              |                   |               
        //      |              |                   |               
        // -500 └--------------D-------------------B--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 200, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 500, -200, -500), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, -200, -500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -200, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, -200, -500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑              C                   A               
        //      |              |                   |               
        //  700 |              |                   |               
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 |              |                   |               
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |    3         |         2         |         1     
        //      |              |                   |               
        //  200 |              |                   |               
        //      |              |                   |               
        //  100 |              |                   |               
        //      |              |                   |               
        //    0 |         ●    |                   |               
        //      |              |                   |               
        // -100 |              |                   |               
        //      |              |                   |               
        // -200 └--------------D-------------------B--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 800, 500, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 800, 100, -200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 100, -200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 100, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 100, -200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 500, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              C                   A               
        //      |              |                   |               
        // 1100 |              |                   |               
        //      |              |                   |               
        // 1000 |              |                   |               
        //      |              |                   |               
        //  900 |              |                   |               
        //      |              |                   |               
        //  800 |              |                   |               
        //      |              |                   |               
        //  700 |    3         |         2         |         1     
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 |              |                   |               
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |              |                   |               
        //      |              |                   |               
        //  200 └--------------D-------------------B--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 1200, 900, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1200, 500, 200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 500, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 500, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 900, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 900, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 800), // #1
            new VoronoiSite(500, 600), // #2
            new VoronoiSite(500, 400), // #3
            new VoronoiSite(500, 200), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                        1                         
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                        2                         
        //      |                                                  
        //  500 C-------------------------------------------------D
        //      |                                                  
        //  400 |                        3                         
        //      |                                                  
        //  300 E-------------------------------------------------F
        //      |                                                  
        //  200 |                        4                         
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 300, 1000, 300), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 1000, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 0, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 300), // #1
            new VoronoiSite(0, 100), // #2
            new VoronoiSite(0, -100), // #3
            new VoronoiSite(0, -300), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        1                         
        //      |                                                  
        //  200 A-------------------------------------------------B
        //      |                                                  
        //  100 |                        2                         
        //      |                                                  
        //    0 C------------------------●------------------------D
        //      |                                                  
        // -100 |                        3                         
        //      |                                                  
        // -200 E-------------------------------------------------F
        //      |                                                  
        // -300 |                        4                         
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 200, 500, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 0, 500, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, -500, -200, 500, -200), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 500, -200)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 500, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 500, -200)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, -500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -500, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 600), // #1
            new VoronoiSite(300, 400), // #2
            new VoronoiSite(300, 200), // #3
            new VoronoiSite(300, 0), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                        1                         
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                        2                         
        //      |                                                  
        //  300 C-------------------------------------------------D
        //      |                                                  
        //  200 |                        3                         
        //      |                                                  
        //  100 E-------------------------------------------------F
        //      |                                                  
        //    0 |         ●              4                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 500, 800, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 300, 800, 300), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, -200, 100, 800, 100), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 800, 100)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 800, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 800, 100)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, -200, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 800, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1000), // #1
            new VoronoiSite(700, 800), // #2
            new VoronoiSite(700, 600), // #3
            new VoronoiSite(700, 400), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                        1                         
        //      |                                                  
        //  900 A-------------------------------------------------B
        //      |                                                  
        //  800 |                        2                         
        //      |                                                  
        //  700 C-------------------------------------------------D
        //      |                                                  
        //  600 |                        3                         
        //      |                                                  
        //  500 E-------------------------------------------------F
        //      |                                                  
        //  400 |                        4                         
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 900, 1200, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 700, 1200, 700), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 200, 500, 1200, 500), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 1200, 500)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 1200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 1200, 500)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 200, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1200, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 500), // #1
            new VoronoiSite(600, 500), // #2
            new VoronoiSite(400, 500), // #3
            new VoronoiSite(200, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑              E         C         A               
        //      |              |         |         |               
        //  900 |              |         |         |               
        //      |              |         |         |               
        //  800 |              |         |         |               
        //      |              |         |         |               
        //  700 |              |         |         |               
        //      |              |         |         |               
        //  600 |              |         |         |               
        //      |              |         |         |               
        //  500 |         4    |    3    |    2    |    1          
        //      |              |         |         |               
        //  400 |              |         |         |               
        //      |              |         |         |               
        //  300 |              |         |         |               
        //      |              |         |         |               
        //  200 |              |         |         |               
        //      |              |         |         |               
        //  100 |              |         |         |               
        //      |              |         |         |               
        //    0 ●--------------F---------D---------B--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 300, 1000, 300, 0), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 300, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 500, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 700, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 0), // #1
            new VoronoiSite(100, 0), // #2
            new VoronoiSite(-100, 0), // #3
            new VoronoiSite(-300, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑              E         C         A               
        //      |              |         |         |               
        //  400 |              |         |         |               
        //      |              |         |         |               
        //  300 |              |         |         |               
        //      |              |         |         |               
        //  200 |              |         |         |               
        //      |              |         |         |               
        //  100 |              |         |         |               
        //      |              |         |         |               
        //    0 |         4    |    3    ●    2    |    1          
        //      |              |         |         |               
        // -100 |              |         |         |               
        //      |              |         |         |               
        // -200 |              |         |         |               
        //      |              |         |         |               
        // -300 |              |         |         |               
        //      |              |         |         |               
        // -400 |              |         |         |               
        //      |              |         |         |               
        // -500 └--------------F---------D---------B--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 200, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 0, -500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, -200, 500, -200, -500), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, -200, -500)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, -200, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, -200, -500)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 300), // #1
            new VoronoiSite(400, 300), // #2
            new VoronoiSite(200, 300), // #3
            new VoronoiSite(0, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑              E         C         A               
        //      |              |         |         |               
        //  700 |              |         |         |               
        //      |              |         |         |               
        //  600 |              |         |         |               
        //      |              |         |         |               
        //  500 |              |         |         |               
        //      |              |         |         |               
        //  400 |              |         |         |               
        //      |              |         |         |               
        //  300 |         4    |    3    |    2    |    1          
        //      |              |         |         |               
        //  200 |              |         |         |               
        //      |              |         |         |               
        //  100 |              |         |         |               
        //      |              |         |         |               
        //    0 |         ●    |         |         |               
        //      |              |         |         |               
        // -100 |              |         |         |               
        //      |              |         |         |               
        // -200 └--------------F---------D---------B--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 800, 500, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 800, 300, -200), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 100, 800, 100, -200), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 100, -200)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 100, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 100, -200)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 300, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 500, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsHorizontalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 700), // #1
            new VoronoiSite(800, 700), // #2
            new VoronoiSite(600, 700), // #3
            new VoronoiSite(400, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑              E         C         A               
        //      |              |         |         |               
        // 1100 |              |         |         |               
        //      |              |         |         |               
        // 1000 |              |         |         |               
        //      |              |         |         |               
        //  900 |              |         |         |               
        //      |              |         |         |               
        //  800 |              |         |         |               
        //      |              |         |         |               
        //  700 |         4    |    3    |    2    |    1          
        //      |              |         |         |               
        //  600 |              |         |         |               
        //      |              |         |         |               
        //  500 |              |         |         |               
        //      |              |         |         |               
        //  400 |              |         |         |               
        //      |              |         |         |               
        //  300 |              |         |         |               
        //      |              |         |         |               
        //  200 └--------------F---------D---------B--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 1200, 900, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 1200, 700, 200), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 500, 1200, 500, 200), Is.True, "Expected: has edge E-F"); // E-F

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 500, 200)), Is.True, "Expected: point E has edge E-F"); // E on E-F
        point = FindPoint(points, 500, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 500, 200)), Is.True, "Expected: point F has edge E-F"); // F on E-F
        point = FindPoint(points, 700, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 900, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 900, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 900, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 300), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,B
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |              1                  ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                  2               
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 A'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(200, -200), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,B
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |              1                  ,·'              
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 |                       ,●'                        
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 |             ,·'                  2               
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 A'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(500, 100), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,B
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |              1                  ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'                  2               
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 A'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 800, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 500), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,B
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |              1                  ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 |                       ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'                  2               
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 A'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 1200, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 300), // #2
        ];
        plane.SetSites(sites);

        // 1000 A,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,                  1               
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |              2                  '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, -200), // #2
        ];
        plane.SetSites(sites);

        //  500 A,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,                  1               
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |                       '●,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 |              2                  '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 500, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 100), // #2
        ];
        plane.SetSites(sites);

        //  800 A,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,                  1               
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,                        
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |              2                  '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 800, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 500), // #2
        ];
        plane.SetSites(sites);

        // 1200 A,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,                  1               
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |                       '·,                        
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |              2                  '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(600, 400), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                      ,B          
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |         1                  ,·'                   
        //      |                          ,'                      
        //  700 |                       ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                  2                    
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 A'                                                 
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(100, -100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                      ,B          
        //      |                                    ,'            
        //  400 |                                 ,·'              
        //      |                               ,'                 
        //  300 |         1                  ,·'                   
        //      |                          ,'                      
        //  200 |                       ,·'                        
        //      |                     ,'                           
        //  100 |                  ,·'                             
        //      |                ,'                                
        //    0 |             ,·'        ●                         
        //      |           ,'                                     
        // -100 |        ,·'                  2                    
        //      |      ,'                                          
        // -200 |   ,·'                                            
        //      | ,'                                               
        // -300 A'                                                 
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -300, 300, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(400, 200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                      ,B          
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |         1                  ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                  2                    
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 A'        ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 600, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 600, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 600, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(800, 600), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                      ,B          
        //      |                                    ,'            
        // 1100 |                                 ,·'              
        //      |                               ,'                 
        // 1000 |         1                  ,·'                   
        //      |                          ,'                      
        //  900 |                       ,·'                        
        //      |                     ,'                           
        //  800 |                  ,·'                             
        //      |                ,'                                
        //  700 |             ,·'                                  
        //      |           ,'                                     
        //  600 |        ,·'                  2                    
        //      |      ,'                                          
        //  500 |   ,·'                                            
        //      | ,'                                               
        //  400 A'                                                 
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1000, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1000, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(400, 400), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑         A,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                  1          
        //      |                     ',                           
        //  700 |                       '·,                        
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                   2                  '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 |                                                'B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1000, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, -100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑         A,                                       
        //      |           ',                                     
        //  400 |             '·,                                  
        //      |                ',                                
        //  300 |                  '·,                  1          
        //      |                     ',                           
        //  200 |                       '·,                        
        //      |                          ',                      
        //  100 |                            '·,                   
        //      |                               ',                 
        //    0 |                        ●        '·,              
        //      |                                    ',            
        // -100 |                   2                  '·,         
        //      |                                         ',       
        // -200 |                                           '·,    
        //      |                                              ',  
        // -300 |                                                'B
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, 500, 500, -300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 500, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 500, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(200, 200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑         A,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                  1          
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                   2                  '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 |         ●                                      'B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 800, 800, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 800, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 800, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(600, 600), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑         A,                                       
        //      |           ',                                     
        // 1100 |             '·,                                  
        //      |                ',                                
        // 1000 |                  '·,                  1          
        //      |                     ',                           
        //  900 |                       '·,                        
        //      |                          ',                      
        //  800 |                            '·,                   
        //      |                               ',                 
        //  700 |                                 '·,              
        //      |                                    ',            
        //  600 |                   2                  '·,         
        //      |                                         ',       
        //  500 |                                           '·,    
        //      |                                              ',  
        //  400 |                                                'B
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1200, 1200, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 1200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 1200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(400, 600), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                ,A
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                   2                  ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                  1          
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 ●---------B'--------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 800, 200, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -300), // #1
            new VoronoiSite(-100, 100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                ,A
        //      |                                              ,'  
        //  200 |                                           ,·'    
        //      |                                         ,'       
        //  100 |                   2                  ,·'         
        //      |                                    ,'            
        //    0 |                        ●        ,·'              
        //      |                               ,'                 
        // -100 |                            ,·'                   
        //      |                          ,'                      
        // -200 |                       ,·'                        
        //      |                     ,'                           
        // -300 |                  ,·'                  1          
        //      |                ,'                                
        // -400 |             ,·'                                  
        //      |           ,'                                     
        // -500 └---------B'--------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, -300, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -300, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -300, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -300, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 0), // #1
            new VoronoiSite(200, 400), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                ,A
        //      |                                              ,'  
        //  500 |                                           ,·'    
        //      |                                         ,'       
        //  400 |                   2                  ,·'         
        //      |                                    ,'            
        //  300 |                                 ,·'              
        //      |                               ,'                 
        //  200 |                            ,·'                   
        //      |                          ,'                      
        //  100 |                       ,·'                        
        //      |                     ,'                           
        //    0 |         ●        ,·'                  1          
        //      |                ,'                                
        // -100 |             ,·'                                  
        //      |           ,'                                     
        // -200 └---------B'--------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, 0, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 0, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 0, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 400), // #1
            new VoronoiSite(600, 800), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                ,A
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                   2                  ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                  1          
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 └---------B'--------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1000, 400, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 400, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 400, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(600, 600), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 B,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                  2                    
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,                        
        //      |                          ',                      
        //  200 |         1                  '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 ●--------------------------------------'A---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 0, 0, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -300), // #1
            new VoronoiSite(100, 100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B,                                                 
        //      | ',                                               
        //  200 |   '·,                                            
        //      |      ',                                          
        //  100 |        '·,                  2                    
        //      |           ',                                     
        //    0 |             '·,        ●                         
        //      |                ',                                
        // -100 |                  '·,                             
        //      |                     ',                           
        // -200 |                       '·,                        
        //      |                          ',                      
        // -300 |         1                  '·,                   
        //      |                               ',                 
        // -400 |                                 '·,              
        //      |                                    ',            
        // -500 └--------------------------------------'A---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -500, -500, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 400), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 B,                                                 
        //      | ',                                               
        //  500 |   '·,                                            
        //      |      ',                                          
        //  400 |        '·,                  2                    
        //      |           ',                                     
        //  300 |             '·,                                  
        //      |                ',                                
        //  200 |                  '·,                             
        //      |                     ',                           
        //  100 |                       '·,                        
        //      |                          ',                      
        //    0 |         1                  '·,                   
        //      |                               ',                 
        // -100 |                                 '·,              
        //      |                                    ',            
        // -200 └--------------------------------------'A---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, -200, -200, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, -200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, -200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(800, 800), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 B,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                  2                    
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |         1                  '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 └--------------------------------------'A---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 200, 200, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsAgainstCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 400), // #1
            new VoronoiSite(600, 800), // #2
        ];
        plane.SetSites(sites);

        // 1000 A,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                  2                    
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |         1                  '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -100), // #1
            new VoronoiSite(100, 300), // #2
        ];
        plane.SetSites(sites);

        //  500 A,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                  2                    
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |                       '●,                        
        //      |                          ',                      
        // -100 |         1                  '·,                   
        //      |                               ',                 
        // -200 |                                 '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 500, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(400, 600), // #2
        ];
        plane.SetSites(sites);

        //  800 A,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                  2                    
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,                        
        //      |                          ',                      
        //  200 |         1                  '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 800, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 600), // #1
            new VoronoiSite(800, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1200 A,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                  2                    
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |                       '·,                        
        //      |                          ',                      
        //  600 |         1                  '·,                   
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(800, 400), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,A
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                   1                  ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                  2          
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 B'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(300, -100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,A
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                   1                  ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 |                       ,●'                        
        //      |                     ,'                           
        // -100 |                  ,·'                  2          
        //      |                ,'                                
        // -200 |             ,·'                                  
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 B'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, -500, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(600, 200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,A
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                   1                  ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                  2          
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 B'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, -200, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(1000, 600), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,A
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                   1                  ,·'         
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 |                       ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                  2          
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 B'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1200, 200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(400, 200), // #2
        ];
        plane.SetSites(sites);

        // 1000 B,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                  1          
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                   2                  '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(-100, -300), // #2
        ];
        plane.SetSites(sites);

        //  500 B,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 |                  '·,                  1          
        //      |                     ',                           
        //    0 |                       '●,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 |                                 '·,              
        //      |                                    ',            
        // -300 |                   2                  '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -500, -500, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 400), // #1
            new VoronoiSite(200, 0), // #2
        ];
        plane.SetSites(sites);

        //  800 B,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 |                  '·,                  1          
        //      |                     ',                           
        //  300 |                       '·,                        
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |         ●         2                  '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, -200, -200, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 800), // #1
            new VoronoiSite(600, 400), // #2
        ];
        plane.SetSites(sites);

        // 1200 B,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                  1          
        //      |                     ',                           
        //  700 |                       '·,                        
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                   2                  '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 200, 200, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(200, 600), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,B
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |         2                  ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                  1                    
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 A'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, -300), // #1
            new VoronoiSite(-300, 100), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,B
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 |         2                  ,·'                   
        //      |                          ,'                      
        //    0 |                       ,●'                        
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 |             ,·'                                  
        //      |           ,'                                     
        // -300 |        ,·'                  1                    
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 A'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(0, 400), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,B
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |         2                  ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,●'                  1                    
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 A'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 800, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(400, 800), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,B
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |         2                  ,·'                   
        //      |                          ,'                      
        //  700 |                       ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                  1                    
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 A'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 1200, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 900), // #2
        ];
        plane.SetSites(sites);

        // 1000 A,,                                                
        //      |  ''·,,                                           
        //  900 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  800 |                 ''·,,                            
        //      |                      ''·,,                       
        //  700 |                           ''·,,                  
        //      |                                ''·,,             
        //  600 |                                     ''·,,        
        //      |                                          ''·,,   
        //  500 |                        1                      ''B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 400), // #2
        ];
        plane.SetSites(sites);

        //  500 A,,                                                
        //      |  ''·,,                                           
        //  400 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  300 |                 ''·,,                            
        //      |                      ''·,,                       
        //  200 |                           ''·,,                  
        //      |                                ''·,,             
        //  100 |                                     ''·,,        
        //      |                                          ''·,,   
        //    0 |                        1                      ''B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 700), // #2
        ];
        plane.SetSites(sites);

        //  800 A,,                                                
        //      |  ''·,,                                           
        //  700 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  600 |                 ''·,,                            
        //      |                      ''·,,                       
        //  500 |                           ''·,,                  
        //      |                                ''·,,             
        //  400 |                                     ''·,,        
        //      |                                          ''·,,   
        //  300 |                        1                      ''B
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 800, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 1100), // #2
        ];
        plane.SetSites(sites);

        // 1200 A,,                                                
        //      |  ''·,,                                           
        // 1100 |       ''·,,                      2               
        //      |            ''·,,                                 
        // 1000 |                 ''·,,                            
        //      |                      ''·,,                       
        //  900 |                           ''·,,                  
        //      |                                ''·,,             
        //  800 |                                     ''·,,        
        //      |                                          ''·,,   
        //  700 |                        1                      ''B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 300), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                 A
        //      |                                                ' 
        //  900 |                                              ,'  
        //      |                                             ,    
        //  800 |                                            ·     
        //      |                                           '      
        //  700 |                                         ,'       
        //      |                                        ,         
        //  600 |                                       ·          
        //      |                                      '           
        //  500 |                        1           ,'            
        //      |                                   ,              
        //  400 |                                  ·               
        //      |                                 '                
        //  300 |                               ,'           2     
        //      |                              ,                   
        //  200 |                             ·                    
        //      |                            '                     
        //  100 |                          ,'                      
        //      |                         ,                        
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, -200), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                 A
        //      |                                                ' 
        //  400 |                                              ,'  
        //      |                                             ,    
        //  300 |                                            ·     
        //      |                                           '      
        //  200 |                                         ,'       
        //      |                                        ,         
        //  100 |                                       ·          
        //      |                                      '           
        //    0 |                        1           ,'            
        //      |                                   ,              
        // -100 |                                  ·               
        //      |                                 '                
        // -200 |                               ,'           2     
        //      |                              ,                   
        // -300 |                             ·                    
        //      |                            '                     
        // -400 |                          ,'                      
        //      |                         ,                        
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 100), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                 A
        //      |                                                ' 
        //  700 |                                              ,'  
        //      |                                             ,    
        //  600 |                                            ·     
        //      |                                           '      
        //  500 |                                         ,'       
        //      |                                        ,         
        //  400 |                                       ·          
        //      |                                      '           
        //  300 |                        1           ,'            
        //      |                                   ,              
        //  200 |                                  ·               
        //      |                                 '                
        //  100 |                               ,'           2     
        //      |                              ,                   
        //    0 |         ●                   ·                    
        //      |                            '                     
        // -100 |                          ,'                      
        //      |                         ,                        
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(1100, 500), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                 A
        //      |                                                ' 
        // 1100 |                                              ,'  
        //      |                                             ,    
        // 1000 |                                            ·     
        //      |                                           '      
        //  900 |                                         ,'       
        //      |                                        ,         
        //  800 |                                       ·          
        //      |                                      '           
        //  700 |                        1           ,'            
        //      |                                   ,              
        //  600 |                                  ·               
        //      |                                 '                
        //  500 |                               ,'           2     
        //      |                              ,                   
        //  400 |                             ·                    
        //      |                            '                     
        //  300 |                          ,'                      
        //      |                         ,                        
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 100), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 B,,                      1                         
        //      |  ''·,,                                           
        //  400 |       ''·,,                                      
        //      |            ''·,,                                 
        //  300 |                 ''·,,                            
        //      |                      ''·,,                       
        //  200 |                           ''·,,                  
        //      |                                ''·,,             
        //  100 |              2                      ''·,,        
        //      |                                          ''·,,   
        //    0 ●-----------------------------------------------''A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, -400), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 B,,                      1                         
        //      |  ''·,,                                           
        // -100 |       ''·,,                                      
        //      |            ''·,,                                 
        // -200 |                 ''·,,                            
        //      |                      ''·,,                       
        // -300 |                           ''·,,                  
        //      |                                ''·,,             
        // -400 |              2                      ''·,,        
        //      |                                          ''·,,   
        // -500 └-----------------------------------------------''A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -500, -500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, -100), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B,,                      1                         
        //      |  ''·,,                                           
        //  200 |       ''·,,                                      
        //      |            ''·,,                                 
        //  100 |                 ''·,,                            
        //      |                      ''·,,                       
        //    0 |         ●                 ''·,,                  
        //      |                                ''·,,             
        // -100 |              2                      ''·,,        
        //      |                                          ''·,,   
        // -200 └-----------------------------------------------''A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, -200, -200, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 300), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 B,,                      1                         
        //      |  ''·,,                                           
        //  600 |       ''·,,                                      
        //      |            ''·,,                                 
        //  500 |                 ''·,,                            
        //      |                      ''·,,                       
        //  400 |                           ''·,,                  
        //      |                                ''·,,             
        //  300 |              2                      ''·,,        
        //      |                                          ''·,,   
        //  200 └-----------------------------------------------''A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 200, 200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 700), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                       '                          
        //  900 |                     ,'                           
        //      |                    ,                             
        //  800 |                   ·                              
        //      |                  '                               
        //  700 |    2           ,'                                
        //      |               ,                                  
        //  600 |              ·                                   
        //      |             '                                    
        //  500 |           ,'           1                         
        //      |          ,                                       
        //  400 |         ·                                        
        //      |        '                                         
        //  300 |      ,'                                          
        //      |     ,                                            
        //  200 |    ·                                             
        //      |   '                                              
        //  100 | ,'                                               
        //      |,                                                 
        //    0 A-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-400, 200), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                       '                          
        //  400 |                     ,'                           
        //      |                    ,                             
        //  300 |                   ·                              
        //      |                  '                               
        //  200 |    2           ,'                                
        //      |               ,                                  
        //  100 |              ·                                   
        //      |             '                                    
        //    0 |           ,'           1                         
        //      |          ,                                       
        // -100 |         ·                                        
        //      |        '                                         
        // -200 |      ,'                                          
        //      |     ,                                            
        // -300 |    ·                                             
        //      |   '                                              
        // -400 | ,'                                               
        //      |,                                                 
        // -500 A-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, 500), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                       '                          
        //  700 |                     ,'                           
        //      |                    ,                             
        //  600 |                   ·                              
        //      |                  '                               
        //  500 |    2           ,'                                
        //      |               ,                                  
        //  400 |              ·                                   
        //      |             '                                    
        //  300 |           ,'           1                         
        //      |          ,                                       
        //  200 |         ·                                        
        //      |        '                                         
        //  100 |      ,'                                          
        //      |     ,                                            
        //    0 |    ·    ●                                        
        //      |   '                                              
        // -100 | ,'                                               
        //      |,                                                 
        // -200 A-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 300, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 900), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                       '                          
        // 1100 |                     ,'                           
        //      |                    ,                             
        // 1000 |                   ·                              
        //      |                  '                               
        //  900 |    2           ,'                                
        //      |               ,                                  
        //  800 |              ·                                   
        //      |             '                                    
        //  700 |           ,'           1                         
        //      |          ,                                       
        //  600 |         ·                                        
        //      |        '                                         
        //  500 |      ,'                                          
        //      |     ,                                            
        //  400 |    ·                                             
        //      |   '                                              
        //  300 | ,'                                               
        //      |,                                                 
        //  200 A-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 900), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                               ,,A
        //      |                                          ,,·''   
        //  900 |              2                      ,,·''        
        //      |                                ,,·''             
        //  800 |                           ,,·''                  
        //      |                      ,,·''                       
        //  700 |                 ,,·''                            
        //      |            ,,·''                                 
        //  600 |       ,,·''                                      
        //      |  ,,·''                                           
        //  500 B''                      1                         
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 400), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                               ,,A
        //      |                                          ,,·''   
        //  400 |              2                      ,,·''        
        //      |                                ,,·''             
        //  300 |                           ,,·''                  
        //      |                      ,,·''                       
        //  200 |                 ,,·''                            
        //      |            ,,·''                                 
        //  100 |       ,,·''                                      
        //      |  ,,·''                                           
        //    0 B''                      1                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, -500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 700), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                               ,,A
        //      |                                          ,,·''   
        //  700 |              2                      ,,·''        
        //      |                                ,,·''             
        //  600 |                           ,,·''                  
        //      |                      ,,·''                       
        //  500 |                 ,,·''                            
        //      |            ,,·''                                 
        //  400 |       ,,·''                                      
        //      |  ,,·''                                           
        //  300 B''                      1                         
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, -200, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 1100), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                               ,,A
        //      |                                          ,,·''   
        // 1100 |              2                      ,,·''        
        //      |                                ,,·''             
        // 1000 |                           ,,·''                  
        //      |                      ,,·''                       
        //  900 |                 ,,·''                            
        //      |            ,,·''                                 
        //  800 |       ,,·''                                      
        //      |  ,,·''                                           
        //  700 B''                      1                         
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1200, 200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 700), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                         '                        
        //  900 |                          ',                      
        //      |                            ,                     
        //  800 |                             ·                    
        //      |                              '                   
        //  700 |                               ',           2     
        //      |                                 ,                
        //  600 |                                  ·               
        //      |                                   '              
        //  500 |                        1           ',            
        //      |                                      ,           
        //  400 |                                       ·          
        //      |                                        '         
        //  300 |                                         ',       
        //      |                                           ,      
        //  200 |                                            ·     
        //      |                                             '    
        //  100 |                                              ',  
        //      |                                                , 
        //    0 ●-------------------------------------------------A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 200), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                         '                        
        //  400 |                          ',                      
        //      |                            ,                     
        //  300 |                             ·                    
        //      |                              '                   
        //  200 |                               ',           2     
        //      |                                 ,                
        //  100 |                                  ·               
        //      |                                   '              
        //    0 |                        1           ',            
        //      |                                      ,           
        // -100 |                                       ·          
        //      |                                        '         
        // -200 |                                         ',       
        //      |                                           ,      
        // -300 |                                            ·     
        //      |                                             '    
        // -400 |                                              ',  
        //      |                                                , 
        // -500 └-------------------------------------------------A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 500), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                         '                        
        //  700 |                          ',                      
        //      |                            ,                     
        //  600 |                             ·                    
        //      |                              '                   
        //  500 |                               ',           2     
        //      |                                 ,                
        //  400 |                                  ·               
        //      |                                   '              
        //  300 |                        1           ',            
        //      |                                      ,           
        //  200 |                                       ·          
        //      |                                        '         
        //  100 |                                         ',       
        //      |                                           ,      
        //    0 |         ●                                  ·     
        //      |                                             '    
        // -100 |                                              ',  
        //      |                                                , 
        // -200 └-------------------------------------------------A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, -200, 300, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(1100, 900), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                         '                        
        // 1100 |                          ',                      
        //      |                            ,                     
        // 1000 |                             ·                    
        //      |                              '                   
        //  900 |                               ',           2     
        //      |                                 ,                
        //  800 |                                  ·               
        //      |                                   '              
        //  700 |                        1           ',            
        //      |                                      ,           
        //  600 |                                       ·          
        //      |                                        '         
        //  500 |                                         ',       
        //      |                                           ,      
        //  400 |                                            ·     
        //      |                                             '    
        //  300 |                                              ',  
        //      |                                                , 
        //  200 └-------------------------------------------------A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 200, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 100), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                        1                      ,,B
        //      |                                          ,,·''   
        //  400 |                                     ,,·''        
        //      |                                ,,·''             
        //  300 |                           ,,·''                  
        //      |                      ,,·''                       
        //  200 |                 ,,·''                            
        //      |            ,,·''                                 
        //  100 |       ,,·''                      2               
        //      |  ,,·''                                           
        //    0 A''-----------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, -400), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        1                      ,,B
        //      |                                          ,,·''   
        // -100 |                                     ,,·''        
        //      |                                ,,·''             
        // -200 |                           ,,·''                  
        //      |                      ,,·''                       
        // -300 |                 ,,·''                            
        //      |            ,,·''                                 
        // -400 |       ,,·''                      2               
        //      |  ,,·''                                           
        // -500 A''-----------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, -100), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                        1                      ,,B
        //      |                                          ,,·''   
        //  200 |                                     ,,·''        
        //      |                                ,,·''             
        //  100 |                           ,,·''                  
        //      |                      ,,·''                       
        //    0 |         ●       ,,·''                            
        //      |            ,,·''                                 
        // -100 |       ,,·''                      2               
        //      |  ,,·''                                           
        // -200 A''-----------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 800, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 300), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                        1                      ,,B
        //      |                                          ,,·''   
        //  600 |                                     ,,·''        
        //      |                                ,,·''             
        //  500 |                           ,,·''                  
        //      |                      ,,·''                       
        //  400 |                 ,,·''                            
        //      |            ,,·''                                 
        //  300 |       ,,·''                      2               
        //      |  ,,·''                                           
        //  200 A''-----------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 300), // #2
        ];
        plane.SetSites(sites);

        // 1000 A                                                  
        //      |'                                                 
        //  900 | ',                                               
        //      |   ,                                              
        //  800 |    ·                                             
        //      |     '                                            
        //  700 |      ',                                          
        //      |        ,                                         
        //  600 |         ·                                        
        //      |          '                                       
        //  500 |           ',           1                         
        //      |             ,                                    
        //  400 |              ·                                   
        //      |               '                                  
        //  300 |    2           ',                                
        //      |                  ,                               
        //  200 |                   ·                              
        //      |                    '                             
        //  100 |                     ',                           
        //      |                       ,                          
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-400, -200), // #2
        ];
        plane.SetSites(sites);

        //  500 A                                                  
        //      |'                                                 
        //  400 | ',                                               
        //      |   ,                                              
        //  300 |    ·                                             
        //      |     '                                            
        //  200 |      ',                                          
        //      |        ,                                         
        //  100 |         ·                                        
        //      |          '                                       
        //    0 |           ',           1                         
        //      |             ,                                    
        // -100 |              ·                                   
        //      |               '                                  
        // -200 |    2           ',                                
        //      |                  ,                               
        // -300 |                   ·                              
        //      |                    '                             
        // -400 |                     ',                           
        //      |                       ,                          
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(-100, 100), // #2
        ];
        plane.SetSites(sites);

        //  800 A                                                  
        //      |'                                                 
        //  700 | ',                                               
        //      |   ,                                              
        //  600 |    ·                                             
        //      |     '                                            
        //  500 |      ',                                          
        //      |        ,                                         
        //  400 |         ·                                        
        //      |          '                                       
        //  300 |           ',           1                         
        //      |             ,                                    
        //  200 |              ·                                   
        //      |               '                                  
        //  100 |    2           ',                                
        //      |                  ,                               
        //    0 |         ●         ·                              
        //      |                    '                             
        // -100 |                     ',                           
        //      |                       ,                          
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 500), // #2
        ];
        plane.SetSites(sites);

        // 1200 A                                                  
        //      |'                                                 
        // 1100 | ',                                               
        //      |   ,                                              
        // 1000 |    ·                                             
        //      |     '                                            
        //  900 |      ',                                          
        //      |        ,                                         
        //  800 |         ·                                        
        //      |          '                                       
        //  700 |           ',           1                         
        //      |             ,                                    
        //  600 |              ·                                   
        //      |               '                                  
        //  500 |    2           ',                                
        //      |                  ,                               
        //  400 |                   ·                              
        //      |                    '                             
        //  300 |                     ',                           
        //      |                       ,                          
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
    }

    [Test]
    public void TwoPointsOnEdge()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 800), // #1
            new VoronoiSite(0, 200), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 1                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 2                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdge_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 300), // #1
            new VoronoiSite(-500, -300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 1                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 A------------------------●------------------------B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 2                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 0, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdge_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 600), // #1
            new VoronoiSite(-200, 0), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 1                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 A-------------------------------------------------B
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 2         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 300, 800, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdge_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1000), // #1
            new VoronoiSite(200, 400), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 1                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 2                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 700, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 1000), // #1
            new VoronoiSite(200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑         2              A              1          
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(-300, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑         2              A              1          
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 800), // #1
            new VoronoiSite(0, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑         2              A              1          
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1200), // #1
            new VoronoiSite(400, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑         2              A              1          
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 200), // #1
            new VoronoiSite(1000, 800), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                 2
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 B-------------------------------------------------A
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                 1
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -300), // #1
            new VoronoiSite(500, 300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                 2
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 B------------------------●------------------------A
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                 1
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, -500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 0), // #1
            new VoronoiSite(800, 600), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                 2
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B-------------------------------------------------A
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                       1
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 300, -200, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 400), // #1
            new VoronoiSite(1200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                 2
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 B-------------------------------------------------A
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                 1
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 700, 200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(800, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●---------1--------------A--------------2---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -500), // #1
            new VoronoiSite(300, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └---------1--------------A--------------2---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(600, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └---------1--------------A--------------2---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -200, 300, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdge_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdge_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(1000, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └---------1--------------A--------------2---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 200, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInAdjacentCorners()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 1                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 A-------------------------------------------------B
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 2-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInAdjacentCorners_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 A------------------------●------------------------B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 2-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 0, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInAdjacentCorners_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 1                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 A-------------------------------------------------B
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 2-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 300, 800, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInAdjacentCorners_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 1                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 A-------------------------------------------------B
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 2-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 700, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(0, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 2                        A                        1
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-500, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 2                        A                        1
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(-200, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 2                        A                        1
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(200, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 2                        A                        1
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(1000, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                 2
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 B-------------------------------------------------A
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(500, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                 2
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 B------------------------●------------------------A
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, -500, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(800, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                 2
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B-------------------------------------------------A
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 300, -200, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(1200, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                 2
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 B-------------------------------------------------A
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 700, 200, 700), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(1000, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 1------------------------A------------------------2
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(500, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 1------------------------A------------------------2
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(800, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 1------------------------A------------------------2
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -200, 300, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInAdjacentCorners_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInAdjacentCorners_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(1200, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 1------------------------A------------------------2
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 200, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 200), // #2
        ];
        plane.SetSites(sites);

        // 1000 1                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 A-------------------------------------------------B
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 2                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1000, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1000, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -300), // #2
        ];
        plane.SetSites(sites);

        //  500 1                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 A-------------------------------------------------B
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 2                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 100, 500, 100), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, 0), // #2
        ];
        plane.SetSites(sites);

        //  800 1                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 A-------------------------------------------------B
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 2         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 400, 800, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 800, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 800, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnEdgeAndCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 400), // #2
        ];
        plane.SetSites(sites);

        // 1200 1                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 A-------------------------------------------------B
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 2                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 1200, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑         2                   A                   1
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 ●-----------------------------B-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1000, 600, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-300, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑         2                   A                   1
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 |                        ●    |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 |                             |                    
        //      |                             |                    
        // -300 |                             |                    
        //      |                             |                    
        // -400 |                             |                    
        //      |                             |                    
        // -500 └-----------------------------B-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 500, 100, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 500, 100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 500, 100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(0, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑         2                   A                   1
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 |         ●                   |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 └-----------------------------B-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 800, 400, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(400, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑         2                   A                   1
        //      |                             |                    
        // 1100 |                             |                    
        //      |                             |                    
        // 1000 |                             |                    
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 └-----------------------------B-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1200, 800, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1200, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1200, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(1000, 800), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                 2
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 B-------------------------------------------------A
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 0, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 0, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(500, 300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                 2
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 B-------------------------------------------------A
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -100, -500, -100), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -100, -500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -100, -500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(800, 600), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                 2
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 B-------------------------------------------------A
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, -200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, -200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, -200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(1200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                 2
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 B-------------------------------------------------A
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 600, 200, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(800, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                   B                              
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 1-------------------A-------------------2---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 0, 400, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(300, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                   B                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 |                   |    ●                         
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 |                   |                              
        //      |                   |                              
        // -300 |                   |                              
        //      |                   |                              
        // -400 |                   |                              
        //      |                   |                              
        // -500 1-------------------A-------------------2---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -500, -100, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -100, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, -100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, -100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(600, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                   B                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 |         ●         |                              
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 1-------------------A-------------------2---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, -200, 200, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(1000, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                   B                              
        //      |                   |                              
        // 1100 |                   |                              
        //      |                   |                              
        // 1000 |                   |                              
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 1-------------------A-------------------2---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 200, 600, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(1000, 200), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                 1
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 B-------------------------------------------------A
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                 2
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 600, 0, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 0, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 0, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(500, -300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                 1
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 B-------------------------------------------------A
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                 2
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 100, -500, 100), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(800, 0), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                 1
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 B-------------------------------------------------A
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                       2
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 400, -200, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, -200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, -200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(1200, 400), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                 1
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 B-------------------------------------------------A
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                 2
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 800, 200, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(200, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                             B                    
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 ●---------2-------------------A-------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 600, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 600, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 600, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(-300, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                             B                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 |                        ●    |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 |                             |                    
        //      |                             |                    
        // -300 |                             |                    
        //      |                             |                    
        // -400 |                             |                    
        //      |                             |                    
        // -500 └---------2-------------------A-------------------1
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -500, 100, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 100, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, 100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, 100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, -200), // #1
            new VoronoiSite(0, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                             B                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 |         ●                   |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 └---------2-------------------A-------------------1
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, -200, 400, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 400, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 400, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(400, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                             B                    
        //      |                             |                    
        // 1100 |                             |                    
        //      |                             |                    
        // 1000 |                             |                    
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                             |                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 └---------2-------------------A-------------------1
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 800, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 800, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 800, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(0, 800), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 2                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 A-------------------------------------------------B
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 1-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 1000, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 1000, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 1000, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(-500, 300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 2                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |                        ●                         
        //      |                                                  
        // -100 A-------------------------------------------------B
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 1-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -100, 500, -100), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(-200, 600), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 2                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 A-------------------------------------------------B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 1-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 200, 800, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 2                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 A-------------------------------------------------B
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 1-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 600, 1200, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 1200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 1200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(800, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 1                   A                   2          
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 ●-------------------B-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 400, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 400, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 400, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(300, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 1                   A                   2          
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 |                   |    ●                         
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 |                   |                              
        //      |                   |                              
        // -300 |                   |                              
        //      |                   |                              
        // -400 |                   |                              
        //      |                   |                              
        // -500 └-------------------B-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 500, -100, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -100, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, -100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, -100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(600, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 1                   A                   2          
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 |         ●         |                              
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 └-------------------B-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 200, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnEdgeAndCorner_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnEdgeAndCorner_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(1000, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 1                   A                   2          
        //      |                   |                              
        // 1100 |                   |                              
        //      |                   |                              
        // 1000 |                   |                              
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                   |                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 └-------------------B-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 600, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 600, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 600, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInOppositeCorners()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(1000, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 1                                                ,B
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 A'------------------------------------------------2
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInOppositeCorners_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(500, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 1                                                ,B
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 |                       ,●'                        
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 |             ,·'                                  
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 A'------------------------------------------------2
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInOppositeCorners_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(800, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 1                                                ,B
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 A'------------------------------------------------2
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 800, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsInOppositeCorners_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(1200, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 1                                                ,B
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 |                       ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 A'------------------------------------------------2
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 1200, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(0, 0), // #2
        ];
        plane.SetSites(sites);

        // 1000 A,                                                1
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 2------------------------------------------------'B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(-500, -500), // #2
        ];
        plane.SetSites(sites);

        //  500 A,                                                1
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |                       '●,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 |                                 '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 2------------------------------------------------'B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 500, -500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(-200, -200), // #2
        ];
        plane.SetSites(sites);

        //  800 A,                                                1
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,                        
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 2------------------------------------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 800, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsInOppositeCorners_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsInOppositeCorners_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1200), // #1
            new VoronoiSite(200, 200), // #2
        ];
        plane.SetSites(sites);

        // 1200 A,                                                1
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |                       '·,                        
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 2------------------------------------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnOppositeEdges()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 800), // #1
            new VoronoiSite(1000, 200), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑                                       B          
        //      |                                     ,'           
        //  900 |                                    ·             
        //      |                                  ,'              
        //  800 1                                 ·                
        //      |                               ,'                 
        //  700 |                              ·                   
        //      |                            ,'                    
        //  600 |                           ·                      
        //      |                         ,'                       
        //  500 |                        ·                         
        //      |                      ,'                          
        //  400 |                     ·                            
        //      |                   ,'                             
        //  300 |                  ·                               
        //      |                ,'                                
        //  200 |               ·                                 2
        //      |             ,'                                   
        //  100 |            ·                                     
        //      |          ,'                                      
        //    0 ●---------A---------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnOppositeEdges_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 300), // #1
            new VoronoiSite(500, -300), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑                                       B          
        //      |                                     ,'           
        //  400 |                                    ·             
        //      |                                  ,'              
        //  300 1                                 ·                
        //      |                               ,'                 
        //  200 |                              ·                   
        //      |                            ,'                    
        //  100 |                           ·                      
        //      |                         ,'                       
        //    0 |                        ●                         
        //      |                      ,'                          
        // -100 |                     ·                            
        //      |                   ,'                             
        // -200 |                  ·                               
        //      |                ,'                                
        // -300 |               ·                                 2
        //      |             ,'                                   
        // -400 |            ·                                     
        //      |          ,'                                      
        // -500 └---------A---------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, -500, 300, 500), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -300, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnOppositeEdges_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 600), // #1
            new VoronoiSite(800, 0), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑                                       B          
        //      |                                     ,'           
        //  700 |                                    ·             
        //      |                                  ,'              
        //  600 1                                 ·                
        //      |                               ,'                 
        //  500 |                              ·                   
        //      |                            ,'                    
        //  400 |                           ·                      
        //      |                         ,'                       
        //  300 |                        ·                         
        //      |                      ,'                          
        //  200 |                     ·                            
        //      |                   ,'                             
        //  100 |                  ·                               
        //      |                ,'                                
        //    0 |         ●     ·                                 2
        //      |             ,'                                   
        // -100 |            ·                                     
        //      |          ,'                                      
        // -200 └---------A---------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, 600, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 600, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 600, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void TwoPointsOnOppositeEdges_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1000), // #1
            new VoronoiSite(1200, 400), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑                                       B          
        //      |                                     ,'           
        // 1100 |                                    ·             
        //      |                                  ,'              
        // 1000 1                                 ·                
        //      |                               ,'                 
        //  900 |                              ·                   
        //      |                            ,'                    
        //  800 |                           ·                      
        //      |                         ,'                       
        //  700 |                        ·                         
        //      |                      ,'                          
        //  600 |                     ·                            
        //      |                   ,'                             
        //  500 |                  ·                               
        //      |                ,'                                
        //  400 |               ·                                 2
        //      |             ,'                                   
        //  300 |            ·                                     
        //      |          ,'                                      
        //  200 └---------A---------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 1000, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 1000, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 0), // #1
            new VoronoiSite(200, 1000), // #2
        ];
        plane.SetSites(sites);

        // 1000 ↑         2                                        
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                               ,,B
        //      |                                           ,,·'   
        //  700 |                                       ,,·'       
        //      |                                   ,,''           
        //  600 |                               ,·''               
        //      |                           ,·''                   
        //  500 |                      ,,·''                       
        //      |                  ,,·'                            
        //  400 |              ,,·'                                
        //      |          ,,''                                    
        //  300 |      ,·''                                        
        //      |  ,·''                                            
        //  200 A''                                                
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●---------------------------------------1---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 1000, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 1000, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 1000, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -500), // #1
            new VoronoiSite(-300, 500), // #2
        ];
        plane.SetSites(sites);

        //  500 ↑         2                                        
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                               ,,B
        //      |                                           ,,·'   
        //  200 |                                       ,,·'       
        //      |                                   ,,''           
        //  100 |                               ,·''               
        //      |                           ,·''                   
        //    0 |                      ,,●''                       
        //      |                  ,,·'                            
        // -100 |              ,,·'                                
        //      |          ,,''                                    
        // -200 |      ,·''                                        
        //      |  ,·''                                            
        // -300 A''                                                
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └---------------------------------------1---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -300, 500, 300), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, -200), // #1
            new VoronoiSite(0, 800), // #2
        ];
        plane.SetSites(sites);

        //  800 ↑         2                                        
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                               ,,B
        //      |                                           ,,·'   
        //  500 |                                       ,,·'       
        //      |                                   ,,''           
        //  400 |                               ,·''               
        //      |                           ,·''                   
        //  300 |                      ,,·''                       
        //      |                  ,,·'                            
        //  200 |              ,,·'                                
        //      |          ,,''                                    
        //  100 |      ,·''                                        
        //      |  ,·''                                            
        //    0 A''       ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └---------------------------------------1---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 800, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 800, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 800, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsOnOppositeEdges_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsOnOppositeEdges_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 200), // #1
            new VoronoiSite(400, 1200), // #2
        ];
        plane.SetSites(sites);

        // 1200 ↑         2                                        
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                               ,,B
        //      |                                           ,,·'   
        //  900 |                                       ,,·'       
        //      |                                   ,,''           
        //  800 |                               ,·''               
        //      |                           ,·''                   
        //  700 |                      ,,·''                       
        //      |                  ,,·'                            
        //  600 |              ,,·'                                
        //      |          ,,''                                    
        //  500 |      ,·''                                        
        //      |  ,·''                                            
        //  400 A''                                                
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └---------------------------------------1---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(2), "Expected: point count 2");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(edges.Count, Is.EqualTo(1), "Expected: edge count 1");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 1200, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(800, 200), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                 ,D               
        //      |                               ,'                 
        //  900 |                            ,·'                   
        //      |                          ,'                      
        //  800 |         1             ,·'                        
        //      |                     ,'                           
        //  700 |                  ,·'                           ,C
        //      |                ,'                            ,'  
        //  600 |             ,·'                           ,·'    
        //      |           ,'                            ,'       
        //  500 |        ,·'             2             ,·'         
        //      |      ,'                            ,'            
        //  400 |   ,·'                           ,·'              
        //      | ,'                            ,'                 
        //  300 A'                           ,·'                   
        //      |                          ,'                      
        //  200 |                       ,·'             3          
        //      |                     ,'                           
        //  100 |                  ,·'                             
        //      |                ,'                                
        //    0 ●--------------B'---------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 300, 700, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 0, 1000, 700), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 0, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 700, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(300, -300), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                 ,D               
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |         1             ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                           ,C
        //      |                ,'                            ,'  
        //  100 |             ,·'                           ,·'    
        //      |           ,'                            ,'       
        //    0 |        ,·'             2             ,·'         
        //      |      ,'                            ,'            
        // -100 |   ,·'                           ,·'              
        //      | ,'                            ,'                 
        // -200 A'                           ,·'                   
        //      |                          ,'                      
        // -300 |                       ,·'             3          
        //      |                     ,'                           
        // -400 |                  ,·'                             
        //      |                ,'                                
        // -500 └--------------B'---------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -200, 200, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -200, -500, 500, 200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -500, 500, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -500, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -500, 500, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -200, 200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(600, 0), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                 ,D               
        //      |                               ,'                 
        //  700 |                            ,·'                   
        //      |                          ,'                      
        //  600 |         1             ,·'                        
        //      |                     ,'                           
        //  500 |                  ,·'                           ,C
        //      |                ,'                            ,'  
        //  400 |             ,·'                           ,·'    
        //      |           ,'                            ,'       
        //  300 |        ,·'             2             ,·'         
        //      |      ,'                            ,'            
        //  200 |   ,·'                           ,·'              
        //      | ,'                            ,'                 
        //  100 A'                           ,·'                   
        //      |                          ,'                      
        //    0 |         ●             ,·'             3          
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 └--------------B'---------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 100, 500, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, -200, 800, 500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 100, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 800, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -200, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 500, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 800, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 500, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1000, 400), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                 ,D               
        //      |                               ,'                 
        // 1100 |                            ,·'                   
        //      |                          ,'                      
        // 1000 |         1             ,·'                        
        //      |                     ,'                           
        //  900 |                  ,·'                           ,C
        //      |                ,'                            ,'  
        //  800 |             ,·'                           ,·'    
        //      |           ,'                            ,'       
        //  700 |        ,·'             2             ,·'         
        //      |      ,'                            ,'            
        //  600 |   ,·'                           ,·'              
        //      | ,'                            ,'                 
        //  500 A'                           ,·'                   
        //      |                          ,'                      
        //  400 |                       ,·'             3          
        //      |                     ,'                           
        //  300 |                  ,·'                             
        //      |                ,'                                
        //  200 └--------------B'---------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 900, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 200, 1200, 900), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 1200, 900)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 900, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 1200, 900)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 900, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 900, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(200, 200), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              A,                                  
        //      |                ',                                
        //  900 |                  '·,                             
        //      |                     ',                           
        //  800 |                       '·,             1          
        //      |                          ',                      
        //  700 B,                           '·,                   
        //      | ',                            ',                 
        //  600 |   '·,                           '·,              
        //      |      ',                            ',            
        //  500 |        '·,             2             '·,         
        //      |           ',                            ',       
        //  400 |             '·,                           '·,    
        //      |                ',                            ',  
        //  300 |                  '·,                           'D
        //      |                     ',                           
        //  200 |         3             '·,                        
        //      |                          ',                      
        //  100 |                            '·,                   
        //      |                               ',                 
        //    0 ●---------------------------------'C--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 1000, 1000, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 700, 700, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 300, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-300, -300), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑              A,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,             1          
        //      |                          ',                      
        //  200 B,                           '·,                   
        //      | ',                            ',                 
        //  100 |   '·,                           '·,              
        //      |      ',                            ',            
        //    0 |        '·,             2             '·,         
        //      |           ',                            ',       
        // -100 |             '·,                           '·,    
        //      |                ',                            ',  
        // -200 |                  '·,                           'D
        //      |                     ',                           
        // -300 |         3             '·,                        
        //      |                          ',                      
        // -400 |                            '·,                   
        //      |                               ',                 
        // -500 └---------------------------------'C--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 500, 500, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -500, 200, 200, -500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 200, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 500, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 200, 200, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 500, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(0, 0), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑              A,                                  
        //      |                ',                                
        //  700 |                  '·,                             
        //      |                     ',                           
        //  600 |                       '·,             1          
        //      |                          ',                      
        //  500 B,                           '·,                   
        //      | ',                            ',                 
        //  400 |   '·,                           '·,              
        //      |      ',                            ',            
        //  300 |        '·,             2             '·,         
        //      |           ',                            ',       
        //  200 |             '·,                           '·,    
        //      |                ',                            ',  
        //  100 |                  '·,                           'D
        //      |                     ',                           
        //    0 |         3             '·,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 └---------------------------------'C--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 800, 800, 100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -200, 500, 500, -200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 500, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 100, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 800, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 500, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 800, 800, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(400, 400), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              A,                                  
        //      |                ',                                
        // 1100 |                  '·,                             
        //      |                     ',                           
        // 1000 |                       '·,             1          
        //      |                          ',                      
        //  900 B,                           '·,                   
        //      | ',                            ',                 
        //  800 |   '·,                           '·,              
        //      |      ',                            ',            
        //  700 |        '·,             2             '·,         
        //      |           ',                            ',       
        //  600 |             '·,                           '·,    
        //      |                ',                            ',  
        //  500 |                  '·,                           'D
        //      |                     ',                           
        //  400 |         3             '·,                        
        //      |                          ',                      
        //  300 |                            '·,                   
        //      |                               ',                 
        //  200 └---------------------------------'C--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1200, 1200, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 900, 900, 200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 900, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 500, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 1200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 900, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 900, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1200, 1200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                            ,D                  ,C
        //      |                          ,'                  ,'  
        //  900 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  800 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  700 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  600 |        ,·'        2        ,·'                   
        //      |      ,'                  ,'                      
        //  500 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //  400 A'                 ,·'        3                    
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 B'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 600, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 0, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 600, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, -100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                            ,D                  ,C
        //      |                          ,'                  ,'  
        //  400 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  300 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  200 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  100 |        ,·'        2        ,·'                   
        //      |      ,'                  ,'                      
        //    0 |   ,·'                 ,●'                        
        //      | ,'                  ,'                           
        // -100 A'                 ,·'        3                    
        //      |                ,'                                
        // -200 |             ,·'                                  
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 B'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -100, 100, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -500, -500, 500, 500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -500, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 100, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 100, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 100, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(400, 200), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                            ,D                  ,C
        //      |                          ,'                  ,'  
        //  700 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  600 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  500 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  400 |        ,·'        2        ,·'                   
        //      |      ,'                  ,'                      
        //  300 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //  200 A'                 ,·'        3                    
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 B'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 200, 400, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -200, -200, 800, 800), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 400, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 400, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 400, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(600, 800), // #2
            new VoronoiSite(800, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                            ,D                  ,C
        //      |                          ,'                  ,'  
        // 1100 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        // 1000 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  900 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  800 |        ,·'        2        ,·'                   
        //      |      ,'                  ,'                      
        //  700 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //  600 A'                 ,·'        3                    
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 B'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 600, 800, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 200, 1200, 1200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 800, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 800, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 B,                  A,                             
        //      | ',                  ',                           
        //  900 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  800 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  700 |             '·,                 '·,              
        //      |                ',                  ',            
        //  600 |                  '·,        2        '·,         
        //      |                     ',                  ',       
        //  500 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //  400 |                   3        '·,                 'D
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 1000, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, -100), // #3
        ];
        plane.SetSites(sites);

        //  500 B,                  A,                             
        //      | ',                  ',                           
        //  400 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  300 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  200 |             '·,                 '·,              
        //      |                ',                  ',            
        //  100 |                  '·,        2        '·,         
        //      |                     ',                  ',       
        //    0 |                       '●,                 '·,    
        //      |                          ',                  ',  
        // -100 |                   3        '·,                 'D
        //      |                               ',                 
        // -200 |                                 '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 500, 500, -100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -500, 500, 500, -500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -100, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, 500, -100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, 500, -100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 200), // #3
        ];
        plane.SetSites(sites);

        //  800 B,                  A,                             
        //      | ',                  ',                           
        //  700 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  600 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  500 |             '·,                 '·,              
        //      |                ',                  ',            
        //  400 |                  '·,        2        '·,         
        //      |                     ',                  ',       
        //  300 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //  200 |                   3        '·,                 'D
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 800, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -200, 800, 800, -200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(600, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 B,                  A,                             
        //      | ',                  ',                           
        // 1100 |   '·,                 '·,                        
        //      |      ',                  ',                      
        // 1000 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  900 |             '·,                 '·,              
        //      |                ',                  ',            
        //  800 |                  '·,        2        '·,         
        //      |                     ',                  ',       
        //  700 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //  600 |                   3        '·,                 'D
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 1200, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 1200, 1200, 200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 600, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1200, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1200, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(400, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,B
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                   3        ,·'                 ,A
        //      |                          ,'                  ,'  
        //  500 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  400 |                  ,·'        2        ,·'         
        //      |                ,'                  ,'            
        //  300 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  200 |        ,·'                 ,·'        1          
        //      |      ,'                  ,'                      
        //  100 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //    0 C'------------------D'----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 600, 400, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1000, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 400, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -300), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(-100, 100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,B
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 |                   3        ,·'                 ,A
        //      |                          ,'                  ,'  
        //    0 |                       ,●'                 ,·'    
        //      |                     ,'                  ,'       
        // -100 |                  ,·'        2        ,·'         
        //      |                ,'                  ,'            
        // -200 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        // -300 |        ,·'                 ,·'        1          
        //      |      ,'                  ,'                      
        // -400 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        // -500 C'------------------D'----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 100, -100, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, -500, -500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 500, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -100, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -100, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -100, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 0), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(200, 400), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,B
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |                   3        ,·'                 ,A
        //      |                          ,'                  ,'  
        //  300 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  200 |                  ,·'        2        ,·'         
        //      |                ,'                  ,'            
        //  100 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //    0 |        ,●'                 ,·'        1          
        //      |      ,'                  ,'                      
        // -100 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        // -200 C'------------------D'----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 400, 200, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, 800, -200, -200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 800, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 200, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 200, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 400), // #1
            new VoronoiSite(800, 600), // #2
            new VoronoiSite(600, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,B
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |                   3        ,·'                 ,A
        //      |                          ,'                  ,'  
        //  700 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  600 |                  ,·'        2        ,·'         
        //      |                ,'                  ,'            
        //  500 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  400 |        ,·'                 ,·'        1          
        //      |      ,'                  ,'                      
        //  300 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //  200 C'------------------D'----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 800, 600, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1200, 1200, 200, 200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 600, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 600, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 600, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(600, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 C,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 D,                 '·,        3                    
        //      | ',                  ',                           
        //  500 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  400 |        '·,        2        '·,                   
        //      |           ',                  ',                 
        //  300 |             '·,                 '·,              
        //      |                ',                  ',            
        //  200 |         1        '·,                 '·,         
        //      |                     ',                  ',       
        //  100 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //    0 ●----------------------------'A------------------'B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 0, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 0, 1000), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -300), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        //  500 C,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 D,                 '·,        3                    
        //      | ',                  ',                           
        //    0 |   '·,                 '●,                        
        //      |      ',                  ',                      
        // -100 |        '·,        2        '·,                   
        //      |           ',                  ',                 
        // -200 |             '·,                 '·,              
        //      |                ',                  ',            
        // -300 |         1        '·,                 '·,         
        //      |                     ',                  ',       
        // -400 |                       '·,                 '·,    
        //      |                          ',                  ',  
        // -500 └----------------------------'A------------------'B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -500, -500, 100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, -500, -500, 500), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 100, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, -500, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, -500, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(400, 400), // #3
        ];
        plane.SetSites(sites);

        //  800 C,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 D,                 '·,        3                    
        //      | ',                  ',                           
        //  300 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  200 |        '·,        2        '·,                   
        //      |           ',                  ',                 
        //  100 |             '·,                 '·,              
        //      |                ',                  ',            
        //    0 |         1        '·,                 '·,         
        //      |                     ',                  ',       
        // -100 |                       '·,                 '·,    
        //      |                          ',                  ',  
        // -200 └----------------------------'A------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, -200, -200, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, -200, -200, 800), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 400, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, -200, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, -200, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(800, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 C,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 D,                 '·,        3                    
        //      | ',                  ',                           
        //  700 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  600 |        '·,        2        '·,                   
        //      |           ',                  ',                 
        //  500 |             '·,                 '·,              
        //      |                ',                  ',            
        //  400 |         1        '·,                 '·,         
        //      |                     ',                  ',       
        //  300 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //  200 └----------------------------'A------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 200, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1200, 200, 200, 1200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
            new VoronoiSite(800, 200), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                            ,F                  ,E
        //      |                          ,'                  ,'  
        //  900 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  800 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  700 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  600 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,'  
        //  500 |   ,·'                 ,·'                 ,·'    
        //      | ,'                  ,'                  ,'       
        //  400 A'                 ,·'        3        ,·'         
        //      |                ,'                  ,'            
        //  300 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  200 |        ,·'                 ,·'        4          
        //      |      ,'                  ,'                      
        //  100 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //    0 B'------------------C'----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 600, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 400, 0, 1000, 600), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 0, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 1000, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 600, 1000); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 1000, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(300, -300), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                            ,F                  ,E
        //      |                          ,'                  ,'  
        //  400 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  300 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  200 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  100 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,'  
        //    0 |   ,·'                 ,●'                 ,·'    
        //      | ,'                  ,'                  ,'       
        // -100 A'                 ,·'        3        ,·'         
        //      |                ,'                  ,'            
        // -200 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        // -300 |        ,·'                 ,·'        4          
        //      |      ,'                  ,'                      
        // -400 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        // -500 B'------------------C'----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -100, 100, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -500, -500, 500, 500), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, -100, -500, 500, 100), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, -100, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, 500, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -500, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 100, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 500, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, 500, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 100, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 100, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 500)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(400, 200), // #3
            new VoronoiSite(600, 0), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                            ,F                  ,E
        //      |                          ,'                  ,'  
        //  700 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        //  600 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  500 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  400 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,'  
        //  300 |   ,·'                 ,·'                 ,·'    
        //      | ,'                  ,'                  ,'       
        //  200 A'                 ,·'        3        ,·'         
        //      |                ,'                  ,'            
        //  100 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //    0 |        ,●'                 ,·'        4          
        //      |      ,'                  ,'                      
        // -100 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        // -200 B'------------------C'----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 200, 400, 800), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -200, -200, 800, 800), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 200, -200, 800, 400), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, 200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 800, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 400, 800)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 800, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 800, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 400, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 400, 800)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 800, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 800)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(600, 800), // #2
            new VoronoiSite(800, 600), // #3
            new VoronoiSite(1000, 400), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                            ,F                  ,E
        //      |                          ,'                  ,'  
        // 1100 |                       ,·'                 ,·'    
        //      |                     ,'                  ,'       
        // 1000 |         1        ,·'                 ,·'         
        //      |                ,'                  ,'            
        //  900 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  800 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,'  
        //  700 |   ,·'                 ,·'                 ,·'    
        //      | ,'                  ,'                  ,'       
        //  600 A'                 ,·'        3        ,·'         
        //      |                ,'                  ,'            
        //  500 |             ,·'                 ,·'              
        //      |           ,'                  ,'                 
        //  400 |        ,·'                 ,·'        4          
        //      |      ,'                  ,'                      
        //  300 |   ,·'                 ,·'                        
        //      | ,'                  ,'                           
        //  200 B'------------------C'----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 600, 800, 1200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 200, 200, 1200, 1200), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 600, 200, 1200, 800), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 1200, 800)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 800, 1200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 1200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 1200, 800)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 800, 1200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 800, 1200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 1200, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 1200)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(200, 200), // #4
        ];
        plane.SetSites(sites);

        // 1000 B,                  A,                             
        //      | ',                  ',                           
        //  900 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  800 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  700 |             '·,                 '·,              
        //      |                ',                  ',            
        //  600 C,                 '·,        2        '·,         
        //      | ',                  ',                  ',       
        //  500 |   '·,                 '·,                 '·,    
        //      |      ',                  ',                  ',  
        //  400 |        '·,        3        '·,                 'F
        //      |           ',                  ',                 
        //  300 |             '·,                 '·,              
        //      |                ',                  ',            
        //  200 |         4        '·,                 '·,         
        //      |                     ',                  ',       
        //  100 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //    0 ●----------------------------'D------------------'E
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 1000, 400), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 0, 600, 600, 0), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 1000, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 1000, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, -100), // #3
            new VoronoiSite(-300, -300), // #4
        ];
        plane.SetSites(sites);

        //  500 B,                  A,                             
        //      | ',                  ',                           
        //  400 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  300 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  200 |             '·,                 '·,              
        //      |                ',                  ',            
        //  100 C,                 '·,        2        '·,         
        //      | ',                  ',                  ',       
        //    0 |   '·,                 '●,                 '·,    
        //      |      ',                  ',                  ',  
        // -100 |        '·,        3        '·,                 'F
        //      |           ',                  ',                 
        // -200 |             '·,                 '·,              
        //      |                ',                  ',            
        // -300 |         4        '·,                 '·,         
        //      |                     ',                  ',       
        // -400 |                       '·,                 '·,    
        //      |                          ',                  ',  
        // -500 └----------------------------'D------------------'E
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 500, 500, -100), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -500, 500, 500, -500), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, -500, 100, 100, -500), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, -500, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 100, -500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -100, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, 500, -100)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 100, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 100, -500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 500, -100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, 500, -100)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, -500)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(0, 0), // #4
        ];
        plane.SetSites(sites);

        //  800 B,                  A,                             
        //      | ',                  ',                           
        //  700 |   '·,                 '·,                        
        //      |      ',                  ',                      
        //  600 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  500 |             '·,                 '·,              
        //      |                ',                  ',            
        //  400 C,                 '·,        2        '·,         
        //      | ',                  ',                  ',       
        //  300 |   '·,                 '·,                 '·,    
        //      |      ',                  ',                  ',  
        //  200 |        '·,        3        '·,                 'F
        //      |           ',                  ',                 
        //  100 |             '·,                 '·,              
        //      |                ',                  ',            
        //    0 |         4        '·,                 '·,         
        //      |                     ',                  ',       
        // -100 |                       '·,                 '·,    
        //      |                          ',                  ',  
        // -200 └----------------------------'D------------------'E
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 800, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -200, 800, 800, -200), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, -200, 400, 400, -200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, -200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 400, -200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 400, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 400, -200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 800, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 800, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, -200)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(600, 600), // #3
            new VoronoiSite(400, 400), // #4
        ];
        plane.SetSites(sites);

        // 1200 B,                  A,                             
        //      | ',                  ',                           
        // 1100 |   '·,                 '·,                        
        //      |      ',                  ',                      
        // 1000 |        '·,                 '·,        1          
        //      |           ',                  ',                 
        //  900 |             '·,                 '·,              
        //      |                ',                  ',            
        //  800 C,                 '·,        2        '·,         
        //      | ',                  ',                  ',       
        //  700 |   '·,                 '·,                 '·,    
        //      |      ',                  ',                  ',  
        //  600 |        '·,        3        '·,                 'F
        //      |           ',                  ',                 
        //  500 |             '·,                 '·,              
        //      |                ',                  ',            
        //  400 |         4        '·,                 '·,         
        //      |                     ',                  ',       
        //  300 |                       '·,                 '·,    
        //      |                          ',                  ',  
        //  200 └----------------------------'D------------------'E
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(6), "Expected: point count 6");
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point F"); // F
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 1200, 600), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 200, 1200, 1200, 200), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 200, 800, 800, 200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point B has edge B-E"); // B on B-E
        point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 600, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1200, 600)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 800, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 1200, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1200, 600)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 1200, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 200)), Is.True, "Expected: point E has edge B-E"); // E on B-E
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,D
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |              1        ,·'                        
        //      |                     ,'                           
        //  400 B-------------------A'                             
        //      |                   |                              
        //  300 |              2    |    3                         
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 ●-------------------C-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 400, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 1000, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(0, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,D
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 |              1        ,●'                        
        //      |                     ,'                           
        // -100 B-------------------A'                             
        //      |                   |                              
        // -200 |              2    |    3                         
        //      |                   |                              
        // -300 |                   |                              
        //      |                   |                              
        // -400 |                   |                              
        //      |                   |                              
        // -500 └-------------------C-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -100, -500, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -100, -100, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, -100, 500, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -100, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,D
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |                                 ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |              1        ,·'                        
        //      |                     ,'                           
        //  200 B-------------------A'                             
        //      |                   |                              
        //  100 |              2    |    3                         
        //      |                   |                              
        //    0 |         ●         |                              
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 └-------------------C-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, -200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 200, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, 800, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,D
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 |              1        ,·'                        
        //      |                     ,'                           
        //  600 B-------------------A'                             
        //      |                   |                              
        //  500 |              2    |    3                         
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 └-------------------C-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 600, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 1200, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                   B                              
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |              2    |    1                         
        //      |                   |                              
        //  600 C-------------------A,                             
        //      |                     ',                           
        //  500 |              3        '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 400, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                   B                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |              2    |    1                         
        //      |                   |                              
        //  100 C-------------------A,                             
        //      |                     ',                           
        //    0 |              3        '●,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 |                                 '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 100, -100, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, 100, -500, 100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, 100, 500, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                   B                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |              2    |    1                         
        //      |                   |                              
        //  400 C-------------------A,                             
        //      |                     ',                           
        //  300 |              3        '·,                        
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 400, -200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 400, 800, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                   B                              
        //      |                   |                              
        // 1100 |                   |                              
        //      |                   |                              
        // 1000 |                   |                              
        //      |                   |                              
        //  900 |              2    |    1                         
        //      |                   |                              
        //  800 C-------------------A,                             
        //      |                     ',                           
        //  700 |              3        '·,                        
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                                 '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 600, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, 200, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 800, 1200, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 600, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 600, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             C                    
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 |                        3    |    2               
        //      |                             |                    
        //  600 |                            ,A-------------------B
        //      |                          ,'                      
        //  500 |                       ,·'        1               
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 D'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 600, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 0, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(0, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                             C                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 |                        3    |    2               
        //      |                             |                    
        //  100 |                            ,A-------------------B
        //      |                          ,'                      
        //    0 |                       ,●'        1               
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 |             ,·'                                  
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 D'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 100, 500, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 100, 100, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 100, -500, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                             C                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 |                        3    |    2               
        //      |                             |                    
        //  400 |                            ,A-------------------B
        //      |                          ,'                      
        //  300 |                       ,·'        1               
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 D'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 800, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 400, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, -200, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             C                    
        //      |                             |                    
        // 1100 |                             |                    
        //      |                             |                    
        // 1000 |                             |                    
        //      |                             |                    
        //  900 |                        3    |    2               
        //      |                             |                    
        //  800 |                            ,A-------------------B
        //      |                          ,'                      
        //  700 |                       ,·'        1               
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'                                  
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 D'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 1200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, 800, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 800, 200, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 D,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,        3               
        //      |                          ',                      
        //  400 |                            'A-------------------C
        //      |                             |                    
        //  300 |                        1    |    2               
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 ●-----------------------------B-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 600, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 1000, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 0, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 D,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |                       '●,        3               
        //      |                          ',                      
        // -100 |                            'A-------------------C
        //      |                             |                    
        // -200 |                        1    |    2               
        //      |                             |                    
        // -300 |                             |                    
        //      |                             |                    
        // -400 |                             |                    
        //      |                             |                    
        // -500 └-----------------------------B-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -100, 100, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, -100, 500, -100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, -100, -500, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 D,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,        3               
        //      |                          ',                      
        //  200 |                            'A-------------------C
        //      |                             |                    
        //  100 |                        1    |    2               
        //      |                             |                    
        //    0 |         ●                   |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 └-----------------------------B-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, 400, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 800, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 200, -200, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 400, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 400, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 D,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |                       '·,        3               
        //      |                          ',                      
        //  600 |                            'A-------------------C
        //      |                             |                    
        //  500 |                        1    |    2               
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 └-----------------------------B-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, 800, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 600, 1200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 600, 200, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(100, 400), // #2
            new VoronoiSite(500, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                 ,D               
        //      |                               ,'                 
        //  900 |                            ,·'                   
        //      |                          ,'                      
        //  800 |    1                  ,·'                        
        //      |                     ,'                           
        //  700 |                  ,·'                             
        //      |                ,'                                
        //  600 B--------------A'                                  
        //      |              |                                   
        //  500 |              |                                   
        //      |              |                                   
        //  400 |    2         |         3                         
        //      |              |                                   
        //  300 |              |                                   
        //      |              |                                   
        //  200 |              |                                   
        //      |              |                                   
        //  100 |              |                                   
        //      |              |                                   
        //    0 ●--------------C----------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 600, 0, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 600, 300, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 600, 700, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 300), // #1
            new VoronoiSite(-400, -100), // #2
            new VoronoiSite(0, -100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                 ,D               
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |    1                  ,·'                        
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 B--------------A'                                  
        //      |              |                                   
        //    0 |              |         ●                         
        //      |              |                                   
        // -100 |    2         |         3                         
        //      |              |                                   
        // -200 |              |                                   
        //      |              |                                   
        // -300 |              |                                   
        //      |              |                                   
        // -400 |              |                                   
        //      |              |                                   
        // -500 └--------------C----------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 100, -500, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 100, -200, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 100, 200, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, -200, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, -500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, -500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, -200, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 600), // #1
            new VoronoiSite(-100, 200), // #2
            new VoronoiSite(300, 200), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                 ,D               
        //      |                               ,'                 
        //  700 |                            ,·'                   
        //      |                          ,'                      
        //  600 |    1                  ,·'                        
        //      |                     ,'                           
        //  500 |                  ,·'                             
        //      |                ,'                                
        //  400 B--------------A'                                  
        //      |              |                                   
        //  300 |              |                                   
        //      |              |                                   
        //  200 |    2         |         3                         
        //      |              |                                   
        //  100 |              |                                   
        //      |              |                                   
        //    0 |         ●    |                                   
        //      |              |                                   
        // -100 |              |                                   
        //      |              |                                   
        // -200 └--------------C----------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 400, -200, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 400, 100, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 400, 500, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 100, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, -200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, -200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 100, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 500, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 500, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 1000), // #1
            new VoronoiSite(300, 600), // #2
            new VoronoiSite(700, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                 ,D               
        //      |                               ,'                 
        // 1100 |                            ,·'                   
        //      |                          ,'                      
        // 1000 |    1                  ,·'                        
        //      |                     ,'                           
        //  900 |                  ,·'                             
        //      |                ,'                                
        //  800 B--------------A'                                  
        //      |              |                                   
        //  700 |              |                                   
        //      |              |                                   
        //  600 |    2         |         3                         
        //      |              |                                   
        //  500 |              |                                   
        //      |              |                                   
        //  400 |              |                                   
        //      |              |                                   
        //  300 |              |                                   
        //      |              |                                   
        //  200 └--------------C----------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 800, 200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 800, 500, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 800, 900, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 500, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 900, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 900, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 900, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 900), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             B                    
        //      |                             |                    
        //  900 |                   2         |         1          
        //      |                             |                    
        //  800 |                             |                    
        //      |                             |                    
        //  700 C-----------------------------A,                   
        //      |                               ',                 
        //  600 |                                 '·,              
        //      |                                    ',            
        //  500 |                   3                  '·,         
        //      |                                         ',       
        //  400 |                                           '·,    
        //      |                                              ',  
        //  300 |                                                'D
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 700, 600, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 700, 0, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 700, 1000, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(-100, 400), // #2
            new VoronoiSite(-100, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                             B                    
        //      |                             |                    
        //  400 |                   2         |         1          
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 C-----------------------------A,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 |                   3    ●             '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 |                                                'D
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 200, 100, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 200, -500, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 200, 500, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, -500, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, -500, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 500, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 500, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 700), // #1
            new VoronoiSite(200, 700), // #2
            new VoronoiSite(200, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                             B                    
        //      |                             |                    
        //  700 |                   2         |         1          
        //      |                             |                    
        //  600 |                             |                    
        //      |                             |                    
        //  500 C-----------------------------A,                   
        //      |                               ',                 
        //  400 |                                 '·,              
        //      |                                    ',            
        //  300 |                   3                  '·,         
        //      |                                         ',       
        //  200 |                                           '·,    
        //      |                                              ',  
        //  100 |                                                'D
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 500, 400, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 500, -200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 500, 800, 100), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, -200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, -200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 800, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 800, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1100), // #1
            new VoronoiSite(600, 1100), // #2
            new VoronoiSite(600, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             B                    
        //      |                             |                    
        // 1100 |                   2         |         1          
        //      |                             |                    
        // 1000 |                             |                    
        //      |                             |                    
        //  900 C-----------------------------A,                   
        //      |                               ',                 
        //  800 |                                 '·,              
        //      |                                    ',            
        //  700 |                   3                  '·,         
        //      |                                         ',       
        //  600 |                                           '·,    
        //      |                                              ',  
        //  500 |                                                'D
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 900, 800, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 900, 200, 900), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 900, 1200, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 200, 900)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 800, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 800, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 200, 900)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 1200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 900, 1200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 200), // #1
            new VoronoiSite(900, 600), // #2
            new VoronoiSite(500, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                  C               
        //      |                                  |               
        //  900 |                                  |               
        //      |                                  |               
        //  800 |                                  |               
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                        3         |         2     
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                                 ,A--------------B
        //      |                               ,'                 
        //  300 |                            ,·'                   
        //      |                          ,'                      
        //  200 |                       ,·'                  1     
        //      |                     ,'                           
        //  100 |                  ,·'                             
        //      |                ,'                                
        //    0 ●--------------D'---------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 400, 1000, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 400, 700, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 400, 300, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 700, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, -300), // #1
            new VoronoiSite(400, 100), // #2
            new VoronoiSite(0, 100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                  C               
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                                  |               
        //      |                                  |               
        //  100 |                        3         |         2     
        //      |                                  |               
        //    0 |                        ●         |               
        //      |                                  |               
        // -100 |                                 ,A--------------B
        //      |                               ,'                 
        // -200 |                            ,·'                   
        //      |                          ,'                      
        // -300 |                       ,·'                  1     
        //      |                     ,'                           
        // -400 |                  ,·'                             
        //      |                ,'                                
        // -500 └--------------D'---------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, -100, 500, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, -100, 200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, -100, -200, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, -200, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, -200, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 0), // #1
            new VoronoiSite(700, 400), // #2
            new VoronoiSite(300, 400), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                  C               
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                                  |               
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                        3         |         2     
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                                 ,A--------------B
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 |         ●             ,·'                  1     
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 └--------------D'---------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 200, 800, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 200, 500, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 200, 100, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 500, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 500, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 100, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 100, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 100, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 400), // #1
            new VoronoiSite(1100, 800), // #2
            new VoronoiSite(700, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                  C               
        //      |                                  |               
        // 1100 |                                  |               
        //      |                                  |               
        // 1000 |                                  |               
        //      |                                  |               
        //  900 |                                  |               
        //      |                                  |               
        //  800 |                        3         |         2     
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                                 ,A--------------B
        //      |                               ,'                 
        //  500 |                            ,·'                   
        //      |                          ,'                      
        //  400 |                       ,·'                  1     
        //      |                     ,'                           
        //  300 |                  ,·'                             
        //      |                ,'                                
        //  200 └--------------D'---------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 600, 1200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 600, 900, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 600, 500, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 900, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 1200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 900, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 1200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 900, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 500, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 500, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 100), // #1
            new VoronoiSite(600, 100), // #2
            new VoronoiSite(600, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 D,                                                 
        //      | ',                                               
        //  600 |   '·,                                            
        //      |      ',                                          
        //  500 |        '·,                  3                    
        //      |           ',                                     
        //  400 |             '·,                                  
        //      |                ',                                
        //  300 |                  'A-----------------------------C
        //      |                   |                              
        //  200 |                   |                              
        //      |                   |                              
        //  100 |         1         |         2                    
        //      |                   |                              
        //    0 ●-------------------B-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 300, 400, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 300, 1000, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 300, 0, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -400), // #1
            new VoronoiSite(100, -400), // #2
            new VoronoiSite(100, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 D,                                                 
        //      | ',                                               
        //  100 |   '·,                                            
        //      |      ',                                          
        //    0 |        '·,             ●    3                    
        //      |           ',                                     
        // -100 |             '·,                                  
        //      |                ',                                
        // -200 |                  'A-----------------------------C
        //      |                   |                              
        // -300 |                   |                              
        //      |                   |                              
        // -400 |         1         |         2                    
        //      |                   |                              
        // -500 └-------------------B-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -200, -100, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -200, 500, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, -200, -500, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, 500, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, -100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -100, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, -100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, 500, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, -500, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, -500, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -100), // #1
            new VoronoiSite(400, -100), // #2
            new VoronoiSite(400, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 D,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                  3                    
        //      |           ',                                     
        //  200 |             '·,                                  
        //      |                ',                                
        //  100 |                  'A-----------------------------C
        //      |                   |                              
        //    0 |         ●         |                              
        //      |                   |                              
        // -100 |         1         |         2                    
        //      |                   |                              
        // -200 └-------------------B-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 100, 200, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 100, 800, 100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 100, -200, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 800, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 800, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(800, 300), // #2
            new VoronoiSite(800, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 D,                                                 
        //      | ',                                               
        //  800 |   '·,                                            
        //      |      ',                                          
        //  700 |        '·,                  3                    
        //      |           ',                                     
        //  600 |             '·,                                  
        //      |                ',                                
        //  500 |                  'A-----------------------------C
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |         1         |         2                    
        //      |                   |                              
        //  200 └-------------------B-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 500, 600, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 500, 1200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 500, 200, 900), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 1200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 1200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 200, 900)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 900); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 200, 900)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 800), // #1
            new VoronoiSite(900, 400), // #2
            new VoronoiSite(500, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              D,                                  
        //      |                ',                                
        //  900 |                  '·,                             
        //      |                     ',                           
        //  800 |                       '·,                  1     
        //      |                          ',                      
        //  700 |                            '·,                   
        //      |                               ',                 
        //  600 |                                 'A--------------B
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                        3         |         2     
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                                  |               
        //      |                                  |               
        //  100 |                                  |               
        //      |                                  |               
        //    0 ●----------------------------------C--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 600, 700, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 600, 300, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 700, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(400, -100), // #2
            new VoronoiSite(0, -100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑              D,                                  
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |                       '·,                  1     
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                                 'A--------------B
        //      |                                  |               
        //    0 |                        ●         |               
        //      |                                  |               
        // -100 |                        3         |         2     
        //      |                                  |               
        // -200 |                                  |               
        //      |                                  |               
        // -300 |                                  |               
        //      |                                  |               
        // -400 |                                  |               
        //      |                                  |               
        // -500 └----------------------------------C--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 100, 500, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 100, 200, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 100, -200, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 200, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 200, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 600), // #1
            new VoronoiSite(700, 200), // #2
            new VoronoiSite(300, 200), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑              D,                                  
        //      |                ',                                
        //  700 |                  '·,                             
        //      |                     ',                           
        //  600 |                       '·,                  1     
        //      |                          ',                      
        //  500 |                            '·,                   
        //      |                               ',                 
        //  400 |                                 'A--------------B
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 |                        3         |         2     
        //      |                                  |               
        //  100 |                                  |               
        //      |                                  |               
        //    0 |         ●                        |               
        //      |                                  |               
        // -100 |                                  |               
        //      |                                  |               
        // -200 └----------------------------------C--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 400, 800, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 400, 500, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 400, 100, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 800, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 800, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 100, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 100, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 100, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 1000), // #1
            new VoronoiSite(1100, 600), // #2
            new VoronoiSite(700, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              D,                                  
        //      |                ',                                
        // 1100 |                  '·,                             
        //      |                     ',                           
        // 1000 |                       '·,                  1     
        //      |                          ',                      
        //  900 |                            '·,                   
        //      |                               ',                 
        //  800 |                                 'A--------------B
        //      |                                  |               
        //  700 |                                  |               
        //      |                                  |               
        //  600 |                        3         |         2     
        //      |                                  |               
        //  500 |                                  |               
        //      |                                  |               
        //  400 |                                  |               
        //      |                                  |               
        //  300 |                                  |               
        //      |                                  |               
        //  200 └----------------------------------C--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 800, 1200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 800, 900, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 800, 500, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 900, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 1200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 900, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 1200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 900, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 500, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 800, 500, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(400, 100), // #2
            new VoronoiSite(400, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                ,D
        //      |                                              ,'  
        //  600 |                                           ,·'    
        //      |                                         ,'       
        //  500 |                   3                  ,·'         
        //      |                                    ,'            
        //  400 |                                 ,·'              
        //      |                               ,'                 
        //  300 C-----------------------------A'                   
        //      |                             |                    
        //  200 |                             |                    
        //      |                             |                    
        //  100 |                   2         |         1          
        //      |                             |                    
        //    0 ●-----------------------------B-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 300, 600, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 300, 0, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 300, 1000, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -400), // #1
            new VoronoiSite(-100, -400), // #2
            new VoronoiSite(-100, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                ,D
        //      |                                              ,'  
        //  100 |                                           ,·'    
        //      |                                         ,'       
        //    0 |                   3    ●             ,·'         
        //      |                                    ,'            
        // -100 |                                 ,·'              
        //      |                               ,'                 
        // -200 C-----------------------------A'                   
        //      |                             |                    
        // -300 |                             |                    
        //      |                             |                    
        // -400 |                   2         |         1          
        //      |                             |                    
        // -500 └-----------------------------B-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -200, 100, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, -200, -500, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, -200, 500, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, -500, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, -500, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 500, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 500, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, -100), // #1
            new VoronoiSite(200, -100), // #2
            new VoronoiSite(200, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                ,D
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                   3                  ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'              
        //      |                               ,'                 
        //  100 C-----------------------------A'                   
        //      |                             |                    
        //    0 |         ●                   |                    
        //      |                             |                    
        // -100 |                   2         |         1          
        //      |                             |                    
        // -200 └-----------------------------B-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 100, 400, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 100, -200, 100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 100, 800, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, -200, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 400, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 400, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, -200, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 800, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 800, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 300), // #1
            new VoronoiSite(600, 300), // #2
            new VoronoiSite(600, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                ,D
        //      |                                              ,'  
        //  800 |                                           ,·'    
        //      |                                         ,'       
        //  700 |                   3                  ,·'         
        //      |                                    ,'            
        //  600 |                                 ,·'              
        //      |                               ,'                 
        //  500 C-----------------------------A'                   
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 |                   2         |         1          
        //      |                             |                    
        //  200 └-----------------------------B-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 500, 800, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 500, 200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 500, 1200, 900), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 1200, 900)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 900); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 1200, 900)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 200), // #1
            new VoronoiSite(100, 600), // #2
            new VoronoiSite(500, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              C                                   
        //      |              |                                   
        //  900 |              |                                   
        //      |              |                                   
        //  800 |              |                                   
        //      |              |                                   
        //  700 |              |                                   
        //      |              |                                   
        //  600 |    2         |         3                         
        //      |              |                                   
        //  500 |              |                                   
        //      |              |                                   
        //  400 B--------------A,                                  
        //      |                ',                                
        //  300 |                  '·,                             
        //      |                     ',                           
        //  200 |    1                  '·,                        
        //      |                          ',                      
        //  100 |                            '·,                   
        //      |                               ',                 
        //    0 ●---------------------------------'D--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 400, 300, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 400, 700, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, -300), // #1
            new VoronoiSite(-400, 100), // #2
            new VoronoiSite(0, 100), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑              C                                   
        //      |              |                                   
        //  400 |              |                                   
        //      |              |                                   
        //  300 |              |                                   
        //      |              |                                   
        //  200 |              |                                   
        //      |              |                                   
        //  100 |    2         |         3                         
        //      |              |                                   
        //    0 |              |         ●                         
        //      |              |                                   
        // -100 B--------------A,                                  
        //      |                ',                                
        // -200 |                  '·,                             
        //      |                     ',                           
        // -300 |    1                  '·,                        
        //      |                          ',                      
        // -400 |                            '·,                   
        //      |                               ',                 
        // -500 └---------------------------------'D--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -100, -500, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, -100, -200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, -100, 200, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, -200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, -500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, -500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, -200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, 200, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -100, 200, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 0), // #1
            new VoronoiSite(-100, 400), // #2
            new VoronoiSite(300, 400), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑              C                                   
        //      |              |                                   
        //  700 |              |                                   
        //      |              |                                   
        //  600 |              |                                   
        //      |              |                                   
        //  500 |              |                                   
        //      |              |                                   
        //  400 |    2         |         3                         
        //      |              |                                   
        //  300 |              |                                   
        //      |              |                                   
        //  200 B--------------A,                                  
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |    1    ●             '·,                        
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 └---------------------------------'D--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 200, -200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 200, 100, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 200, 500, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 100, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, -200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 100, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, -200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 100, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 500, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 500, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(300, 800), // #2
            new VoronoiSite(700, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              C                                   
        //      |              |                                   
        // 1100 |              |                                   
        //      |              |                                   
        // 1000 |              |                                   
        //      |              |                                   
        //  900 |              |                                   
        //      |              |                                   
        //  800 |    2         |         3                         
        //      |              |                                   
        //  700 |              |                                   
        //      |              |                                   
        //  600 B--------------A,                                  
        //      |                ',                                
        //  500 |                  '·,                             
        //      |                     ',                           
        //  400 |    1                  '·,                        
        //      |                          ',                      
        //  300 |                            '·,                   
        //      |                               ',                 
        //  200 └---------------------------------'D--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 600, 200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 600, 500, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 600, 900, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 900, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 900, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 900, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 900), // #1
            new VoronoiSite(600, 900), // #2
            new VoronoiSite(600, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                   B                              
        //      |                   |                              
        //  900 |         1         |         2                    
        //      |                   |                              
        //  800 |                   |                              
        //      |                   |                              
        //  700 |                  ,A-----------------------------C
        //      |                ,'                                
        //  600 |             ,·'                                  
        //      |           ,'                                     
        //  500 |        ,·'                  3                    
        //      |      ,'                                          
        //  400 |   ,·'                                            
        //      | ,'                                               
        //  300 D'                                                 
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 700, 400, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 700, 1000, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 700, 0, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 400), // #1
            new VoronoiSite(100, 400), // #2
            new VoronoiSite(100, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                   B                              
        //      |                   |                              
        //  400 |         1         |         2                    
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 |                  ,A-----------------------------C
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 |        ,·'             ●    3                    
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 D'                                                 
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 200, -100, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, 200, 500, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, 200, -500, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 500, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, -100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -100, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, -100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 500, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, -500, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, -500, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 700), // #1
            new VoronoiSite(400, 700), // #2
            new VoronoiSite(400, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                   B                              
        //      |                   |                              
        //  700 |         1         |         2                    
        //      |                   |                              
        //  600 |                   |                              
        //      |                   |                              
        //  500 |                  ,A-----------------------------C
        //      |                ,'                                
        //  400 |             ,·'                                  
        //      |           ,'                                     
        //  300 |        ,·'                  3                    
        //      |      ,'                                          
        //  200 |   ,·'                                            
        //      | ,'                                               
        //  100 D'                                                 
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 500, 800, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 500, -200, 100), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 800, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 800, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, -200, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, -200, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1100), // #1
            new VoronoiSite(800, 1100), // #2
            new VoronoiSite(800, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                   B                              
        //      |                   |                              
        // 1100 |         1         |         2                    
        //      |                   |                              
        // 1000 |                   |                              
        //      |                   |                              
        //  900 |                  ,A-----------------------------C
        //      |                ,'                                
        //  800 |             ,·'                                  
        //      |           ,'                                     
        //  700 |        ,·'                  3                    
        //      |      ,'                                          
        //  600 |   ,·'                                            
        //      | ,'                                               
        //  500 D'                                                 
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 900, 600, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 900, 1200, 900), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 900, 200, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 1200, 900)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 600, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 600, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 1200, 900)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        D                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 B'-----------------------------------------------'C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(-200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        D                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |              3        ,A,        2               
        //      |                     ,'   ',                      
        // -100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // -200 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -300 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -500 B'-----------------------------------------------'C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, -500, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 500, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        D                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //    0 |        ,●'                           '·,         
        //      |      ,'                                 ',       
        // -100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -200 B'-----------------------------------------------'C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, -200, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, 800, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 300, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        D                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  600 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 B'-----------------------------------------------'C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 1200, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 700, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 B,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |             '·,        3                         
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |              1        #A------------------------D
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'        2                         
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 C'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(0, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 B,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 |             '·,        3                         
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 |              1        #A------------------------D
        //      |                     ,'                           
        // -100 |                  ,·'                             
        //      |                ,'                                
        // -200 |             ,·'        2                         
        //      |           ,'                                     
        // -300 |        ,·'                                       
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 C'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, -500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 B,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |             '·,        3                         
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |              1        #A------------------------D
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'        2                         
        //      |           ,'                                     
        //    0 |        ,●'                                       
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 C'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, -200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 800, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(700, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 B,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        '·,                                       
        //      |           ',                                     
        //  900 |             '·,        3                         
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |              1        #A------------------------D
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 |             ,·'        2                         
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 C'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 200, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 1200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 C,                                               ,B
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              2        'A'        3               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 C,                                               ,B
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 |              2        'A'        3               
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------D------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 0, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 C,                                               ,B
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  300 |              2        'A'        3               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, 800, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 300, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 C,                                               ,B
        //      | ',                                           ,'  
        // 1100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // 1000 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  900 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  800 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  700 |              2        'A'        3               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 1200, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 700, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,C
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 |                        2        ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 D------------------------A#        1               
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                        3        '·,              
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(0, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,C
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                        2        ,·'              
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 D------------------------A#        1               
        //      |                          ',                      
        // -100 |                            '·,                   
        //      |                               ',                 
        // -200 |                        3        '·,              
        //      |                                    ',            
        // -300 |                                      '·,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 500, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, -500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(300, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,C
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 |                        2        ,·'              
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 D------------------------A#        1               
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                        3        '·,              
        //      |                                    ',            
        //    0 |         ●                            '·,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, 800, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, 800, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, -200, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,C
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                      ,·'         
        //      |                                    ,'            
        //  900 |                        2        ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 D------------------------A#        1               
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                        3        '·,              
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 1200, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        D                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //    0 ●---------B'---------------------------'C---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(-200, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        D                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |              3        ,A,        2               
        //      |                     ,'   ',                      
        // -300 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // -400 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -500 └---------B'---------------------------'C---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, -300, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -200, 300, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, -200, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -300, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -300, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 300, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -300, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 300, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        D                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //    0 |         ●        ,·'       '·,                   
        //      |                ,'             ',                 
        // -100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -200 └---------B'---------------------------'C---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 100, 0, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 100, 600, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 100, 300, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 0, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 600, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 0, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 600, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        D                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  200 └---------B'---------------------------'C---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 400, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 700, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 400, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 400, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(300, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 B,                                                 
        //      | ',                                               
        //  700 |   '·,        3                                   
        //      |      ',                                          
        //  600 |        '·,                                       
        //      |           ',                                     
        //  500 |    1        #A----------------------------------D
        //      |           ,'                                     
        //  400 |        ,·'                                       
        //      |      ,'                                          
        //  300 |   ,·'        2                                   
        //      | ,'                                               
        //  200 C'                                                 
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(-200, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B,                                                 
        //      | ',                                               
        //  200 |   '·,        3                                   
        //      |      ',                                          
        //  100 |        '·,                                       
        //      |           ',                                     
        //    0 |    1        #A---------●------------------------D
        //      |           ,'                                     
        // -100 |        ,·'                                       
        //      |      ,'                                          
        // -200 |   ,·'        2                                   
        //      | ,'                                               
        // -300 C'                                                 
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, -500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 0, -500, -300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 0, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, -300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, -300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(100, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 B,                                                 
        //      | ',                                               
        //  500 |   '·,        3                                   
        //      |      ',                                          
        //  400 |        '·,                                       
        //      |           ',                                     
        //  300 |    1        #A----------------------------------D
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'        2                                   
        //      | ,'                                               
        //    0 C'        ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 300, -200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 300, -200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 300, 800, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 800, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 800, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 B,                                                 
        //      | ',                                               
        //  900 |   '·,        3                                   
        //      |      ',                                          
        //  800 |        '·,                                       
        //      |           ',                                     
        //  700 |    1        #A----------------------------------D
        //      |           ,'                                     
        //  600 |        ,·'                                       
        //      |      ,'                                          
        //  500 |   ,·'        2                                   
        //      | ,'                                               
        //  400 C'                                                 
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 1200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         C,                           ,B          
        //      |           ',                       ,'            
        //  900 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  800 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  700 |              2        'A'        3               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(200, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑         C,                           ,B          
        //      |           ',                       ,'            
        //  400 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  300 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  200 |              2        'A'        3               
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------D------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, -300, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 200, 0, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -300, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -300, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑         C,                           ,B          
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              2        'A'        3               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 600, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 300, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 600, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 600, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(900, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         C,                           ,B          
        //      |           ',                       ,'            
        // 1100 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        // 1000 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  900 |              2        'A'        3               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 900, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 900, 400, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 900, 700, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1000, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 400, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1000, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 400, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(700, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                ,C
        //      |                                              ,'  
        //  700 |                                  2        ,·'    
        //      |                                         ,'       
        //  600 |                                      ,·'         
        //      |                                    ,'            
        //  500 D----------------------------------A#        1     
        //      |                                    ',            
        //  400 |                                      '·,         
        //      |                                         ',       
        //  300 |                                  3        '·,    
        //      |                                              ',  
        //  200 |                                                'B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(200, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                ,C
        //      |                                              ,'  
        //  200 |                                  2        ,·'    
        //      |                                         ,'       
        //  100 |                                      ,·'         
        //      |                                    ,'            
        //    0 D------------------------●---------A#        1     
        //      |                                    ',            
        // -100 |                                      '·,         
        //      |                                         ',       
        // -200 |                                  3        '·,    
        //      |                                              ',  
        // -300 |                                                'B
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, 500, -300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 500, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 0, -500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                ,C
        //      |                                              ,'  
        //  500 |                                  2        ,·'    
        //      |                                         ,'       
        //  400 |                                      ,·'         
        //      |                                    ,'            
        //  300 D----------------------------------A#        1     
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                  3        '·,    
        //      |                                              ',  
        //    0 |         ●                                      'B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, -200, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -200, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -200, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(900, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                ,C
        //      |                                              ,'  
        //  900 |                                  2        ,·'    
        //      |                                         ,'       
        //  800 |                                      ,·'         
        //      |                                    ,'            
        //  700 D----------------------------------A#        1     
        //      |                                    ',            
        //  600 |                                      '·,         
        //      |                                         ',       
        //  500 |                                  3        '·,    
        //      |                                              ',  
        //  400 |                                                'B
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 700, 1200, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 700, 1200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 700, 200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        D                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  600 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 B'                                               'C
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 0, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-200, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        D                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //    0 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -100 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -200 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -300 B'                                               'C
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, -500, -300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, 500, -300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 200, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, -300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, -300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        D                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 B'        ●                                      'C
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, -200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 300, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(500, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        D                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |              3        ,A,        2               
        //      |                     ,'   ',                      
        //  800 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  700 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  600 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  500 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  400 B'                                               'C
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 900, 200, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 900, 1200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 900, 700, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         B,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                             
        //      |                     ',                           
        //  700 |                       '·,        3               
        //      |                          ',                      
        //  600 |                            '·,                   
        //      |                               ',                 
        //  500 |                        1        #A--------------D
        //      |                               ,'                 
        //  400 |                            ,·'                   
        //      |                          ,'                      
        //  300 |                       ,·'        2               
        //      |                     ,'                           
        //  200 |                  ,·'                             
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 ●---------C'--------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 200, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑         B,                                       
        //      |           ',                                     
        //  400 |             '·,                                  
        //      |                ',                                
        //  300 |                  '·,                             
        //      |                     ',                           
        //  200 |                       '·,        3               
        //      |                          ',                      
        //  100 |                            '·,                   
        //      |                               ',                 
        //    0 |                        1        #A--------------D
        //      |                               ,'                 
        // -100 |                            ,·'                   
        //      |                          ,'                      
        // -200 |                       ,·'        2               
        //      |                     ,'                           
        // -300 |                  ,·'                             
        //      |                ,'                                
        // -400 |             ,·'                                  
        //      |           ,'                                     
        // -500 └---------C'--------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, -300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, -300, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 0, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -300, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, -300, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑         B,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |                       '·,        3               
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                        1        #A--------------D
        //      |                               ,'                 
        //  200 |                            ,·'                   
        //      |                          ,'                      
        //  100 |                       ,·'        2               
        //      |                     ,'                           
        //    0 |         ●        ,·'                             
        //      |                ,'                                
        // -100 |             ,·'                                  
        //      |           ,'                                     
        // -200 └---------C'--------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 0, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, 800, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         B,                                       
        //      |           ',                                     
        // 1100 |             '·,                                  
        //      |                ',                                
        // 1000 |                  '·,                             
        //      |                     ',                           
        //  900 |                       '·,        3               
        //      |                          ',                      
        //  800 |                            '·,                   
        //      |                               ',                 
        //  700 |                        1        #A--------------D
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |                       ,·'        2               
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 └---------C'--------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 700, 400, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 700, 400, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 700, 1200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 400, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 400, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 400, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 400, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 C,                                               ,B
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  300 |              2        'A'        3               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 1000, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 C,                                               ,B
        //      | ',                                           ,'  
        //  200 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  100 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //    0 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        // -100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -200 |              2        'A'        3               
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------D------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, 500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -200, -500, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, -200, 0, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 C,                                               ,B
        //      | ',                                           ,'  
        //  500 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  400 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  300 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  200 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  100 |              2        'A'        3               
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 100, 800, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 100, -200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 100, 300, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 C,                                               ,B
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              2        'A'        3               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 1200, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 700, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                      ,C          
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 |                            ,·'                   
        //      |                          ,'                      
        //  700 |              2        ,·'                        
        //      |                     ,'                           
        //  600 |                  ,·'                             
        //      |                ,'                                
        //  500 D--------------A#        1                         
        //      |                ',                                
        //  400 |                  '·,                             
        //      |                     ',                           
        //  300 |              3        '·,                        
        //      |                          ',                      
        //  200 |                            '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 ●--------------------------------------'B---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 800, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 800, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                      ,C          
        //      |                                    ,'            
        //  400 |                                 ,·'              
        //      |                               ,'                 
        //  300 |                            ,·'                   
        //      |                          ,'                      
        //  200 |              2        ,·'                        
        //      |                     ,'                           
        //  100 |                  ,·'                             
        //      |                ,'                                
        //    0 D--------------A#        1                         
        //      |                ',                                
        // -100 |                  '·,                             
        //      |                     ',                           
        // -200 |              3        '·,                        
        //      |                          ',                      
        // -300 |                            '·,                   
        //      |                               ',                 
        // -400 |                                 '·,              
        //      |                                    ',            
        // -500 └--------------------------------------'B---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 300, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 0, 300, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 0, -500, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 300, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 300, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 300, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 300, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                      ,C          
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 |                            ,·'                   
        //      |                          ,'                      
        //  500 |              2        ,·'                        
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 D--------------A#        1                         
        //      |                ',                                
        //  200 |                  '·,                             
        //      |                     ',                           
        //  100 |              3        '·,                        
        //      |                          ',                      
        //    0 |         ●                  '·,                   
        //      |                               ',                 
        // -100 |                                 '·,              
        //      |                                    ',            
        // -200 └--------------------------------------'B---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 300, 600, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 300, 600, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 300, -200, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 600, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 600, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 600, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 600, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                      ,C          
        //      |                                    ,'            
        // 1100 |                                 ,·'              
        //      |                               ,'                 
        // 1000 |                            ,·'                   
        //      |                          ,'                      
        //  900 |              2        ,·'                        
        //      |                     ,'                           
        //  800 |                  ,·'                             
        //      |                ,'                                
        //  700 D--------------A#        1                         
        //      |                ',                                
        //  600 |                  '·,                             
        //      |                     ',                           
        //  500 |              3        '·,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 └--------------------------------------'B---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 1000, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 200, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
    }

    [Test]
    public void ThreePointsForkedFromEdgePoints()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(800, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             D                              
        //      |                            '                               
        // 1100 |                          ,'                                
        //      |                         ,                                  
        // 1000 1                        ·                                   
        //      |                       '                                    
        //  900 |                     ,'                                     
        //      |                    ,                                       
        //  800 |                   ·                                        
        //      |                  '                                         
        //  700 |                ,'                                          
        //      |               ,                                            
        //  600 A--------------B                        3                    
        //      |               '                                            
        //  500 |                ',                                          
        //      |                  ,                                         
        //  400 |                   ·                                        
        //      |                    '                                       
        //  300 |                     ',                                     
        //      |                       ,                                    
        //  200 2                        ·                                   
        //      |                         '                                  
        //  100 |                          ',                                
        //      |                            ,                               
        //    0 ●-----------------------------C-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 300, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 600, 600, 1200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 600, 600, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 300, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 300, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 1200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 600, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 1200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void ThreePointsForkedFromEdgePoints_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-600, 400), // #1
            new VoronoiSite(-600, -400), // #2
            new VoronoiSite(200, 0), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                             D                              
        //      |                            '                               
        //  500 |                          ,'                                
        //      |                         ,                                  
        //  400 1                        ·                                   
        //      |                       '                                    
        //  300 |                     ,'                                     
        //      |                    ,                                       
        //  200 |                   ·                                        
        //      |                  '                                         
        //  100 |                ,'                                          
        //      |               ,                                            
        //    0 A--------------B              ●         3                    
        //      |               '                                            
        // -100 |                ',                                          
        //      |                  ,                                         
        // -200 |                   ·                                        
        //      |                    '                                       
        // -300 |                     ',                                     
        //      |                       ,                                    
        // -400 2                        ·                                   
        //      |                         '                                  
        // -500 |                          ',                                
        //      |                            ,                               
        // -600 └-----------------------------C-----------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -600, 0, -300, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, 0, 0, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, -300, 0, 0, -600), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, -600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, -300, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -300, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, -300, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, -600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void ThreePointsForkedFromEdgePoints_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(600, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             D                              
        //      |                            '                               
        //  900 |                          ,'                                
        //      |                         ,                                  
        //  800 1                        ·                                   
        //      |                       '                                    
        //  700 |                     ,'                                     
        //      |                    ,                                       
        //  600 |                   ·                                        
        //      |                  '                                         
        //  500 |                ,'                                          
        //      |               ,                                            
        //  400 A--------------B                        3                    
        //      |               '                                            
        //  300 |                ',                                          
        //      |                  ,                                         
        //  200 |                   ·                                        
        //      |                    '                                       
        //  100 |                     ',                                     
        //      |                       ,                                    
        //    0 2         ●              ·                                   
        //      |                         '                                  
        // -100 |                          ',                                
        //      |                            ,                               
        // -200 └-----------------------------C-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 400, 100, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 400, 400, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 100, 400, 400, -200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 400, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 100, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 100, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 100, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 400, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void ThreePointsForkedFromEdgePoints_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(1000, 800), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                             D                              
        //      |                            '                               
        // 1300 |                          ,'                                
        //      |                         ,                                  
        // 1200 1                        ·                                   
        //      |                       '                                    
        // 1100 |                     ,'                                     
        //      |                    ,                                       
        // 1000 |                   ·                                        
        //      |                  '                                         
        //  900 |                ,'                                          
        //      |               ,                                            
        //  800 A--------------B                        3                    
        //      |               '                                            
        //  700 |                ',                                          
        //      |                  ,                                         
        //  600 |                   ·                                        
        //      |                    '                                       
        //  500 |                     ',                                     
        //      |                       ,                                    
        //  400 2                        ·                                   
        //      |                         '                                  
        //  300 |                          ',                                
        //      |                            ,                               
        //  200 └-----------------------------C-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 500, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 800, 800, 1400), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 800, 800, 200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 500, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 500, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 1400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 800, 1400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 1400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1200), // #1
            new VoronoiSite(200, 1200), // #2
            new VoronoiSite(600, 400), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         2                   A                   1          
        //      |                             |                              
        // 1100 |                             |                              
        //      |                             |                              
        // 1000 |                             |                              
        //      |                             |                              
        //  900 |                           ,,B,,                            
        //      |                      ,,·''     ''·,,                       
        //  800 |                 ,,·''               ''·,,                  
        //      |            ,,·''                         ''·,,             
        //  700 |       ,,·''                                   ''·,,        
        //      |  ,,·''                                             ''·,,   
        //  600 C''                                                       ''D
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 |                             3                              
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 |                                                            
        //      |                                                            
        //  100 |                                                            
        //      |                                                            
        //    0 ●-----------------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 600, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 900, 1200, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 600, 900, 0, 600), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 0, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 600, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 600, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 600, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 1200, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 0, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 1200, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 600), // #1
            new VoronoiSite(-400, 600), // #2
            new VoronoiSite(0, -200), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑         2                   A                   1          
        //      |                             |                              
        //  500 |                             |                              
        //      |                             |                              
        //  400 |                             |                              
        //      |                             |                              
        //  300 |                           ,,B,,                            
        //      |                      ,,·''     ''·,,                       
        //  200 |                 ,,·''               ''·,,                  
        //      |            ,,·''                         ''·,,             
        //  100 |       ,,·''                                   ''·,,        
        //      |  ,,·''                                             ''·,,   
        //    0 C''                           ●                           ''D
        //      |                                                            
        // -100 |                                                            
        //      |                                                            
        // -200 |                             3                              
        //      |                                                            
        // -300 |                                                            
        //      |                                                            
        // -400 |                                                            
        //      |                                                            
        // -500 |                                                            
        //      |                                                            
        // -600 └-----------------------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 0, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 300, 600, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, 300, -600, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, -600, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 0, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 0, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, -600, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 1000), // #1
            new VoronoiSite(0, 1000), // #2
            new VoronoiSite(400, 200), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         2                   A                   1          
        //      |                             |                              
        //  900 |                             |                              
        //      |                             |                              
        //  800 |                             |                              
        //      |                             |                              
        //  700 |                           ,,B,,                            
        //      |                      ,,·''     ''·,,                       
        //  600 |                 ,,·''               ''·,,                  
        //      |            ,,·''                         ''·,,             
        //  500 |       ,,·''                                   ''·,,        
        //      |  ,,·''                                             ''·,,   
        //  400 C''                                                       ''D
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 |                             3                              
        //      |                                                            
        //  100 |                                                            
        //      |                                                            
        //    0 |         ●                                                  
        //      |                                                            
        // -100 |                                                            
        //      |                                                            
        // -200 └-----------------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 400, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 700, 1000, 400), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 400, 700, -200, 400), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, -200, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 400, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 400, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 1000, 400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, -200, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1000, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 1000, 400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 1400), // #1
            new VoronoiSite(400, 1400), // #2
            new VoronoiSite(800, 600), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑         2                   A                   1          
        //      |                             |                              
        // 1300 |                             |                              
        //      |                             |                              
        // 1200 |                             |                              
        //      |                             |                              
        // 1100 |                           ,,B,,                            
        //      |                      ,,·''     ''·,,                       
        // 1000 |                 ,,·''               ''·,,                  
        //      |            ,,·''                         ''·,,             
        //  900 |       ,,·''                                   ''·,,        
        //      |  ,,·''                                             ''·,,   
        //  800 C''                                                       ''D
        //      |                                                            
        //  700 |                                                            
        //      |                                                            
        //  600 |                             3                              
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 |                                                            
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 └-----------------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1400, 800, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 1100, 1400, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 800, 1100, 200, 800), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1100, 200, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 1400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 800, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 800, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1100, 1400, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1100, 200, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1400, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1100, 1400, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 200), // #1
            new VoronoiSite(1200, 1000), // #2
            new VoronoiSite(400, 600), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             C                              
        //      |                              '                             
        // 1100 |                               ',                           
        //      |                                 ,                          
        // 1000 |                                  ·                        2
        //      |                                   '                        
        //  900 |                                    ',                      
        //      |                                      ,                     
        //  800 |                                       ·                    
        //      |                                        '                   
        //  700 |                                         ',                 
        //      |                                           ,                
        //  600 |                   3                        B--------------A
        //      |                                           '                
        //  500 |                                         ,'                 
        //      |                                        ,                   
        //  400 |                                       ·                    
        //      |                                      '                     
        //  300 |                                    ,'                      
        //      |                                   ,                        
        //  200 |                                  ·                        1
        //      |                                 '                          
        //  100 |                               ,'                           
        //      |                              ,                             
        //    0 ●-----------------------------D-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 600, 900, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 600, 600, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 900, 600, 600, 1200), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 900, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 900, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 900, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, -400), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(-200, 0), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                             C                              
        //      |                              '                             
        //  500 |                               ',                           
        //      |                                 ,                          
        //  400 |                                  ·                        2
        //      |                                   '                        
        //  300 |                                    ',                      
        //      |                                      ,                     
        //  200 |                                       ·                    
        //      |                                        '                   
        //  100 |                                         ',                 
        //      |                                           ,                
        //    0 |                   3         ●              B--------------A
        //      |                                           '                
        // -100 |                                         ,'                 
        //      |                                        ,                   
        // -200 |                                       ·                    
        //      |                                      '                     
        // -300 |                                    ,'                      
        //      |                                   ,                        
        // -400 |                                  ·                        1
        //      |                                 '                          
        // -500 |                               ,'                           
        //      |                              ,                             
        // -600 └-----------------------------D-----------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 300, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 0, 0, -600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 0, 0, 600), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 300, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 300, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 0, -600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 0), // #1
            new VoronoiSite(1000, 800), // #2
            new VoronoiSite(200, 400), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             C                              
        //      |                              '                             
        //  900 |                               ',                           
        //      |                                 ,                          
        //  800 |                                  ·                        2
        //      |                                   '                        
        //  700 |                                    ',                      
        //      |                                      ,                     
        //  600 |                                       ·                    
        //      |                                        '                   
        //  500 |                                         ',                 
        //      |                                           ,                
        //  400 |                   3                        B--------------A
        //      |                                           '                
        //  300 |                                         ,'                 
        //      |                                        ,                   
        //  200 |                                       ·                    
        //      |                                      '                     
        //  100 |                                    ,'                      
        //      |                                   ,                        
        //    0 |         ●                        ·                        1
        //      |                                 '                          
        // -100 |                               ,'                           
        //      |                              ,                             
        // -200 └-----------------------------D-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, 700, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 400, 400, -200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 400, 400, 1000), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 700, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 700, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 700, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, -200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 400, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, -200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1400, 400), // #1
            new VoronoiSite(1400, 1200), // #2
            new VoronoiSite(600, 800), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                             C                              
        //      |                              '                             
        // 1300 |                               ',                           
        //      |                                 ,                          
        // 1200 |                                  ·                        2
        //      |                                   '                        
        // 1100 |                                    ',                      
        //      |                                      ,                     
        // 1000 |                                       ·                    
        //      |                                        '                   
        //  900 |                                         ',                 
        //      |                                           ,                
        //  800 |                   3                        B--------------A
        //      |                                           '                
        //  700 |                                         ,'                 
        //      |                                        ,                   
        //  600 |                                       ·                    
        //      |                                      '                     
        //  500 |                                    ,'                      
        //      |                                   ,                        
        //  400 |                                  ·                        1
        //      |                                 '                          
        //  300 |                               ,'                           
        //      |                              ,                             
        //  200 └-----------------------------D-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1400, 800, 1100, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1100, 800, 800, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 1100, 800, 800, 1400), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 800, 800, 1400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1400, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 1100, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1100, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 1100, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 800, 800, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 800, 800, 1400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 800, 800, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(1000, 0), // #2
            new VoronoiSite(600, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                            
        //      |                                                            
        // 1100 |                                                            
        //      |                                                            
        // 1000 |                                                            
        //      |                                                            
        //  900 |                                                            
        //      |                                                            
        //  800 |                             3                              
        //      |                                                            
        //  700 |                                                            
        //      |                                                            
        //  600 D,,                                                       ,,C
        //      |  ''·,,                                             ,,·''   
        //  500 |       ''·,,                                   ,,·''        
        //      |            ''·,,                         ,,·''             
        //  400 |                 ''·,,               ,,·''                  
        //      |                      ''·,,     ,,·''                       
        //  300 |                           ''B''                            
        //      |                             |                              
        //  200 |                             |                              
        //      |                             |                              
        //  100 |                             |                              
        //      |                             |                              
        //    0 ●---------1-------------------A-------------------2---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 600, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 300, 0, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 600, 300, 1200, 600), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 1200, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 600, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 600, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 1200, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, -600), // #1
            new VoronoiSite(400, -600), // #2
            new VoronoiSite(0, 200), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                                            
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 |                                                            
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 |                             3                              
        //      |                                                            
        //  100 |                                                            
        //      |                                                            
        //    0 D,,                           ●                           ,,C
        //      |  ''·,,                                             ,,·''   
        // -100 |       ''·,,                                   ,,·''        
        //      |            ''·,,                         ,,·''             
        // -200 |                 ''·,,               ,,·''                  
        //      |                      ''·,,     ,,·''                       
        // -300 |                           ''B''                            
        //      |                             |                              
        // -400 |                             |                              
        //      |                             |                              
        // -500 |                             |                              
        //      |                             |                              
        // -600 └---------1-------------------A-------------------2---------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -600, 0, -300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -300, -600, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, -300, 600, 0), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, 600, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, -600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, 0, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, 0, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, 600, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(800, -200), // #2
            new VoronoiSite(400, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                            
        //      |                                                            
        //  900 |                                                            
        //      |                                                            
        //  800 |                                                            
        //      |                                                            
        //  700 |                                                            
        //      |                                                            
        //  600 |                             3                              
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 D,,                                                       ,,C
        //      |  ''·,,                                             ,,·''   
        //  300 |       ''·,,                                   ,,·''        
        //      |            ''·,,                         ,,·''             
        //  200 |                 ''·,,               ,,·''                  
        //      |                      ''·,,     ,,·''                       
        //  100 |                           ''B''                            
        //      |                             |                              
        //    0 |         ●                   |                              
        //      |                             |                              
        // -100 |                             |                              
        //      |                             |                              
        // -200 └---------1-------------------A-------------------2---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, -200, 400, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 100, -200, 400), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 400, 100, 1000, 400), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 1000, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 400, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 400, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 400, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, -200, 400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 1000, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, -200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, -200, 400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedFromEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedFromEdgePoints_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(1200, 200), // #2
            new VoronoiSite(800, 1000), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                                            
        //      |                                                            
        // 1300 |                                                            
        //      |                                                            
        // 1200 |                                                            
        //      |                                                            
        // 1100 |                                                            
        //      |                                                            
        // 1000 |                             3                              
        //      |                                                            
        //  900 |                                                            
        //      |                                                            
        //  800 D,,                                                       ,,C
        //      |  ''·,,                                             ,,·''   
        //  700 |       ''·,,                                   ,,·''        
        //      |            ''·,,                         ,,·''             
        //  600 |                 ''·,,               ,,·''                  
        //      |                      ''·,,     ,,·''                       
        //  500 |                           ''B''                            
        //      |                             |                              
        //  400 |                             |                              
        //      |                             |                              
        //  300 |                             |                              
        //      |                             |                              
        //  200 └---------1-------------------A-------------------2---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 800, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 500, 200, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 800, 500, 1400, 800), Is.True, "Expected: has edge B-C"); // B-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 1400, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 800, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 800, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 200, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 1400, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 200, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void ThreePointsForkedAgainstEdgePoints()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 800), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                       ,C                         
        //      |                     ,'                           
        //  900 |                  ,·'                             
        //      |                ,'                                
        //  800 1             ,·'                                  
        //      |           ,'                                     
        //  700 |        ,·'                                       
        //      |      ,'                                          
        //  600 |   ,·'                                            
        //      | ,'                                               
        //  500 A#             3                                   
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        '·,                                       
        //      |           ',                                     
        //  200 2             '·,                                  
        //      |                ',                                
        //  100 |                  '·,                             
        //      |                     ',                           
        //    0 ●-----------------------'B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsForkedAgainstEdgePoints_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 300), // #1
            new VoronoiSite(-500, -300), // #2
            new VoronoiSite(-200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                       ,C                         
        //      |                     ,'                           
        //  400 |                  ,·'                             
        //      |                ,'                                
        //  300 1             ,·'                                  
        //      |           ,'                                     
        //  200 |        ,·'                                       
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 A#             3         ●                         
        //      | ',                                               
        // -100 |   '·,                                            
        //      |      ',                                          
        // -200 |        '·,                                       
        //      |           ',                                     
        // -300 2             '·,                                  
        //      |                ',                                
        // -400 |                  '·,                             
        //      |                     ',                           
        // -500 └-----------------------'B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 0, 0, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 0, 0, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsForkedAgainstEdgePoints_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 600), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                       ,C                         
        //      |                     ,'                           
        //  700 |                  ,·'                             
        //      |                ,'                                
        //  600 1             ,·'                                  
        //      |           ,'                                     
        //  500 |        ,·'                                       
        //      |      ,'                                          
        //  400 |   ,·'                                            
        //      | ,'                                               
        //  300 A#             3                                   
        //      | ',                                               
        //  200 |   '·,                                            
        //      |      ',                                          
        //  100 |        '·,                                       
        //      |           ',                                     
        //    0 2         ●   '·,                                  
        //      |                ',                                
        // -100 |                  '·,                             
        //      |                     ',                           
        // -200 └-----------------------'B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 300, 300, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 300, 300, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 300, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsForkedAgainstEdgePoints_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1000), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                       ,C                         
        //      |                     ,'                           
        // 1100 |                  ,·'                             
        //      |                ,'                                
        // 1000 1             ,·'                                  
        //      |           ,'                                     
        //  900 |        ,·'                                       
        //      |      ,'                                          
        //  800 |   ,·'                                            
        //      | ,'                                               
        //  700 A#             3                                   
        //      | ',                                               
        //  600 |   '·,                                            
        //      |      ',                                          
        //  500 |        '·,                                       
        //      |           ',                                     
        //  400 2             '·,                                  
        //      |                ',                                
        //  300 |                  '·,                             
        //      |                     ',                           
        //  200 └-----------------------'B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 700, 700, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 700, 700, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 700, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 1000), // #1
            new VoronoiSite(200, 1000), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         2             ,A,             1          
        //      |                     ,'   ',                      
        //  900 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  800 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  700 |        ,·'             3             '·,         
        //      |      ,'                                 ',       
        //  600 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  500 B'                                               'C
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1000, 1000, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 1000, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 1000, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(-300, 500), // #2
            new VoronoiSite(0, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑         2             ,A,             1          
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'             3             '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 B'                       ●                       'C
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 |                                                  
        //      |                                                  
        // -300 |                                                  
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, -500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 800), // #1
            new VoronoiSite(0, 800), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑         2             ,A,             1          
        //      |                     ,'   ',                      
        //  700 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  600 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  500 |        ,·'             3             '·,         
        //      |      ,'                                 ',       
        //  400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  300 B'                                               'C
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 |         ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, -200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 800, 800, 300), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 800, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 800, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1200), // #1
            new VoronoiSite(400, 1200), // #2
            new VoronoiSite(700, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         2             ,A,             1          
        //      |                     ,'   ',                      
        // 1100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // 1000 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  900 |        ,·'             3             '·,         
        //      |      ,'                                 ',       
        //  800 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  700 B'                                               'C
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 1200, 1200, 700), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 200), // #1
            new VoronoiSite(1000, 800), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B,                        
        //      |                          ',                      
        //  900 |                            '·,                   
        //      |                               ',                 
        //  800 |                                 '·,             2
        //      |                                    ',            
        //  700 |                                      '·,         
        //      |                                         ',       
        //  600 |                                           '·,    
        //      |                                              ',  
        //  500 |                                  3             #A
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                      ,·'         
        //      |                                    ,'            
        //  200 |                                 ,·'             1
        //      |                               ,'                 
        //  100 |                            ,·'                   
        //      |                          ,'                      
        //    0 ●------------------------C'-----------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 500, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 500, 500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -300), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        B,                        
        //      |                          ',                      
        //  400 |                            '·,                   
        //      |                               ',                 
        //  300 |                                 '·,             2
        //      |                                    ',            
        //  200 |                                      '·,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 |                        ●         3             #A
        //      |                                              ,'  
        // -100 |                                           ,·'    
        //      |                                         ,'       
        // -200 |                                      ,·'         
        //      |                                    ,'            
        // -300 |                                 ,·'             1
        //      |                               ,'                 
        // -400 |                            ,·'                   
        //      |                          ,'                      
        // -500 └------------------------C'-----------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 0, 0, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 0), // #1
            new VoronoiSite(800, 600), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        B,                        
        //      |                          ',                      
        //  700 |                            '·,                   
        //      |                               ',                 
        //  600 |                                 '·,             2
        //      |                                    ',            
        //  500 |                                      '·,         
        //      |                                         ',       
        //  400 |                                           '·,    
        //      |                                              ',  
        //  300 |                                  3             #A
        //      |                                              ,'  
        //  200 |                                           ,·'    
        //      |                                         ,'       
        //  100 |                                      ,·'         
        //      |                                    ,'            
        //    0 |         ●                       ,·'             1
        //      |                               ,'                 
        // -100 |                            ,·'                   
        //      |                          ,'                      
        // -200 └------------------------C'-----------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 300, 300, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 300, 300, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 300, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 400), // #1
            new VoronoiSite(1200, 1000), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B,                        
        //      |                          ',                      
        // 1100 |                            '·,                   
        //      |                               ',                 
        // 1000 |                                 '·,             2
        //      |                                    ',            
        //  900 |                                      '·,         
        //      |                                         ',       
        //  800 |                                           '·,    
        //      |                                              ',  
        //  700 |                                  3             #A
        //      |                                              ,'  
        //  600 |                                           ,·'    
        //      |                                         ,'       
        //  500 |                                      ,·'         
        //      |                                    ,'            
        //  400 |                                 ,·'             1
        //      |                               ,'                 
        //  300 |                            ,·'                   
        //      |                          ,'                      
        //  200 └------------------------C'-----------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 700, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 700, 700, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 700, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(800, 0), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 C,                                               ,B
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,             3             ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 ●---------1-------------'A'-------------2---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 0, 0, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, -500), // #1
            new VoronoiSite(300, -500), // #2
            new VoronoiSite(0, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 |                                                  
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 C,                       ●                       ,B
        //      | ',                                           ,'  
        // -100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // -200 |        '·,             3             ,·'         
        //      |           ',                       ,'            
        // -300 |             '·,                 ,·'              
        //      |                ',             ,'                 
        // -400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -500 └---------1-------------'A'-------------2---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -500, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -500, -500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, -500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, -500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(600, -200), // #2
            new VoronoiSite(300, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                                  
        //      |                                                  
        //  500 |                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 C,                                               ,B
        //      | ',                                           ,'  
        //  200 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  100 |        '·,             3             ,·'         
        //      |           ',                       ,'            
        //    0 |         ●   '·,                 ,·'              
        //      |                ',             ,'                 
        // -100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -200 └---------1-------------'A'-------------2---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -200, 800, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, -200, -200, 300), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 300, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -200, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -200, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsForkedAgainstEdgePoints_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsForkedAgainstEdgePoints_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(1000, 200), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                                  
        //      |                                                  
        //  700 C,                                               ,B
        //      | ',                                           ,'  
        //  600 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  500 |        '·,             3             ,·'         
        //      |           ',                       ,'            
        //  400 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  300 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  200 └---------1-------------'A'-------------2---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 200, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 200, 200, 700), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 700, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(500, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 E,                                               ,H
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  600 |                  'A---------D'                   
        //      |                   |         |                    
        //  500 |              2    |    1    |    4               
        //      |                   |         |                    
        //  400 |                  ,B---------C,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 F'-----------------------------------------------'G
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 400, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 600, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 400, 600, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 600, 400, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 600, 0, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 400, 0, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 400, 1000, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 600, 1000, 1000), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 1000, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 400, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 600, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 1000); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(0, -200), // #3
            new VoronoiSite(200, 0), // #4
            new VoronoiSite(0, 200), // #5
        ];
        plane.SetSites(sites);

        //  500 E,                                               ,H
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  100 |                  'A---------D'                   
        //      |                   |         |                    
        //    0 |              2    |    1    |    4               
        //      |                   |         |                    
        // -100 |                  ,B---------C,                   
        //      |                ,'             ',                 
        // -200 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        // -300 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -500 F'-----------------------------------------------'G
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 100, -100, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -100, 100, -100), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 100, -100, 100, 100), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 100, 100, -100, 100), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, -100, 100, -500, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -100, -100, -500, -500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 100, -100, 500, -500), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 100, 100, 500, 500), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 500, -500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -500)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, -100, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -100, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 100, -100)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 100, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 100, -100)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 100, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -500)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, -100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -100, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -100, 100)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 100, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -100, 100)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 500)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -500, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 500)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(300, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 E,                                               ,H
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  400 |                  'A---------D'                   
        //      |                   |         |                    
        //  300 |              2    |    1    |    4               
        //      |                   |         |                    
        //  200 |                  ,B---------C,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //    0 |        ,●'                           '·,         
        //      |      ,'                                 ',       
        // -100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -200 F'-----------------------------------------------'G
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 400, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 200, 400, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 400, 200, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 200, 400, -200, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 200, -200, -200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 200, 800, -200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 400, 800, 800), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, -200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 800, -200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, -200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 400, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, -200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 400, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 400, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, -200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 400)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 400, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 400, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 400)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 800)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -200, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 800); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 800)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(700, 500), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(700, 900), // #5
        ];
        plane.SetSites(sites);

        // 1200 E,                                               ,H
        //      | ',                                           ,'  
        // 1100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // 1000 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  900 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  800 |                  'A---------D'                   
        //      |                   |         |                    
        //  700 |              2    |    1    |    4               
        //      |                   |         |                    
        //  600 |                  ,B---------C,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 F'-----------------------------------------------'G
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 600, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 800, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 800, 600, 800, 800), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 800, 800, 600, 800), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 800, 200, 1200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 600, 200, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 800, 600, 1200, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 800, 800, 1200, 1200), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 1200, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 600, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 600, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 800, 800)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 600, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 600, 800)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 800, 800)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 600, 800)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 1200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 200, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1200, 1200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 1200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(700, 300), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 E,                                               ,H
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  400 |                  'A---------D'                   
        //      |                   |         |                    
        //  300 |              2    |    1    |    4               
        //      |                   |         |                    
        //  200 |                  ,B---------C,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //    0 ●---------F'---------------------------'G---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 400, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 600, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 200, 600, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 400, 400, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 400, 0, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 200, 200, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 200, 800, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 400, 1000, 800), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 800, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 400, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 600, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 800); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(0, -400), // #3
            new VoronoiSite(200, -200), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 E,                                               ,H
        //      | ',                                           ,'  
        //  200 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  100 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //    0 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        // -100 |                  'A---------D'                   
        //      |                   |         |                    
        // -200 |              2    |    1    |    4               
        //      |                   |         |                    
        // -300 |                  ,B---------C,                   
        //      |                ,'             ',                 
        // -400 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        // -500 └---------F'---------------------------'G---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -100, -100, -300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -300, 100, -300), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 100, -300, 100, -100), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 100, -100, -100, -100), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, -100, -100, -500, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -100, -300, -300, -500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 100, -300, 300, -500), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 100, -100, 500, 300), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, -300, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -300, -300, -500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 300, -500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -300, 300, -500)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, -100, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -300, 100, -300)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -300, -300, -500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 100, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -300, 100, -300)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -300, 100, -100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -300, 300, -500)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, -100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -100, -100)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -300, 100, -100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -100, -100)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, 300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -500, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, 300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, -100), // #3
            new VoronoiSite(500, 100), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 E,                                               ,H
        //      | ',                                           ,'  
        //  500 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  400 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  300 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  200 |                  'A---------D'                   
        //      |                   |         |                    
        //  100 |              2    |    1    |    4               
        //      |                   |         |                    
        //    0 |         ●        ,B---------C,                   
        //      |                ,'             ',                 
        // -100 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        // -200 └---------F'---------------------------'G---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 400, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 0, 400, 200), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 200, 200, 200), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 200, 200, -200, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 0, 0, -200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 0, 600, -200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 200, 800, 600), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 0, -200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 600, -200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 600, -200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 400, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 0, -200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 400, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 600, -200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, 200)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 400, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, 200)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 600)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -200, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 600); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 600)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(900, 500), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 E,                                               ,H
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        5        ,·'              
        //      |                ',             ,'                 
        //  600 |                  'A---------D'                   
        //      |                   |         |                    
        //  500 |              2    |    1    |    4               
        //      |                   |         |                    
        //  400 |                  ,B---------C,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //  200 └---------F'---------------------------'G---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 600, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 800, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 800, 400, 800, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 800, 600, 600, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 600, 200, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 400, 400, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 800, 400, 1000, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 800, 600, 1200, 1000), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 1000, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 600, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 800, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 1000)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 200, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1200, 1000); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 1000)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(300, 300), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                                      ,E          
        //      |                                    ,'            
        //  900 |                                 ,·'              
        //      |                               ,'                 
        //  800 F,                           ,·'                   
        //      | ',                       ,'                      
        //  700 |   '·,        2        ,·'                        
        //      |      ',             ,'                           
        //  600 |        'B---------A'                             
        //      |         |         |                              
        //  500 |    3    |    1    |    5                         
        //      |         |         |                              
        //  400 |        ,C---------D,                             
        //      |      ,'             ',                           
        //  300 |   ,·'        4        '·,                        
        //      | ,'                       ',                      
        //  200 G'                           '·,                   
        //      |                               ',                 
        //  100 |                                 '·,              
        //      |                                    ',            
        //    0 ●--------------------------------------'H---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 600, 200, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 400, 400, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 400, 400, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 600, 800, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 600, 0, 800), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 200, 400, 0, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 400, 800, 0), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 0, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 400, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 800, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-400, 0), // #3
            new VoronoiSite(-200, -200), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                                      ,E          
        //      |                                    ,'            
        //  400 |                                 ,·'              
        //      |                               ,'                 
        //  300 F,                           ,·'                   
        //      | ',                       ,'                      
        //  200 |   '·,        2        ,·'                        
        //      |      ',             ,'                           
        //  100 |        'B---------A'                             
        //      |         |         |                              
        //    0 |    3    |    1    |    5                         
        //      |         |         |                              
        // -100 |        ,C---------D,                             
        //      |      ,'             ',                           
        // -200 |   ,·'        4        '·,                        
        //      | ,'                       ',                      
        // -300 G'                           '·,                   
        //      |                               ',                 
        // -400 |                                 '·,              
        //      |                                    ',            
        // -500 └--------------------------------------'H---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, -100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 100, -300, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, 100, -300, -100), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, -300, -100, -100, -100), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, -100, -100, -100, 100), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, -100, 100, 300, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -300, 100, -500, 300), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, -300, -100, -500, -300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -100, -100, 300, -500), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 100, -500, 300)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, -500, -300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -100, -500, -300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, -300, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -300, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 100, -300, -100)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 100, -500, 300)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, -300, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 100, -300, -100)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -100, -100, -100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -100, -500, -300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, -100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -300, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, 100)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 300, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -100, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -100, -100, -100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -100, 100)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 300, -500)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 300, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 300, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, -500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 300, -500)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(-100, 300), // #3
            new VoronoiSite(100, 100), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                                      ,E          
        //      |                                    ,'            
        //  700 |                                 ,·'              
        //      |                               ,'                 
        //  600 F,                           ,·'                   
        //      | ',                       ,'                      
        //  500 |   '·,        2        ,·'                        
        //      |      ',             ,'                           
        //  400 |        'B---------A'                             
        //      |         |         |                              
        //  300 |    3    |    1    |    5                         
        //      |         |         |                              
        //  200 |        ,C---------D,                             
        //      |      ,'             ',                           
        //  100 |   ,·'        4        '·,                        
        //      | ,'                       ',                      
        //    0 G'        ●                  '·,                   
        //      |                               ',                 
        // -100 |                                 '·,              
        //      |                                    ',            
        // -200 └--------------------------------------'H---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 400, 0, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 200, 200, 200), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 200, 200, 200, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 200, 400, 600, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 400, -200, 600), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 0, 200, -200, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, 200, 600, -200), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, -200, 600)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, -200, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -200, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, -200, 600)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 200, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -200, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, 400)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 600, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 200, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 200, 400)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 600, -200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 600, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 600, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 600, -200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 600, -200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                                      ,E          
        //      |                                    ,'            
        // 1100 |                                 ,·'              
        //      |                               ,'                 
        // 1000 F,                           ,·'                   
        //      | ',                       ,'                      
        //  900 |   '·,        2        ,·'                        
        //      |      ',             ,'                           
        //  800 |        'B---------A'                             
        //      |         |         |                              
        //  700 |    3    |    1    |    5                         
        //      |         |         |                              
        //  600 |        ,C---------D,                             
        //      |      ,'             ',                           
        //  500 |   ,·'        4        '·,                        
        //      | ,'                       ',                      
        //  400 G'                           '·,                   
        //      |                               ',                 
        //  300 |                                 '·,              
        //      |                                    ',            
        //  200 └--------------------------------------'H---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 400, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 800, 400, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 600, 600, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 600, 600, 800), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 800, 1000, 1200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 800, 200, 1000), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 600, 200, 400), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 600, 1000, 200), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 200, 400); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 400)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 400, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 400)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1000, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 600, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 1000, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1000, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(300, 700), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑         G,                           ,F          
        //      |           ',                       ,'            
        //  900 |             '·,        3        ,·'              
        //      |                ',             ,'                 
        //  800 |                  'C---------B'                   
        //      |                   |         |                    
        //  700 |              4    |    1    |    2               
        //      |                   |         |                    
        //  600 |                  ,D---------A,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        5        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 H'                                               'E
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 600, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, 400, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 800, 400, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 600, 600, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 600, 1000, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 800, 800, 1000), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 800, 200, 1000), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 600, 0, 200), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1000); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 200, 1000); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 600, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 400, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 1000, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(0, 400), // #3
            new VoronoiSite(-200, 200), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑         G,                           ,F          
        //      |           ',                       ,'            
        //  400 |             '·,        3        ,·'              
        //      |                ',             ,'                 
        //  300 |                  'C---------B'                   
        //      |                   |         |                    
        //  200 |              4    |    1    |    2               
        //      |                   |         |                    
        //  100 |                  ,D---------A,                   
        //      |                ,'             ',                 
        //    0 |             ,·'        5        '·,              
        //      |           ,'                       ',            
        // -100 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -200 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -300 H'                                               'E
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 100, 100, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 300, -100, 300), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, -100, 300, -100, 100), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, -100, 100, 100, 100), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 100, 100, 500, -300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 100, 300, 300, 500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, -100, 300, -300, 500), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -100, 100, -500, -300), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 300, 500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, -300, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 300, -300, 500)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 100, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -100, 300)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 300, 500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, -100, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -100, 300)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 300, -100, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 300, -300, 500)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 100, 100)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, -300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -100, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 300, -100, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 100, 100)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, -300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 500, -300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, -300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -500, -300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, -300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(100, 500), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑         G,                           ,F          
        //      |           ',                       ,'            
        //  700 |             '·,        3        ,·'              
        //      |                ',             ,'                 
        //  600 |                  'C---------B'                   
        //      |                   |         |                    
        //  500 |              4    |    1    |    2               
        //      |                   |         |                    
        //  400 |                  ,D---------A,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        5        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 H'        ●                                      'E
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 400, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 200, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 600, 200, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 200, 400, 400, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 400, 800, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 600, 600, 800), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 200, 600, 0, 800), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, 400, -200, 0), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 800)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 0, 800); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 400, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 800)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 0)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 800, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 0)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 1100), // #3
            new VoronoiSite(500, 900), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑         G,                           ,F          
        //      |           ',                       ,'            
        // 1100 |             '·,        3        ,·'              
        //      |                ',             ,'                 
        // 1000 |                  'C---------B'                   
        //      |                   |         |                    
        //  900 |              4    |    1    |    2               
        //      |                   |         |                    
        //  800 |                  ,D---------A,                   
        //      |                ,'             ',                 
        //  700 |             ,·'        5        '·,              
        //      |           ,'                       ',            
        //  600 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  500 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  400 H'                                               'E
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 1000, 600, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 1000, 600, 800), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 800, 800, 800), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 800, 800, 1200, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 1000, 1000, 1200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 1000, 400, 1200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 800, 200, 400), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 1000, 1200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 400, 1200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 400, 1200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 600, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 1000, 1200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 600, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 800)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 400, 1200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 800)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 400)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 600, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 800)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 800)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 400)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 1200, 400); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 400)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 400); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 400)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(700, 700), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑         H,                                       
        //      |           ',                                     
        //  900 |             '·,                                  
        //      |                ',                                
        //  800 |                  '·,                           ,G
        //      |                     ',                       ,'  
        //  700 |                       '·,        4        ,·'    
        //      |                          ',             ,'       
        //  600 |                            'D---------C'         
        //      |                             |         |          
        //  500 |                        5    |    1    |    3     
        //      |                             |         |          
        //  400 |                            ,A---------B,         
        //      |                          ,'             ',       
        //  300 |                       ,·'        2        '·,    
        //      |                     ,'                       ',  
        //  200 |                  ,·'                           'F
        //      |                ,'                                
        //  100 |             ,·'                                  
        //      |           ,'                                     
        //    0 ●---------E'--------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 800, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 400, 800, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 800, 600, 600, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 600, 600, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 400, 200, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 400, 1000, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 800, 600, 1000, 800), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 600, 200, 1000), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 1000, 800); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 800, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 600, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 200, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 1000); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑         H,                                       
        //      |           ',                                     
        //  400 |             '·,                                  
        //      |                ',                                
        //  300 |                  '·,                           ,G
        //      |                     ',                       ,'  
        //  200 |                       '·,        4        ,·'    
        //      |                          ',             ,'       
        //  100 |                            'D---------C'         
        //      |                             |         |          
        //    0 |                        5    |    1    |    3     
        //      |                             |         |          
        // -100 |                            ,A---------B,         
        //      |                          ,'             ',       
        // -200 |                       ,·'        2        '·,    
        //      |                     ,'                       ',  
        // -300 |                  ,·'                           'F
        //      |                ,'                                
        // -400 |             ,·'                                  
        //      |           ,'                                     
        // -500 └---------E'--------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -100, 300, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, -100, 300, 100), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 100, 100, 100), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 100, 100, 100, -100), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 100, -100, -300, -500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, -100, 500, -300), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 300, 100, 500, 300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 100, 100, -300, 500), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -100, 500, -300)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 500, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 500, 300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 300, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 300, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -100, 300, 100)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -100, 500, -300)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 300, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -100, 300, 100)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 100, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 500, 300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 300, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, -100)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -300, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 100, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 100, -100)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -300, 500)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -300, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -300, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -300, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -300, 500)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑         H,                                       
        //      |           ',                                     
        //  700 |             '·,                                  
        //      |                ',                                
        //  600 |                  '·,                           ,G
        //      |                     ',                       ,'  
        //  500 |                       '·,        4        ,·'    
        //      |                          ',             ,'       
        //  400 |                            'D---------C'         
        //      |                             |         |          
        //  300 |                        5    |    1    |    3     
        //      |                             |         |          
        //  200 |                            ,A---------B,         
        //      |                          ,'             ',       
        //  100 |                       ,·'        2        '·,    
        //      |                     ,'                       ',  
        //    0 |         ●        ,·'                           'F
        //      |                ,'                                
        // -100 |             ,·'                                  
        //      |           ,'                                     
        // -200 └---------E'--------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, 600, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 200, 600, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 400, 400, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 400, 400, 200), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 200, 0, -200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 200, 800, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 400, 800, 600), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 400, 0, 800), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 800, 600); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 600)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 600)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 0, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 400, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 0, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 800); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(1100, 700), // #3
            new VoronoiSite(900, 900), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑         H,                                       
        //      |           ',                                     
        // 1100 |             '·,                                  
        //      |                ',                                
        // 1000 |                  '·,                           ,G
        //      |                     ',                       ,'  
        //  900 |                       '·,        4        ,·'    
        //      |                          ',             ,'       
        //  800 |                            'D---------C'         
        //      |                             |         |          
        //  700 |                        5    |    1    |    3     
        //      |                             |         |          
        //  600 |                            ,A---------B,         
        //      |                          ,'             ',       
        //  500 |                       ,·'        2        '·,    
        //      |                     ,'                       ',  
        //  400 |                  ,·'                           'F
        //      |                ,'                                
        //  300 |             ,·'                                  
        //      |           ,'                                     
        //  200 └---------E'--------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 600, 1000, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 800, 800, 800), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 800, 800, 800, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 800, 600, 400, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 600, 1200, 400), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 1000, 800, 1200, 1000), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 800, 800, 400, 1200), Is.True, "Expected: has edge D-H"); // D-H

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 1200, 400)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        point = FindPoint(points, 1200, 1000); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 1200, 1000)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        point = FindPoint(points, 1000, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 1000, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 1200, 400)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 1000, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 800, 800)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 1200, 1000)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 600)), Is.True, "Expected: point A has edge D-A"); // A on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 400, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 800, 800)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 800, 600)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 400, 1200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 400, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 400, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 400, 1200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 400, 1200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(700, 700), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              1         |         4               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 C------------------------A------------------------E
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              2         |         3               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1000, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(200, 200), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |              1         |         4               
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 C------------------------A------------------------E
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |              2         |         3               
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------D------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 0, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(500, 500), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              1         |         4               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 C------------------------A------------------------E
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              2         |         3               
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, 300, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 300, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 300, 800, 300), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(900, 900), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |              1         |         4               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 C------------------------A------------------------E
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              2         |         3               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 700, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 700, 1200, 700), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1200, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(600, 200), // #3
            new VoronoiSite(600, 800), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                   1    |    4                    
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 C------------------------A------------------------E
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                   2    |    3                    
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1000, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(-100, -300), // #2
            new VoronoiSite(100, -300), // #3
            new VoronoiSite(100, 300), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                   1    |    4                    
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 C------------------------A------------------------E
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                   2    |    3                    
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------D------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 0, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(400, 600), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                   1    |    4                    
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 C------------------------A------------------------E
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●         2    |    3                    
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, 300, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 300, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 300, 800, 300), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(800, 400), // #3
            new VoronoiSite(800, 1000), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                   1    |    4                    
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 C------------------------A------------------------E
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                   2    |    3                    
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 700, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 700, 1200, 700), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1200, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(200, 600), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(800, 400), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                        C                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |         2              |              1          
        //      |                        |                         
        //  500 D------------------------A------------------------B
        //      |                        |                         
        //  400 |         3              |              4          
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------E------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(-300, 100), // #2
            new VoronoiSite(-300, -100), // #3
            new VoronoiSite(300, -100), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                        C                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |         2              |              1          
        //      |                        |                         
        //    0 D------------------------A------------------------B
        //      |                        |                         
        // -100 |         3              |              4          
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------E------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, -500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 0, -500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 0, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 0, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 400), // #1
            new VoronoiSite(0, 400), // #2
            new VoronoiSite(0, 200), // #3
            new VoronoiSite(600, 200), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                        C                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |         2              |              1          
        //      |                        |                         
        //  300 D------------------------A------------------------B
        //      |                        |                         
        //  200 |         3              |              4          
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------E------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, 800, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, 300, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, -200, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 300, 300, -200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 300, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 300, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 800), // #1
            new VoronoiSite(400, 800), // #2
            new VoronoiSite(400, 600), // #3
            new VoronoiSite(1000, 600), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                        C                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |         2              |              1          
        //      |                        |                         
        //  700 D------------------------A------------------------B
        //      |                        |                         
        //  600 |         3              |              4          
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------E------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 700, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 200, 700), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 700, 700, 200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 700, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 700, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 700, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(300, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 B,                                               ,E
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              4        #A#        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 C'-----------------------------------------------'D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(0, -200), // #3
            new VoronoiSite(-200, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 B,                                               ,E
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 |              4        #A#        2               
        //      |                     ,'   ',                      
        // -100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // -200 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        // -300 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -500 C'-----------------------------------------------'D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, -500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 500, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 500, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 500, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(100, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 B,                                               ,E
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  300 |              4        #A#        2               
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //    0 |        ,●'                           '·,         
        //      |      ,'                                 ',       
        // -100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -200 C'-----------------------------------------------'D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, -200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 800, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 300, 800, 800), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(700, 500), // #3
            new VoronoiSite(500, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 B,                                               ,E
        //      | ',                                           ,'  
        // 1100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // 1000 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  900 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  800 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  700 |              4        #A#        2               
        //      |                     ,'   ',                      
        //  600 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        3        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 C'-----------------------------------------------'D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, 200, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, 1200, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 700, 1200, 1200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(500, 700), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑    B                                             
        //      |     '                                            
        //  900 |      ',                                          
        //      |        ,                                         
        //  800 |         ·                                        
        //      |          '                                       
        //  700 |           ',           4                      ,,E
        //      |             ,                            ,,·''   
        //  600 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  500 |    1           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  400 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  300 |       ,,·''         ',           3               
        //      |  ,,·''                ,                          
        //  200 C''                      ·                         
        //      |                         '                        
        //  100 |              2           ',                      
        //      |                            ,                     
        //    0 ●-----------------------------D-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 100, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 600, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, 1000, 700), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1000, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 100, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -400), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(0, 200), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑    B                                             
        //      |     '                                            
        //  400 |      ',                                          
        //      |        ,                                         
        //  300 |         ·                                        
        //      |          '                                       
        //  200 |           ',           4                      ,,E
        //      |             ,                            ,,·''   
        //  100 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //    0 |    1           ',      ●  ,,·''                  
        //      |                  ,   ,,·''                       
        // -100 |                 ,,A''                            
        //      |            ,,·''   '                             
        // -200 |       ,,·''         ',           3               
        //      |  ,,·''                ,                          
        // -300 C''                      ·                         
        //      |                         '                        
        // -400 |              2           ',                      
        //      |                            ,                     
        // -500 └-----------------------------D-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -400, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -100, -400, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -100, -500, -300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, -100, 100, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -100, -100, 500, 200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 100, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 100, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -400, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, -300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 100, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -400, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -400, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(300, 500), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑    B                                             
        //      |     '                                            
        //  700 |      ',                                          
        //      |        ,                                         
        //  600 |         ·                                        
        //      |          '                                       
        //  500 |           ',           4                      ,,E
        //      |             ,                            ,,·''   
        //  400 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  300 |    1           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  200 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  100 |       ,,·''         ',           3               
        //      |  ,,·''                ,                          
        //    0 C''       ●              ·                         
        //      |                         '                        
        // -100 |              2           ',                      
        //      |                            ,                     
        // -200 └-----------------------------D-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, -100, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, -200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, 400, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 200, 800, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 400, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -100, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 400, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -100, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -100, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(700, 900), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑    B                                             
        //      |     '                                            
        // 1100 |      ',                                          
        //      |        ,                                         
        // 1000 |         ·                                        
        //      |          '                                       
        //  900 |           ',           4                      ,,E
        //      |             ,                            ,,·''   
        //  800 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  700 |    1           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  600 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  500 |       ,,·''         ',           3               
        //      |  ,,·''                ,                          
        //  400 C''                      ·                         
        //      |                         '                        
        //  300 |              2           ',                      
        //      |                            ,                     
        //  200 └-----------------------------D-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 300, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 800, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 1200, 900), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 300, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 900)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1200, 900); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 900)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 300, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(700, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑         C                                        
        //      |          '                                       
        //  900 |           ',           1                      ,,B
        //      |             ,                            ,,·''   
        //  800 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  700 |    2           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  600 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  500 |       ,,·''         ',           4               
        //      |  ,,·''                ,                          
        //  400 D''                      ·                         
        //      |                         '                        
        //  300 |              3           ',                      
        //      |                            ,                     
        //  200 |                             ·                    
        //      |                              '                   
        //  100 |                               ',                 
        //      |                                 ,                
        //    0 ●----------------------------------E--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 1000, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 0, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 600, 700, 0), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 700, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-400, 200), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(200, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑         C                                        
        //      |          '                                       
        //  400 |           ',           1                      ,,B
        //      |             ,                            ,,·''   
        //  300 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  200 |    2           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  100 |                 ,,A''                            
        //      |            ,,·''   '                             
        //    0 |       ,,·''         ', ●         4               
        //      |  ,,·''                ,                          
        // -100 D''                      ·                         
        //      |                         '                        
        // -200 |              3           ',                      
        //      |                            ,                     
        // -300 |                             ·                    
        //      |                              '                   
        // -400 |                               ',                 
        //      |                                 ,                
        // -500 └----------------------------------E--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 100, 500, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, 100, -300, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, 100, -500, -100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -100, 100, 200, -500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, -100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -300, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -300, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, -100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 200, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 200, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(-100, 500), // #2
            new VoronoiSite(100, 100), // #3
            new VoronoiSite(500, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑         C                                        
        //      |          '                                       
        //  700 |           ',           1                      ,,B
        //      |             ,                            ,,·''   
        //  600 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  500 |    2           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  400 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  300 |       ,,·''         ',           4               
        //      |  ,,·''                ,                          
        //  200 D''                      ·                         
        //      |                         '                        
        //  100 |              3           ',                      
        //      |                            ,                     
        //    0 |         ●                   ·                    
        //      |                              '                   
        // -100 |                               ',                 
        //      |                                 ,                
        // -200 └----------------------------------E--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 800, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 400, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 400, -200, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 400, 500, -200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 0, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 500, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 500, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(900, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑         C                                        
        //      |          '                                       
        // 1100 |           ',           1                      ,,B
        //      |             ,                            ,,·''   
        // 1000 |              ·                      ,,·''        
        //      |               '                ,,·''             
        //  900 |    2           ',         ,,·''                  
        //      |                  ,   ,,·''                       
        //  800 |                 ,,A''                            
        //      |            ,,·''   '                             
        //  700 |       ,,·''         ',           4               
        //      |  ,,·''                ,                          
        //  600 D''                      ·                         
        //      |                         '                        
        //  500 |              3           ',                      
        //      |                            ,                     
        //  400 |                             ·                    
        //      |                              '                   
        //  300 |                               ',                 
        //      |                                 ,                
        //  200 └----------------------------------E--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 1200, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, 400, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 800, 200, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 800, 900, 200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 400, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 400, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 900, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 900, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 900, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1200, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(500, 300), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                   D                              
        //      |                    '                             
        //  900 |                     ',           2               
        //      |                       ,                          
        //  800 |                        ·                      ,,C
        //      |                         '                ,,·''   
        //  700 |              3           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  600 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  500 |                 ,,·''         ',           1     
        //      |            ,,·''                ,                
        //  400 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        //  300 E''                      4           ',            
        //      |                                      ,           
        //  200 |                                       ·          
        //      |                                        '         
        //  100 |                                         ',       
        //      |                                           ,      
        //    0 ●--------------------------------------------B----→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 900, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 1000, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 400, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 0, 300), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 0, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 900, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(0, -200), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                   D                              
        //      |                    '                             
        //  400 |                     ',           2               
        //      |                       ,                          
        //  300 |                        ·                      ,,C
        //      |                         '                ,,·''   
        //  200 |              3           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  100 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //    0 |                 ,,·''  ●      ',           1     
        //      |            ,,·''                ,                
        // -100 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        // -200 E''                      4           ',            
        //      |                                      ,           
        // -300 |                                       ·          
        //      |                                        '         
        // -400 |                                         ',       
        //      |                                           ,      
        // -500 └--------------------------------------------B----→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 100, 400, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 100, 500, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 100, -100, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, 100, -500, -200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -100, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -100, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 400, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -100, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 400, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 400, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(300, 100), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                   D                              
        //      |                    '                             
        //  700 |                     ',           2               
        //      |                       ,                          
        //  600 |                        ·                      ,,C
        //      |                         '                ,,·''   
        //  500 |              3           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  400 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  300 |                 ,,·''         ',           1     
        //      |            ,,·''                ,                
        //  200 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        //  100 E''                      4           ',            
        //      |                                      ,           
        //    0 |         ●                             ·          
        //      |                                        '         
        // -100 |                                         ',       
        //      |                                           ,      
        // -200 └--------------------------------------------B----→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 700, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 800, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 200, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, -200, 100), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 700, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 700, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(700, 500), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                   D                              
        //      |                    '                             
        // 1100 |                     ',           2               
        //      |                       ,                          
        // 1000 |                        ·                      ,,C
        //      |                         '                ,,·''   
        //  900 |              3           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  800 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  700 |                 ,,·''         ',           1     
        //      |            ,,·''                ,                
        //  600 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        //  500 E''                      4           ',            
        //      |                                      ,           
        //  400 |                                       ·          
        //      |                                        '         
        //  300 |                                         ',       
        //      |                                           ,      
        //  200 └--------------------------------------------B----→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 1100, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, 1200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 800, 600, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, 800, 200, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 600, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1100, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 600, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1100, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1100, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(300, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑              E                                   
        //      |               '                                  
        //  900 |                ',                                
        //      |                  ,                               
        //  800 |                   ·                              
        //      |                    '                             
        //  700 |                     ',           3               
        //      |                       ,                          
        //  600 |                        ·                      ,,D
        //      |                         '                ,,·''   
        //  500 |              4           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  400 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  300 |                 ,,·''         ',           2     
        //      |            ,,·''                ,                
        //  200 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        //  100 B''                      1           ',            
        //      |                                      ,           
        //    0 ●---------------------------------------C---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 0, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 1000, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 400, 300, 1000), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 300, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(-200, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑              E                                   
        //      |               '                                  
        //  400 |                ',                                
        //      |                  ,                               
        //  300 |                   ·                              
        //      |                    '                             
        //  200 |                     ',           3               
        //      |                       ,                          
        //  100 |                        ·                      ,,D
        //      |                         '                ,,·''   
        //    0 |              4         ● ',         ,,·''        
        //      |                            ,   ,,·''             
        // -100 |                           ,,A''                  
        //      |                      ,,·''   '                   
        // -200 |                 ,,·''         ',           2     
        //      |            ,,·''                ,                
        // -300 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        // -400 B''                      1           ',            
        //      |                                      ,           
        // -500 └---------------------------------------C---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -100, -500, -400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, -100, 300, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, -100, 500, 100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, -100, -200, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 300, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, -400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 300, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -500, -400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, -400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(100, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑              E                                   
        //      |               '                                  
        //  700 |                ',                                
        //      |                  ,                               
        //  600 |                   ·                              
        //      |                    '                             
        //  500 |                     ',           3               
        //      |                       ,                          
        //  400 |                        ·                      ,,D
        //      |                         '                ,,·''   
        //  300 |              4           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  200 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  100 |                 ,,·''         ',           2     
        //      |            ,,·''                ,                
        //    0 |       ,,●''                      ·               
        //      |  ,,·''                            '              
        // -100 B''                      1           ',            
        //      |                                      ,           
        // -200 └---------------------------------------C---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, -200, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 600, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 200, 800, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 200, 100, 800), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 600, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 600, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 100, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 100, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(900, 900), // #3
            new VoronoiSite(500, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑              E                                   
        //      |               '                                  
        // 1100 |                ',                                
        //      |                  ,                               
        // 1000 |                   ·                              
        //      |                    '                             
        //  900 |                     ',           3               
        //      |                       ,                          
        //  800 |                        ·                      ,,D
        //      |                         '                ,,·''   
        //  700 |              4           ',         ,,·''        
        //      |                            ,   ,,·''             
        //  600 |                           ,,A''                  
        //      |                      ,,·''   '                   
        //  500 |                 ,,·''         ',           2     
        //      |            ,,·''                ,                
        //  400 |       ,,·''                      ·               
        //      |  ,,·''                            '              
        //  300 B''                      1           ',            
        //      |                                      ,           
        //  200 └---------------------------------------C---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, 200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 600, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 600, 1200, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, 600, 500, 1200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1000, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 500, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 500, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(500, 700), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                                            B     
        //      |                                           '      
        //  900 |                                         ,'       
        //      |                                        ,         
        //  800 |                                       ·          
        //      |                                      '           
        //  700 E,,                      4           ,'            
        //      |  ''·,,                            ,              
        //  600 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  500 |                 ''·,,         ,'           1     
        //      |                      ''·,,   ,                   
        //  400 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  300 |              3           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //  200 |                        ·                      ''C
        //      |                       '                          
        //  100 |                     ,'           2               
        //      |                    ,                             
        //    0 ●-------------------D-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 900, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 400, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 400, 0, 700), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 0, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 900, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, -400), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(0, 200), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                                            B     
        //      |                                           '      
        //  400 |                                         ,'       
        //      |                                        ,         
        //  300 |                                       ·          
        //      |                                      '           
        //  200 E,,                      4           ,'            
        //      |  ''·,,                            ,              
        //  100 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //    0 |                 ''·,,  ●      ,'           1     
        //      |                      ''·,,   ,                   
        // -100 |                           ''A,,                  
        //      |                            '   ''·,,             
        // -200 |              3           ,'         ''·,,        
        //      |                         ,                ''·,,   
        // -300 |                        ·                      ''C
        //      |                       '                          
        // -400 |                     ,'           2               
        //      |                    ,                             
        // -500 └-------------------D-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, -100, 400, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, -100, 500, -300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, -100, -100, -500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, -100, -500, 200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -100, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -100, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 400, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 500, -300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -100, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -500, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, -500, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 400, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -100, 400, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, -100), // #2
            new VoronoiSite(100, 100), // #3
            new VoronoiSite(300, 500), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                                            B     
        //      |                                           '      
        //  700 |                                         ,'       
        //      |                                        ,         
        //  600 |                                       ·          
        //      |                                      '           
        //  500 E,,                      4           ,'            
        //      |  ''·,,                            ,              
        //  400 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  300 |                 ''·,,         ,'           1     
        //      |                      ''·,,   ,                   
        //  200 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  100 |              3           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //    0 |         ●              ·                      ''C
        //      |                       '                          
        // -100 |                     ,'           2               
        //      |                    ,                             
        // -200 └-------------------D-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, 700, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 200, 200, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 200, -200, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 700, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 800, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 200, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, -200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 700, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(700, 900), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                                            B     
        //      |                                           '      
        // 1100 |                                         ,'       
        //      |                                        ,         
        // 1000 |                                       ·          
        //      |                                      '           
        //  900 E,,                      4           ,'            
        //      |  ''·,,                            ,              
        //  800 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  700 |                 ''·,,         ,'           1     
        //      |                      ''·,,   ,                   
        //  600 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  500 |              3           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //  400 |                        ·                      ''C
        //      |                       '                          
        //  300 |                     ,'           2               
        //      |                    ,                             
        //  200 └-------------------D-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, 1100, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 600, 1200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 600, 600, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, 600, 200, 900), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1100, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 600, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 900)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 900); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 200, 900)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1100, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 1100, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(700, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                                  E               
        //      |                                 '                
        //  900 |                               ,'                 
        //      |                              ,                   
        //  800 |                             ·                    
        //      |                            '                     
        //  700 |              3           ,'                      
        //      |                         ,                        
        //  600 D,,                      ·                         
        //      |  ''·,,                '                          
        //  500 |       ''·,,         ,'           4               
        //      |            ''·,,   ,                             
        //  400 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  300 |    2           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //  200 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        //  100 |           ,'           1                      ''B
        //      |          ,                                       
        //    0 ●---------C---------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 1000, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 0, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, 700, 1000), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 700, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1000, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(-400, -200), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(200, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                                  E               
        //      |                                 '                
        //  400 |                               ,'                 
        //      |                              ,                   
        //  300 |                             ·                    
        //      |                            '                     
        //  200 |              3           ,'                      
        //      |                         ,                        
        //  100 D,,                      ·                         
        //      |  ''·,,                '                          
        //    0 |       ''·,,         ,' ●         4               
        //      |            ''·,,   ,                             
        // -100 |                 ''A,,                            
        //      |                  '   ''·,,                       
        // -200 |    2           ,'         ''·,,                  
        //      |               ,                ''·,,             
        // -300 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        // -400 |           ,'           1                      ''B
        //      |          ,                                       
        // -500 └---------C---------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, -100, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -100, 500, -400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -100, -300, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, -100, -500, 100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -100, -100, 200, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -300, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, -400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -300, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, -500, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, -400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -100, 500, -400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(500, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                                  E               
        //      |                                 '                
        //  700 |                               ,'                 
        //      |                              ,                   
        //  600 |                             ·                    
        //      |                            '                     
        //  500 |              3           ,'                      
        //      |                         ,                        
        //  400 D,,                      ·                         
        //      |  ''·,,                '                          
        //  300 |       ''·,,         ,'           4               
        //      |            ''·,,   ,                             
        //  200 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  100 |    2           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //    0 |         ●    ·                      ''·,,        
        //      |             '                            ''·,,   
        // -100 |           ,'           1                      ''B
        //      |          ,                                       
        // -200 └---------C---------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 800, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 0, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, -200, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 200, 500, 800), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 0, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 0, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, -200, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 500, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 500, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 800, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(900, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                                  E               
        //      |                                 '                
        // 1100 |                               ,'                 
        //      |                              ,                   
        // 1000 |                             ·                    
        //      |                            '                     
        //  900 |              3           ,'                      
        //      |                         ,                        
        //  800 D,,                      ·                         
        //      |  ''·,,                '                          
        //  700 |       ''·,,         ,'           4               
        //      |            ''·,,   ,                             
        //  600 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  500 |    2           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //  400 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        //  300 |           ,'           1                      ''B
        //      |          ,                                       
        //  200 └---------C---------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 1200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 400, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 200, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 900, 1200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 400, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 400, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 900, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 900, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 900, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 1200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(500, 300), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                             D                    
        //      |                            '                     
        //  900 |              2           ,'                      
        //      |                         ,                        
        //  800 C,,                      ·                         
        //      |  ''·,,                '                          
        //  700 |       ''·,,         ,'           3               
        //      |            ''·,,   ,                             
        //  600 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  500 |    1           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //  400 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        //  300 |           ,'           4                      ''E
        //      |          ,                                       
        //  200 |         ·                                        
        //      |        '                                         
        //  100 |      ,'                                          
        //      |     ,                                            
        //    0 ●----B--------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 100, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 600, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 600, 1000, 300), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1000, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 100, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, 400), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(0, -200), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                             D                    
        //      |                            '                     
        //  400 |              2           ,'                      
        //      |                         ,                        
        //  300 C,,                      ·                         
        //      |  ''·,,                '                          
        //  200 |       ''·,,         ,'           3               
        //      |            ''·,,   ,                             
        //  100 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //    0 |    1           ,'      ●  ''·,,                  
        //      |               ,                ''·,,             
        // -100 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        // -200 |           ,'           4                      ''E
        //      |          ,                                       
        // -300 |         ·                                        
        //      |        '                                         
        // -400 |      ,'                                          
        //      |     ,                                            
        // -500 └----B--------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, -100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -400, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 100, -400, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, 100, -500, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -100, 100, 100, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -100, 100, 500, -200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 100, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -400, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -500, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 100, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, 500, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -400, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 100, -400, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(500, 500), // #3
            new VoronoiSite(300, 100), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                             D                    
        //      |                            '                     
        //  700 |              2           ,'                      
        //      |                         ,                        
        //  600 C,,                      ·                         
        //      |  ''·,,                '                          
        //  500 |       ''·,,         ,'           3               
        //      |            ''·,,   ,                             
        //  400 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  300 |    1           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //  200 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        //  100 |           ,'           4                      ''E
        //      |          ,                                       
        //    0 |         ●                                        
        //      |        '                                         
        // -100 |      ,'                                          
        //      |     ,                                            
        // -200 └----B--------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, -100, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 400, -200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 400, 400, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 200, 400, 800, 100), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -100, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 400, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 800, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -100, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, -100, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 1100), // #2
            new VoronoiSite(900, 900), // #3
            new VoronoiSite(700, 500), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                             D                    
        //      |                            '                     
        // 1100 |              2           ,'                      
        //      |                         ,                        
        // 1000 C,,                      ·                         
        //      |  ''·,,                '                          
        //  900 |       ''·,,         ,'           3               
        //      |            ''·,,   ,                             
        //  800 |                 ''A,,                            
        //      |                  '   ''·,,                       
        //  700 |    1           ,'         ''·,,                  
        //      |               ,                ''·,,             
        //  600 |              ·                      ''·,,        
        //      |             '                            ''·,,   
        //  500 |           ,'           4                      ''E
        //      |          ,                                       
        //  400 |         ·                                        
        //      |        '                                         
        //  300 |      ,'                                          
        //      |     ,                                            
        //  200 └----B--------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 300, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 800, 800, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 800, 1200, 500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 300, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 800, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 1200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 300, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(300, 500), // #4
        ];
        plane.SetSites(sites);

        // 1000 ↑                                       C          
        //      |                                      '           
        //  900 B,,                      1           ,'            
        //      |  ''·,,                            ,              
        //  800 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  700 |                 ''·,,         ,'           2     
        //      |                      ''·,,   ,                   
        //  600 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  500 |              4           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //  400 |                        ·                      ''D
        //      |                       '                          
        //  300 |                     ,'           3               
        //      |                    ,                             
        //  200 |                   ·                              
        //      |                  '                               
        //  100 |                ,'                                
        //      |               ,                                  
        //    0 ●--------------E----------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 0, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 800, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 1000, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 300, 0), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 300, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(-200, 0), // #4
        ];
        plane.SetSites(sites);

        //  500 ↑                                       C          
        //      |                                      '           
        //  400 B,,                      1           ,'            
        //      |  ''·,,                            ,              
        //  300 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  200 |                 ''·,,         ,'           2     
        //      |                      ''·,,   ,                   
        //  100 |                           ''A,,                  
        //      |                            '   ''·,,             
        //    0 |              4         ● ,'         ''·,,        
        //      |                         ,                ''·,,   
        // -100 |                        ·                      ''D
        //      |                       '                          
        // -200 |                     ,'           3               
        //      |                    ,                             
        // -300 |                   ·                              
        //      |                  '                               
        // -400 |                ,'                                
        //      |               ,                                  
        // -500 └--------------E----------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 100, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 100, -500, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 100, 300, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, 100, 500, -100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, 100, -200, -500), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, -100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 300, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 300, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, 500, -100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -200, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -200, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -500, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 100, -500, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(100, 300), // #4
        ];
        plane.SetSites(sites);

        //  800 ↑                                       C          
        //      |                                      '           
        //  700 B,,                      1           ,'            
        //      |  ''·,,                            ,              
        //  600 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  500 |                 ''·,,         ,'           2     
        //      |                      ''·,,   ,                   
        //  400 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  300 |              4           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //  200 |                        ·                      ''D
        //      |                       '                          
        //  100 |                     ,'           3               
        //      |                    ,                             
        //    0 |         ●         ·                              
        //      |                  '                               
        // -100 |                ,'                                
        //      |               ,                                  
        // -200 └--------------E----------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, -200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 600, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 800, 200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, 100, -200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 600, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 600, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 100, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 100, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, -200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(1100, 900), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(500, 700), // #4
        ];
        plane.SetSites(sites);

        // 1200 ↑                                       C          
        //      |                                      '           
        // 1100 B,,                      1           ,'            
        //      |  ''·,,                            ,              
        // 1000 |       ''·,,                      ·               
        //      |            ''·,,                '                
        //  900 |                 ''·,,         ,'           2     
        //      |                      ''·,,   ,                   
        //  800 |                           ''A,,                  
        //      |                            '   ''·,,             
        //  700 |              4           ,'         ''·,,        
        //      |                         ,                ''·,,   
        //  600 |                        ·                      ''D
        //      |                       '                          
        //  500 |                     ,'           3               
        //      |                    ,                             
        //  400 |                   ·                              
        //      |                  '                               
        //  300 |                ,'                                
        //      |               ,                                  
        //  200 └--------------E----------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(5), "Expected: point count 5");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point E"); // E
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 200, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, 1000, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 800, 1200, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 800, 800, 500, 200), Is.True, "Expected: has edge A-E"); // A-E

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1000, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1000, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1200, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 500, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 500, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 200, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FivePointsInAForkedTallCross()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑         C,                           ,D          
        //      |           ',                       ,'            
        //  900 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  800 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  700 |              2        'B'        5               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 E------------------------A------------------------F
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              3         |         4               
        //      |                        |                         
        //    0 ●------------------------G------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 400, 500, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 700, 800, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 400, 0, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 400, 1000, 400), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 400, 500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 0, 400); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 1000, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedTallCross_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -400), // #3
            new VoronoiSite(200, -400), // #4
            new VoronoiSite(200, 200), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑         C,                           ,D          
        //      |           ',                       ,'            
        //  400 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  300 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  200 |              2        'B'        5               
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 E------------------------A------------------------F
        //      |                        |                         
        // -200 |                        |                         
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |              3         |         4               
        //      |                        |                         
        // -500 └------------------------G------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 0, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -100, 0, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, -300, 500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 200, 300, 500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, -100, -500, -100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, -100, 500, -100), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, -100, 0, -500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 0, -500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -500, -100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -500, -100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 0, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -500, -100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 500, -100)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 0, -500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 500, -100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 500, -100)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, 0, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -300, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 300, 500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -300, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 300, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 300, 500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedTallCross_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(500, -100), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑         C,                           ,D          
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              2        'B'        5               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 E------------------------A------------------------F
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |              3         |         4               
        //      |                        |                         
        // -200 └------------------------G------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 300, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 200, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 500, 600, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 200, -200, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 200, 800, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 200, 300, -200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 300, -200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -200, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, -200, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, -200, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 800, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 300, -200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 800, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 800, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 600, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 600, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 600, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedTallCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 1100), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(900, 300), // #4
            new VoronoiSite(900, 900), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑         C,                           ,D          
        //      |           ',                       ,'            
        // 1100 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        // 1000 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  900 |              2        'B'        5               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 E------------------------A------------------------F
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              3         |         4               
        //      |                        |                         
        //  200 └------------------------G------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 700, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 600, 700, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 900, 400, 1200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 900, 1000, 1200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 600, 200, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 600, 1200, 600), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 600, 700, 200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 200, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 200, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 200, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 1200, 600)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 1200, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 1200, 600)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 700, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 400, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1000, 1200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 400, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 400, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1000, 1200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(700, 300), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                   E                              
        //      |                   |                              
        //  900 |                   |                              
        //      |                   |                              
        //  800 |                   |                            ,C
        //      |                   |                          ,'  
        //  700 |    3              |              2        ,·'    
        //      |                   |                     ,'       
        //  600 |                   |                  ,·'         
        //      |                   |                ,'            
        //  500 G-------------------A--------------B#        1     
        //      |                   |                ',            
        //  400 |                   |                  '·,         
        //      |                   |                     ',       
        //  300 |    4              |              5        '·,    
        //      |                   |                          ',  
        //  200 |                   |                            'D
        //      |                   |                              
        //  100 |                   |                              
        //      |                   |                              
        //    0 ●-------------------F-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 400, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 500, 700, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 400, 500, 400, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 500, 400, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 400, 500, 0, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 400, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 400, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 400, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-400, 200), // #3
            new VoronoiSite(-400, -200), // #4
            new VoronoiSite(200, -200), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                   E                              
        //      |                   |                              
        //  400 |                   |                              
        //      |                   |                              
        //  300 |                   |                            ,C
        //      |                   |                          ,'  
        //  200 |    3              |              2        ,·'    
        //      |                   |                     ,'       
        //  100 |                   |                  ,·'         
        //      |                   |                ,'            
        //    0 G-------------------A----●---------B#        1     
        //      |                   |                ',            
        // -100 |                   |                  '·,         
        //      |                   |                     ',       
        // -200 |    4              |              5        '·,    
        //      |                   |                          ',  
        // -300 |                   |                            'D
        //      |                   |                              
        // -400 |                   |                              
        //      |                   |                              
        // -500 └-------------------F-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, -100, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, 0, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 500, 300), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 0, 500, -300), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, -100, 0, -100, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -100, 0, -100, -500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -100, 0, -500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -100, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -100, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -100, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -100, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -100, -500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -100, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, -100, -500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 300)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, -300)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 300)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, -300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, -300)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(-100, 500), // #3
            new VoronoiSite(-100, 100), // #4
            new VoronoiSite(500, 100), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                   E                              
        //      |                   |                              
        //  700 |                   |                              
        //      |                   |                              
        //  600 |                   |                            ,C
        //      |                   |                          ,'  
        //  500 |    3              |              2        ,·'    
        //      |                   |                     ,'       
        //  400 |                   |                  ,·'         
        //      |                   |                ,'            
        //  300 G-------------------A--------------B#        1     
        //      |                   |                ',            
        //  200 |                   |                  '·,         
        //      |                   |                     ',       
        //  100 |    4              |              5        '·,    
        //      |                   |                          ',  
        //    0 |         ●         |                            'D
        //      |                   |                              
        // -100 |                   |                              
        //      |                   |                              
        // -200 └-------------------F-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 300, 500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 200, 300, 200, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 300, 200, -200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 200, 300, -200, 300), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, -200, 300)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 200, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 200, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 200, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 200, -200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, -200, 300)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 200, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 200, -200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 600)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 600)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 700), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(300, 900), // #3
            new VoronoiSite(300, 500), // #4
            new VoronoiSite(900, 500), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                   E                              
        //      |                   |                              
        // 1100 |                   |                              
        //      |                   |                              
        // 1000 |                   |                            ,C
        //      |                   |                          ,'  
        //  900 |    3              |              2        ,·'    
        //      |                   |                     ,'       
        //  800 |                   |                  ,·'         
        //      |                   |                ,'            
        //  700 G-------------------A--------------B#        1     
        //      |                   |                ',            
        //  600 |                   |                  '·,         
        //      |                   |                     ',       
        //  500 |    4              |              5        '·,    
        //      |                   |                          ',  
        //  400 |                   |                            'D
        //      |                   |                              
        //  300 |                   |                              
        //      |                   |                              
        //  200 └-------------------F-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 600, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 700, 900, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 700, 1200, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 900, 700, 1200, 400), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 600, 700, 600, 1200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 700, 600, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 600, 700, 200, 700), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 200, 700)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 600, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 600, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 900, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 200, 700)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 600, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 600, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 900, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 900, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                        G                         
        //      |                        |                         
        //  900 |              4         |         3               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 F------------------------A------------------------E
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //    0 ●---------D'---------------------------'C---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 600, 500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 300, 200, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 600, 1000, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 600, 0, 600), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 600, 500, 1000), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 1000, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 0, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(-200, 400), // #4
            new VoronoiSite(-200, -200), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                        G                         
        //      |                        |                         
        //  400 |              4         |         3               
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 F------------------------A------------------------E
        //      |                        |                         
        //    0 |                        ●                         
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 |              5        ,B,        2               
        //      |                     ,'   ',                      
        // -300 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // -400 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -500 └---------D'---------------------------'C---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 0, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 100, 0, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -200, 300, -500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, -200, -300, -500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, 100, 500, 100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 100, -500, 100), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 100, 0, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 0, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 500, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 500, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 0, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 500, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, -500, 100)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 0, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -500, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, -500, 100)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 0, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 300, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -300, -500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 300, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -300, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -300, -500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, -100), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(100, 700), // #4
            new VoronoiSite(100, 100), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                        G                         
        //      |                        |                         
        //  700 |              4         |         3               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |                        |                         
        //      |                        |                         
        //  400 F------------------------A------------------------E
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //    0 |         ●        ,·'       '·,                   
        //      |                ,'             ',                 
        // -100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -200 └---------D'---------------------------'C---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 300, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 400, 300, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 100, 600, -200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 100, 0, -200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 400, 800, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 400, -200, 400), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 400, 300, 800), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 800)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 800, 400); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 800, 400)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 800, 400)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, -200, 400)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 800)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -200, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, -200, 400)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 300, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 600, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 0, -200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 600, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 600, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 0, -200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(900, 1100), // #3
            new VoronoiSite(500, 1100), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                        G                         
        //      |                        |                         
        // 1100 |              4         |         3               
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 F------------------------A------------------------E
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  200 └---------D'---------------------------'C---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 700, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 800, 700, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 500, 400, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 800, 1200, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 800, 200, 800), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 800, 700, 1200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 700, 1200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 1200, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 1200, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 700, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 1200, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 200, 800)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 700, 1200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 200, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 200, 800)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 800, 700, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 400, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 400, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 400, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(300, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                             F                    
        //      |                             |                    
        //  900 |                             |                    
        //      |                             |                    
        //  800 D,                            |                    
        //      | ',                          |                    
        //  700 |   '·,        5              |              4     
        //      |      ',                     |                    
        //  600 |        '·,                  |                    
        //      |           ',                |                    
        //  500 |    1        #B--------------A-------------------G
        //      |           ,'                |                    
        //  400 |        ,·'                  |                    
        //      |      ,'                     |                    
        //  300 |   ,·'        2              |              3     
        //      | ,'                          |                    
        //  200 C'                            |                    
        //      |                             |                    
        //  100 |                             |                    
        //      |                             |                    
        //    0 ●-----------------------------E-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 600, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 500, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 600, 500, 600, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 500, 600, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 600, 500, 1000, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 600, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 600, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 600, 1000); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(400, -200), // #3
            new VoronoiSite(400, 200), // #4
            new VoronoiSite(-200, 200), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                             F                    
        //      |                             |                    
        //  400 |                             |                    
        //      |                             |                    
        //  300 D,                            |                    
        //      | ',                          |                    
        //  200 |   '·,        5              |              4     
        //      |      ',                     |                    
        //  100 |        '·,                  |                    
        //      |           ',                |                    
        //    0 |    1        #B---------●----A-------------------G
        //      |           ,'                |                    
        // -100 |        ,·'                  |                    
        //      |      ,'                     |                    
        // -200 |   ,·'        2              |              3     
        //      | ,'                          |                    
        // -300 C'                            |                    
        //      |                             |                    
        // -400 |                             |                    
        //      |                             |                    
        // -500 └-----------------------------E-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 100, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 0, -200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 0, -500, -300), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, -200, 0, -500, 300), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 100, 0, 100, -500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 100, 0, 100, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 100, 0, 500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 100, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 100, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 100, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, -200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 100, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 100, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 100, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 100, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, -200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, -200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, -300)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 300)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, -300)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -500, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 300)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 300), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(700, 100), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(100, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                             F                    
        //      |                             |                    
        //  700 |                             |                    
        //      |                             |                    
        //  600 D,                            |                    
        //      | ',                          |                    
        //  500 |   '·,        5              |              4     
        //      |      ',                     |                    
        //  400 |        '·,                  |                    
        //      |           ',                |                    
        //  300 |    1        #B--------------A-------------------G
        //      |           ,'                |                    
        //  200 |        ,·'                  |                    
        //      |      ,'                     |                    
        //  100 |   ,·'        2              |              3     
        //      | ,'                          |                    
        //    0 C'        ●                   |                    
        //      |                             |                    
        // -100 |                             |                    
        //      |                             |                    
        // -200 └-----------------------------E-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 400, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 300, 100, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 300, -200, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 100, 300, -200, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 400, 300, 400, -200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 300, 400, 800), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 400, 300, 800, 300), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 800, 300)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 400, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 400, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 100, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, 800)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 800, 300)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 400, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 400, 800)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 100, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 100, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(1100, 500), // #3
            new VoronoiSite(1100, 900), // #4
            new VoronoiSite(500, 900), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                             F                    
        //      |                             |                    
        // 1100 |                             |                    
        //      |                             |                    
        // 1000 D,                            |                    
        //      | ',                          |                    
        //  900 |   '·,        5              |              4     
        //      |      ',                     |                    
        //  800 |        '·,                  |                    
        //      |           ',                |                    
        //  700 |    1        #B--------------A-------------------G
        //      |           ,'                |                    
        //  600 |        ,·'                  |                    
        //      |      ,'                     |                    
        //  500 |   ,·'        2              |              3     
        //      | ,'                          |                    
        //  400 C'                            |                    
        //      |                             |                    
        //  300 |                             |                    
        //      |                             |                    
        //  200 └-----------------------------E-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 800, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 700, 500, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 800, 700, 800, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 700, 800, 1200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 800, 700, 1200, 700), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 1200, 700)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 800, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 800, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 800, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 500, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 800, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 800, 1200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 1200, 700)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 800, 1200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 800, 1200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 700, 500, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 400)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 400)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedStubbyCross()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 C,                                               ,D
        //      | ',                                           ,'  
        //  900 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  800 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  700 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  600 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  500 |              2        'B'        5               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 E------------------------A------------------------F
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              3         |         4               
        //      |                        |                         
        //    0 ●------------------------G------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 300, 0, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 300, 1000, 300), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 0, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 1000, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 0, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-200, -400), // #3
            new VoronoiSite(200, -400), // #4
            new VoronoiSite(200, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 C,                                               ,D
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 |              2        'B'        5               
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 E------------------------A------------------------F
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |              3         |         4               
        //      |                        |                         
        // -500 └------------------------G------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, 500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, 500, 500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, -200, -500, -200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, -200, 500, -200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, -200, 0, -500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, -200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 500, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, -200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(100, -100), // #3
            new VoronoiSite(500, -100), // #4
            new VoronoiSite(500, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 C,                                               ,D
        //      | ',                                           ,'  
        //  700 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  600 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  500 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  300 |              2        'B'        5               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 E------------------------A------------------------F
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |              3         |         4               
        //      |                        |                         
        // -200 └------------------------G------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 100, 300, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 300, 800, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 100, -200, 100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 100, 800, 100), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 100, 300, -200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -200, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 100)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 800, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 100)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void FivePointsInAForkedStubbyCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(900, 300), // #4
            new VoronoiSite(900, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 C,                                               ,D
        //      | ',                                           ,'  
        // 1100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // 1000 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  900 |             '·,        1        ,·'              
        //      |                ',             ,'                 
        //  800 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  700 |              2        'B'        5               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 E------------------------A------------------------F
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              3         |         4               
        //      |                        |                         
        //  200 └------------------------G------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 700, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 1200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 700, 1200, 1200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 500, 200, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 500, 1200, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 500, 700, 200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 1200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(500, 300), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑              E                                 ,C
        //      |              |                               ,'  
        //  900 |              |                            ,·'    
        //      |              |                          ,'       
        //  800 |              |                       ,·'         
        //      |              |                     ,'            
        //  700 |    3         |         2        ,·'              
        //      |              |                ,'                 
        //  600 |              |             ,·'                   
        //      |              |           ,'                      
        //  500 G--------------A---------B#        1               
        //      |              |           ',                      
        //  400 |              |             '·,                   
        //      |              |                ',                 
        //  300 |    4         |         5        '·,              
        //      |              |                     ',            
        //  200 |              |                       '·,         
        //      |              |                          ',       
        //  100 |              |                            '·,    
        //      |              |                               ',  
        //    0 ●--------------F---------------------------------'D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 500, 300, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 500, 300, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 300, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 300, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1000, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1000, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 0), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(-400, 200), // #3
            new VoronoiSite(-400, -200), // #4
            new VoronoiSite(0, -200), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑              E                                 ,C
        //      |              |                               ,'  
        //  400 |              |                            ,·'    
        //      |              |                          ,'       
        //  300 |              |                       ,·'         
        //      |              |                     ,'            
        //  200 |    3         |         2        ,·'              
        //      |              |                ,'                 
        //  100 |              |             ,·'                   
        //      |              |           ,'                      
        //    0 G--------------A---------B#        1               
        //      |              |           ',                      
        // -100 |              |             '·,                   
        //      |              |                ',                 
        // -200 |    4         |         5        '·,              
        //      |              |                     ',            
        // -300 |              |                       '·,         
        //      |              |                          ',       
        // -400 |              |                            '·,    
        //      |              |                               ',  
        // -500 └--------------F---------------------------------'D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 500, 500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, 500, -500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, -200, 0, -200, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -200, 0, -200, -500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -200, 0, -500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, -200, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, -500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -200, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, -500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-100, 500), // #3
            new VoronoiSite(-100, 100), // #4
            new VoronoiSite(300, 100), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑              E                                 ,C
        //      |              |                               ,'  
        //  700 |              |                            ,·'    
        //      |              |                          ,'       
        //  600 |              |                       ,·'         
        //      |              |                     ,'            
        //  500 |    3         |         2        ,·'              
        //      |              |                ,'                 
        //  400 |              |             ,·'                   
        //      |              |           ,'                      
        //  300 G--------------A---------B#        1               
        //      |              |           ',                      
        //  200 |              |             '·,                   
        //      |              |                ',                 
        //  100 |    4         |         5        '·,              
        //      |              |                     ',            
        //    0 |         ●    |                       '·,         
        //      |              |                          ',       
        // -100 |              |                            '·,    
        //      |              |                               ',  
        // -200 └--------------F---------------------------------'D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 300, 300, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, 800, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 300, 800, -200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 100, 300, 100, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 100, 300, 100, -200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 100, 300, -200, 300), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 100, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 100, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 300, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, -200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 100, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, -200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 300, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 800, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 800, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 900), // #3
            new VoronoiSite(300, 500), // #4
            new VoronoiSite(700, 500), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑              E                                 ,C
        //      |              |                               ,'  
        // 1100 |              |                            ,·'    
        //      |              |                          ,'       
        // 1000 |              |                       ,·'         
        //      |              |                     ,'            
        //  900 |    3         |         2        ,·'              
        //      |              |                ,'                 
        //  800 |              |             ,·'                   
        //      |              |           ,'                      
        //  700 G--------------A---------B#        1               
        //      |              |           ',                      
        //  600 |              |             '·,                   
        //      |              |                ',                 
        //  500 |    4         |         5        '·,              
        //      |              |                     ',            
        //  400 |              |                       '·,         
        //      |              |                          ',       
        //  300 |              |                            '·,    
        //      |              |                               ',  
        //  200 └--------------F---------------------------------'D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 700, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 1200, 1200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 700, 1200, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 700, 500, 1200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 700, 500, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 700, 200, 700), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 500, 1200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 700, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 500, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 700, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 1200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                        G                         
        //      |                        |                         
        //  900 |              4         |         3               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 F------------------------A------------------------E
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 D'-----------------------------------------------'C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 700, 1000, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 700, 0, 700), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 1000); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 1000, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 0, 700); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1000, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(-200, 400), // #4
            new VoronoiSite(-200, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                        G                         
        //      |                        |                         
        //  400 |              4         |         3               
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 F------------------------A------------------------E
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |              5        ,B,        2               
        //      |                     ,'   ',                      
        // -100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // -200 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        // -300 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        // -400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -500 D'-----------------------------------------------'C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 500, -500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, -500, -500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, 200, 500, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 200, -500, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 200, 0, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 500, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -500, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(100, 700), // #4
            new VoronoiSite(100, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                        G                         
        //      |                        |                         
        //  700 |              4         |         3               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 F------------------------A------------------------E
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //    0 |        ,●'                           '·,         
        //      |      ,'                                 ',       
        // -100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        // -200 D'-----------------------------------------------'C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 300, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, 800, -200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 300, -200, -200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 500, 800, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 500, -200, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 500, 300, 800), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 800); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 800, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, -200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 800, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 800, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(900, 1100), // #3
            new VoronoiSite(500, 1100), // #4
            new VoronoiSite(500, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                        G                         
        //      |                        |                         
        // 1100 |              4         |         3               
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 F------------------------A------------------------E
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              5        ,B,        2               
        //      |                     ,'   ',                      
        //  600 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  500 |             ,·'        1        '·,              
        //      |           ,'                       ',            
        //  400 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  300 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  200 D'-----------------------------------------------'C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 700, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 900, 700, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 1200, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 700, 200, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 900, 1200, 900), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 900, 200, 900), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 900, 700, 1200), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 1200, 900); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 900)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 900)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 900)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 200, 900); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 900)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 1200, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(500, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 D,                                 F               
        //      | ',                               |               
        //  900 |   '·,                            |               
        //      |      ',                          |               
        //  800 |        '·,                       |               
        //      |           ',                     |               
        //  700 |             '·,        5         |         4     
        //      |                ',                |               
        //  600 |                  '·,             |               
        //      |                     ',           |               
        //  500 |              1        #B---------A--------------G
        //      |                     ,'           |               
        //  400 |                  ,·'             |               
        //      |                ,'                |               
        //  300 |             ,·'        2         |         3     
        //      |           ,'                     |               
        //  200 |        ,·'                       |               
        //      |      ,'                          |               
        //  100 |   ,·'                            |               
        //      | ,'                               |               
        //    0 C'---------------------------------E--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 500, 700, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 500, 700, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 700, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 700, 1000); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 0, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 0), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(400, -200), // #3
            new VoronoiSite(400, 200), // #4
            new VoronoiSite(0, 200), // #5
        ];
        plane.SetSites(sites);

        //  500 D,                                 F               
        //      | ',                               |               
        //  400 |   '·,                            |               
        //      |      ',                          |               
        //  300 |        '·,                       |               
        //      |           ',                     |               
        //  200 |             '·,        5         |         4     
        //      |                ',                |               
        //  100 |                  '·,             |               
        //      |                     ',           |               
        //    0 |              1        #B---------A--------------G
        //      |                     ,'           |               
        // -100 |                  ,·'             |               
        //      |                ,'                |               
        // -200 |             ,·'        2         |         3     
        //      |           ,'                     |               
        // -300 |        ,·'                       |               
        //      |      ,'                          |               
        // -400 |   ,·'                            |               
        //      | ,'                               |               
        // -500 C'---------------------------------E--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, -500, -500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, -500, 500), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 200, 0, 200, -500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 0, 200, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 200, 0, 500, 0), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 200, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -500, 500)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, 100), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 D,                                 F               
        //      | ',                               |               
        //  700 |   '·,                            |               
        //      |      ',                          |               
        //  600 |        '·,                       |               
        //      |           ',                     |               
        //  500 |             '·,        5         |         4     
        //      |                ',                |               
        //  400 |                  '·,             |               
        //      |                     ',           |               
        //  300 |              1        #B---------A--------------G
        //      |                     ,'           |               
        //  200 |                  ,·'             |               
        //      |                ,'                |               
        //  100 |             ,·'        2         |         3     
        //      |           ,'                     |               
        //    0 |        ,●'                       |               
        //      |      ,'                          |               
        // -100 |   ,·'                            |               
        //      | ,'                               |               
        // -200 C'---------------------------------E--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 300, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -200, -200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 300, -200, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 300, 500, -200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 300, 500, 800), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 300, 800, 300), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 500, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 300, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 800)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 500, 800); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 800)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 300, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 300, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, -200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -200, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(1100, 500), // #3
            new VoronoiSite(1100, 900), // #4
            new VoronoiSite(700, 900), // #5
        ];
        plane.SetSites(sites);

        // 1200 D,                                 F               
        //      | ',                               |               
        // 1100 |   '·,                            |               
        //      |      ',                          |               
        // 1000 |        '·,                       |               
        //      |           ',                     |               
        //  900 |             '·,        5         |         4     
        //      |                ',                |               
        //  800 |                  '·,             |               
        //      |                     ',           |               
        //  700 |              1        #B---------A--------------G
        //      |                     ,'           |               
        //  600 |                  ,·'             |               
        //      |                ,'                |               
        //  500 |             ,·'        2         |         3     
        //      |           ,'                     |               
        //  400 |        ,·'                       |               
        //      |      ,'                          |               
        //  300 |   ,·'                            |               
        //      | ,'                               |               
        //  200 C'---------------------------------E--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(7), "Expected: point count 7");
        Assume.That(HasPoint(points, 900, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point G"); // G
        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 700, 700, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 200, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 700, 200, 1200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 900, 700, 900, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 900, 700, 900, 1200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 900, 700, 1200, 700), Is.True, "Expected: has edge A-G"); // A-G

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point G has edge A-G"); // G on A-G
        point = FindPoint(points, 900, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 900, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 700, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 1200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point A has edge A-G"); // A on A-G
        point = FindPoint(points, 900, 1200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 1200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 700, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 200, 1200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
    }

    [Test]
    public void SixPointsInADoubleCross()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 100), // #5
            new VoronoiSite(700, 100), // #6
        ];
        plane.SetSites(sites);

        // 1000 ↑                        H                         
        //      |                        |                         
        //  900 |              1         |         2               
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 C------------------------B------------------------G
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 |              3         |         4               
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 D------------------------A------------------------F
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 |              5         |         6               
        //      |                        |                         
        //    0 ●------------------------E------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 500, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 0, 700), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 700, 1000, 700), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 500, 300, 0, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 300, 1000, 300), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 0, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1000, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 0, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 1000, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 500, 1000); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    [Test]
    public void SixPointsInADoubleCross_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(-200, 0), // #3
            new VoronoiSite(200, 0), // #4
            new VoronoiSite(-200, -400), // #5
            new VoronoiSite(200, -400), // #6
        ];
        plane.SetSites(sites);

        //  500 ↑                        H                         
        //      |                        |                         
        //  400 |              1         |         2               
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 C------------------------B------------------------G
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 |              3         ●         4               
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 D------------------------A------------------------F
        //      |                        |                         
        // -300 |                        |                         
        //      |                        |                         
        // -400 |              5         |         6               
        //      |                        |                         
        // -500 └------------------------E------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, 0, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, -500, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 200, 500, 200), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 0, -200, -500, -200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, -200, 500, -200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, -200, 0, -500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 200, 0, 500), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, -500, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, -200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, -500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, -200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, -500, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 0, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 0, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, -500, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, 200)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 500, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 500, 200)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 0, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 0, 500)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    [Test]
    public void SixPointsInADoubleCross_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 300), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(100, -100), // #5
            new VoronoiSite(500, -100), // #6
        ];
        plane.SetSites(sites);

        //  800 ↑                        H                         
        //      |                        |                         
        //  700 |              1         |         2               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 C------------------------B------------------------G
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              3         |         4               
        //      |                        |                         
        //  200 |                        |                         
        //      |                        |                         
        //  100 D------------------------A------------------------F
        //      |                        |                         
        //    0 |         ●              |                         
        //      |                        |                         
        // -100 |              5         |         6               
        //      |                        |                         
        // -200 └------------------------E------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 300, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 100, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, -200, 500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 500, 800, 500), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 300, 100, -200, 100), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 100, 800, 100), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 100, 300, -200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 500, 300, 800), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, -200, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 100)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, -200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 800, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 800, 100)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, -200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 100, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 500)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 800, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 800, 500)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 300, 800); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 800)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    [Test]
    public void SixPointsInADoubleCross_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(500, 300), // #5
            new VoronoiSite(900, 300), // #6
        ];
        plane.SetSites(sites);

        // 1200 ↑                        H                         
        //      |                        |                         
        // 1100 |              1         |         2               
        //      |                        |                         
        // 1000 |                        |                         
        //      |                        |                         
        //  900 C------------------------B------------------------G
        //      |                        |                         
        //  800 |                        |                         
        //      |                        |                         
        //  700 |              3         |         4               
        //      |                        |                         
        //  600 |                        |                         
        //      |                        |                         
        //  500 D------------------------A------------------------F
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |              5         |         6               
        //      |                        |                         
        //  200 └------------------------E------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 700, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 900, 200, 900), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 900, 1200, 900), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 700, 500, 200, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 500, 1200, 500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 500, 700, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 900, 700, 1200), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 700, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 1200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1200, 500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 200, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 900)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 700, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 200, 900)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 900)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 1200, 900); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 1200, 900)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 700, 1200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 900, 700, 1200)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(100, 700), // #5
            new VoronoiSite(100, 300), // #6
        ];
        plane.SetSites(sites);

        // 1000 ↑              D                   C               
        //      |              |                   |               
        //  900 |              |                   |               
        //      |              |                   |               
        //  800 |              |                   |               
        //      |              |                   |               
        //  700 |    5         |         3         |         1     
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 E--------------A-------------------B--------------H
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |    6         |         4         |         2     
        //      |              |                   |               
        //  200 |              |                   |               
        //      |              |                   |               
        //  100 |              |                   |               
        //      |              |                   |               
        //    0 ●--------------F-------------------G--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 700, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 700, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 500, 700, 0), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 300, 500, 300, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 500, 300, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 300, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 300, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 700, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 700, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 700, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 1000, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(0, 200), // #3
            new VoronoiSite(0, -200), // #4
            new VoronoiSite(-400, 200), // #5
            new VoronoiSite(-400, -200), // #6
        ];
        plane.SetSites(sites);

        //  500 ↑              D                   C               
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |              |                   |               
        //      |              |                   |               
        //  200 |    5         |         3         |         1     
        //      |              |                   |               
        //  100 |              |                   |               
        //      |              |                   |               
        //    0 E--------------A---------●---------B--------------H
        //      |              |                   |               
        // -100 |              |                   |               
        //      |              |                   |               
        // -200 |    6         |         4         |         2     
        //      |              |                   |               
        // -300 |              |                   |               
        //      |              |                   |               
        // -400 |              |                   |               
        //      |              |                   |               
        // -500 └--------------F-------------------G--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 200, 500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 0, 200, -500), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, -200, 0, -200, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, -200, 0, -200, -500), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, -200, 0, -500, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 0, 500, 0), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, -200, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, -500)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -500, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, -200, -500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, -200, -500)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, 500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, 500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, -500)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 200, -500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 200, -500)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 500, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 500, 0)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(300, 100), // #4
            new VoronoiSite(-100, 500), // #5
            new VoronoiSite(-100, 100), // #6
        ];
        plane.SetSites(sites);

        //  800 ↑              D                   C               
        //      |              |                   |               
        //  700 |              |                   |               
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 |    5         |         3         |         1     
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 E--------------A-------------------B--------------H
        //      |              |                   |               
        //  200 |              |                   |               
        //      |              |                   |               
        //  100 |    6         |         4         |         2     
        //      |              |                   |               
        //    0 |         ●    |                   |               
        //      |              |                   |               
        // -100 |              |                   |               
        //      |              |                   |               
        // -200 └--------------F-------------------G--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 100, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 300, 500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 500, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 300, 500, -200), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 100, 300, 100, 800), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 100, 300, 100, -200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 100, 300, -200, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 300, 800, 300), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 100, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 100, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, -200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, -200, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 100, -200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 100, -200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 500, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 800)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 300, 500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, 800)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, -200)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 500, -200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 500, -200)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 800, 300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 800, 300)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 900), // #5
            new VoronoiSite(300, 500), // #6
        ];
        plane.SetSites(sites);

        // 1200 ↑              D                   C               
        //      |              |                   |               
        // 1100 |              |                   |               
        //      |              |                   |               
        // 1000 |              |                   |               
        //      |              |                   |               
        //  900 |    5         |         3         |         1     
        //      |              |                   |               
        //  800 |              |                   |               
        //      |              |                   |               
        //  700 E--------------A-------------------B--------------H
        //      |              |                   |               
        //  600 |              |                   |               
        //      |              |                   |               
        //  500 |    6         |         4         |         2     
        //      |              |                   |               
        //  400 |              |                   |               
        //      |              |                   |               
        //  300 |              |                   |               
        //      |              |                   |               
        //  200 └--------------F-------------------G--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 500, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 900, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 700, 900, 1200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 900, 700, 900, 200), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 500, 700, 500, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 700, 500, 200), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 700, 200, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 900, 700, 1200, 700), Is.True, "Expected: has edge B-H"); // B-H

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        point = FindPoint(points, 500, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 900, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 200)), Is.True, "Expected: point A has edge A-F"); // A on A-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 200, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
        point = FindPoint(points, 500, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 500, 200)), Is.True, "Expected: point F has edge A-F"); // F on A-F
        point = FindPoint(points, 900, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 1200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        point = FindPoint(points, 900, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(4));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 700, 900, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 1200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 200)), Is.True, "Expected: point B has edge B-G"); // B on B-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point B has edge B-H"); // B on B-H
        point = FindPoint(points, 900, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 900, 200)), Is.True, "Expected: point G has edge B-G"); // G on B-G
        point = FindPoint(points, 1200, 700); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 700, 1200, 700)), Is.True, "Expected: point H has edge B-H"); // H on B-H
    }

    [Test]
    public void FivePointsInARegularKite()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(800, 200), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                        A                         
        //      |                        |                         
        //  900 |                        |                         
        //      |                        |                         
        //  800 |         1             ,E,             4          
        //      |                     ,'   ',                      
        //  700 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  600 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  500 B---------F#             5             #H---------D
        //      |           ',                       ,'            
        //  400 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  300 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  200 |         2             'G'             3          
        //      |                        |                         
        //  100 |                        |                         
        //      |                        |                         
        //    0 ●------------------------C------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 500, 800, 500), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 500, 0, 500, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 0, 500, 200, 500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 500, 800, 800, 500), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 800, 500, 500, 200), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 500, 200, 200, 500), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 200, 500, 500, 800), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 500, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 200, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 800, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 500, 800); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInARegularKite_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-300, 300), // #1
            new VoronoiSite(-300, -300), // #2
            new VoronoiSite(300, -300), // #3
            new VoronoiSite(300, 300), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 ↑                        A                         
        //      |                        |                         
        //  400 |                        |                         
        //      |                        |                         
        //  300 |         1             ,E,             4          
        //      |                     ,'   ',                      
        //  200 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  100 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //    0 B---------F#             5             #H---------D
        //      |           ',                       ,'            
        // -100 |             '·,                 ,·'              
        //      |                ',             ,'                 
        // -200 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -300 |         2             'G'             3          
        //      |                        |                         
        // -400 |                        |                         
        //      |                        |                         
        // -500 └------------------------C------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -300, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, -300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 0, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 0, 300, 0), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, -500, 0, -300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -500, 0, -300, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 0, 300, 300, 0), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 300, 0, 0, -300), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 0, -300, -300, 0), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, -300, 0, 0, 300), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, -300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 0, -300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 0, -300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -300)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -300, 0)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, -300, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, -300, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, -300, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -300, 0)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 300)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 300, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 300, 0)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 0)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -300)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 300, 0)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 0)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 300)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInARegularKite_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 600), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(600, 0), // #3
            new VoronoiSite(600, 600), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                        A                         
        //      |                        |                         
        //  700 |                        |                         
        //      |                        |                         
        //  600 |         1             ,E,             4          
        //      |                     ,'   ',                      
        //  500 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  400 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  300 B---------F#             5             #H---------D
        //      |           ',                       ,'            
        //  200 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 |         2             'G'             3          
        //      |                        |                         
        // -100 |                        |                         
        //      |                        |                         
        // -200 └------------------------C------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, 300, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 300, 600, 300), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 300, -200, 300, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -200, 300, 0, 300), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 300, 600, 600, 300), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 600, 300, 300, 0), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 300, 0, 0, 300), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 0, 300, 300, 600), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 300, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 300, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 300, 0)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, 300)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 0, 300)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 0, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 0, 300)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, 300)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 600)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 600, 300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 600, 300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 300)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 300, 0)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 600, 300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 300, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 300)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 600)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 300, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInARegularKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 1000), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(1000, 400), // #3
            new VoronoiSite(1000, 1000), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 ↑                        A                         
        //      |                        |                         
        // 1100 |                        |                         
        //      |                        |                         
        // 1000 |         1             ,E,             4          
        //      |                     ,'   ',                      
        //  900 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  800 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  700 B---------F#             5             #H---------D
        //      |           ',                       ,'            
        //  600 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  500 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  400 |         2             'G'             3          
        //      |                        |                         
        //  300 |                        |                         
        //      |                        |                         
        //  200 └------------------------C------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 700, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1200, 700, 1000, 700), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 700, 200, 700, 400), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, 700, 400, 700), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 700, 1000, 1000, 700), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 1000, 700, 700, 400), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 700, 400, 400, 700), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 400, 700, 700, 1000), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 400)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 700, 400); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 700, 400)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 700, 700, 400)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 700)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 400, 700)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 700); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 400, 700)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 700)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 700, 1000)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 1000, 700); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 1000, 700)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 1000, 700)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 700, 700, 400)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 1000, 700)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 700, 1000); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 1000)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, 1000, 700)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 700, 1000)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 700, 1000)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(1000, 0), // #3
            new VoronoiSite(1000, 1000), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 1                       ,A,                       4
        //      |                     ,'   ',                      
        //  900 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  800 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  700 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  600 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  500 B#                       5                       #D
        //      | ',                                           ,'  
        //  400 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  300 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  200 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //    0 2-----------------------'C'-----------------------3
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 500, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 0, 1000, 500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 500, 500, 1000), Is.True, "Expected: has edge D-A"); // D-A

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: point A has edge D-A"); // A on D-A
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(-500, -500), // #2
            new VoronoiSite(500, -500), // #3
            new VoronoiSite(500, 500), // #4
            new VoronoiSite(0, 0), // #5
        ];
        plane.SetSites(sites);

        //  500 1                       ,A,                       4
        //      |                     ,'   ',                      
        //  400 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  300 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  200 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  100 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //    0 B#                       5                       #D
        //      | ',                                           ,'  
        // -100 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        // -200 |        '·,                           ,·'         
        //      |           ',                       ,'            
        // -300 |             '·,                 ,·'              
        //      |                ',             ,'                 
        // -400 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -500 2-----------------------'C'-----------------------3
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, -500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 0, 0, -500), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, -500, 500, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 500, 0, 0, 500), Is.True, "Expected: has edge D-A"); // D-A

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, -500)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 0, -500)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 500, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 500)), Is.True, "Expected: point A has edge D-A"); // A on D-A
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 800), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(800, -200), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 1                       ,A,                       4
        //      |                     ,'   ',                      
        //  700 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        //  600 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  500 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  400 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  300 B#                       5                       #D
        //      | ',                                           ,'  
        //  200 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  100 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //    0 |         ●   '·,                 ,·'              
        //      |                ',             ,'                 
        // -100 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        // -200 2-----------------------'C'-----------------------3
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, -200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 300, 300, -200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, -200, 800, 300), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 800, 300, 300, 800), Is.True, "Expected: has edge D-A"); // D-A

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, -200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 300)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 300, -200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 800, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 300)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, 800)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, 300, 800)), Is.True, "Expected: point A has edge D-A"); // A on D-A
    }

    [Test]
    public void FivePointsInABorderTouchingRegularKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 1200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(1200, 200), // #3
            new VoronoiSite(1200, 1200), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1200 1                       ,A,                       4
        //      |                     ,'   ',                      
        // 1100 |                  ,·'       '·,                   
        //      |                ,'             ',                 
        // 1000 |             ,·'                 '·,              
        //      |           ,'                       ',            
        //  900 |        ,·'                           '·,         
        //      |      ,'                                 ',       
        //  800 |   ,·'                                     '·,    
        //      | ,'                                           ',  
        //  700 B#                       5                       #D
        //      | ',                                           ,'  
        //  600 |   '·,                                     ,·'    
        //      |      ',                                 ,'       
        //  500 |        '·,                           ,·'         
        //      |           ',                       ,'            
        //  400 |             '·,                 ,·'              
        //      |                ',             ,'                 
        //  300 |                  '·,       ,·'                   
        //      |                     ',   ,'                      
        //  200 2-----------------------'C'-----------------------3
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 700, 700, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 200, 1200, 700), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1200, 700, 700, 1200), Is.True, "Expected: has edge D-A"); // D-A

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 200)), Is.True, "Expected: point C has edge B-C"); // C on B-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 700)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 700, 200)), Is.True, "Expected: point B has edge B-C"); // B on B-C
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 700)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 1200)), Is.True, "Expected: point D has edge D-A"); // D on D-A
        point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 700, 1200)), Is.True, "Expected: point A has edge D-A"); // A on D-A
    }

    [Test]
    public void FivePointsInASkewedKite()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(600, 200), // #3
            new VoronoiSite(600, 600), // #4
            new VoronoiSite(500, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                   A                    
        //      |                   |                    
        //  700 |                   |                    
        //      |                   |                    
        //  600 |         1         |         4          
        //      |                   |                    
        //  500 |                  ,E,,,                 
        //      |                ,'     '''··,,,         
        //  400 B--------------F'               ''#H----D
        //      |               ·               ,'       
        //  300 |                ·       5   ,·'         
        //      |                ·         ,'            
        //  200 |         2       ·     ,·'   3          
        //      |                  ·  ,'                 
        //  100 |                   G'                   
        //      |                   |                    
        //    0 ●-------------------C-------------------→
        //       0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 400, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 400), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 400, 100), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 800, 400, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 400, 700, 400), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 400, 0, 400, 100), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 0, 400, 300, 400), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 500, 700, 400), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 700, 400, 400, 100), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 400, 100, 300, 400), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 300, 400, 400, 500), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 100)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 100); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 100)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 100)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 300, 400)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 300, 400)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 300, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 300, 400)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 300, 400)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 400, 500)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 700, 400); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 700, 400)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 700, 400)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 100)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 800, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 700, 400)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 400, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 700, 400)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 400, 500)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 400, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInASkewedKite_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-400, -400, 400, 400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(200, -200), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(100, -100), // #5
        ];
        plane.SetSites(sites);

        //  400 ↑                   A                    
        //      |                   |                    
        //  300 |                   |                    
        //      |                   |                    
        //  200 |         1         |         4          
        //      |                   |                    
        //  100 |                  ,E,,,                 
        //      |                ,'     '''··,,,         
        //    0 B--------------F'   ●           ''#H----D
        //      |               ·               ,'       
        // -100 |                ·       5   ,·'         
        //      |                ·         ,'            
        // -200 |         2       ·     ,·'   3          
        //      |                  ·  ,'                 
        // -300 |                   G'                   
        //      |                   |                    
        // -400 └-------------------C-------------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, 100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, -100, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, -300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 0, 100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 0, 300, 0), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, -400, 0, -300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -400, 0, -100, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 0, 100, 300, 0), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 300, 0, 0, -300), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 0, -300, -100, 0), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, -100, 0, 0, 100), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 0, -300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -300)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -100, 0)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, -400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -100, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, -100, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -100, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -100, 0)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 0, 100)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 300, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 300, 0)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 300, 0)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -300)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 400, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 300, 0)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 300, 0)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 0, 100)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 0, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInASkewedKite_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(400, 0), // #3
            new VoronoiSite(400, 400), // #4
            new VoronoiSite(300, 100), // #5
        ];
        plane.SetSites(sites);

        //  600 ↑                   A                    
        //      |                   |                    
        //  500 |                   |                    
        //      |                   |                    
        //  400 |         1         |         4          
        //      |                   |                    
        //  300 |                  ,E,,,                 
        //      |                ,'     '''··,,,         
        //  200 B--------------F'               ''#H----D
        //      |               ·               ,'       
        //  100 |                ·       5   ,·'         
        //      |                ·         ,'            
        //    0 |         2       ·     ,·'   3          
        //      |                  ·  ,'                 
        // -100 |                   G'                   
        //      |                   |                    
        // -200 └-------------------C-------------------→
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, -100), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 600, 200, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 200, 500, 200), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 200, -200, 200, -100), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, -200, 200, 100, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 200, 300, 500, 200), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 500, 200, 200, -100), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 200, -100, 100, 200), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 100, 200, 200, 300), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, -100)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 200, -100); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, -100)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, -100)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 100, 200)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, -200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 100, 200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 100, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 100, 200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, 100, 200)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 200, 300)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 500, 200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 500, 200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 500, 200)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, -100)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 600, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 500, 200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 200, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 500, 200)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 200, 300)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void FivePointsInASkewedKite_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(800, 400), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(700, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                   A                    
        //      |                   |                    
        //  900 |                   |                    
        //      |                   |                    
        //  800 |         1         |         4          
        //      |                   |                    
        //  700 |                  ,E,,,                 
        //      |                ,'     '''··,,,         
        //  600 B--------------F'               ''#H----D
        //      |               ·               ,'       
        //  500 |                ·       5   ,·'         
        //      |                ·         ,'            
        //  400 |         2       ·     ,·'   3          
        //      |                  ·  ,'                 
        //  300 |                   G'                   
        //      |                   |                    
        //  200 └-------------------C-------------------→
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 600, 700), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 600), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 900, 600), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1000, 600, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 600, 900, 600), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 600, 200, 600, 300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, 600, 500, 600), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 700, 900, 600), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 900, 600, 600, 300), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 600, 300, 500, 600), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 500, 600, 600, 700), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 300)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 500, 600)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 500, 600)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 500, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 500, 600)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 500, 600)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 600, 700)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 900, 600); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 900, 600)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 900, 600)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 300)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 1000, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 900, 600)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 600, 700); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 700)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 900, 600)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 600, 700)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 600, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 700)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(200, 600), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(600, 200), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                   B                    
        //      |                   |                    
        //  700 |                   |                    
        //      |                   |                    
        //  600 |         2         |         1          
        //      |                   |                    
        //  500 |                ,,,F,                   
        //      |        ,,,··'''     ',                 
        //  400 C----G#''               'E--------------A
        //      |      ',               ·                
        //  300 |        '·,   5       ·                 
        //      |           ',        ·                  
        //  200 |         3   '·,     ·       4          
        //      |                ',  ·                   
        //  100 |                  'H                    
        //      |                   |                    
        //    0 ●-------------------D-------------------→
        //       0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 400), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 100, 400), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 400, 100), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 400, 500, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 0, 400, 100), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, 400, 100, 400), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 800, 400, 500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 500, 400, 400, 100), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 400, 100, 100, 400), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 100, 400, 400, 500), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 400, 500, 500, 400), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 100, 400)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 100, 400); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 100, 400)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 100, 400)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 500)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 400, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 500)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 500, 400)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 400, 100); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 100)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 400, 100)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 100, 100, 400)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 400, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 100)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 500, 400); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 500, 400)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 400, 100)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 500, 500, 400)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 800, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 500, 400)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-400, -400, 400, 400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(-200, -200), // #3
            new VoronoiSite(200, -200), // #4
            new VoronoiSite(-100, -100), // #5
        ];
        plane.SetSites(sites);

        //  400 ↑                   B                    
        //      |                   |                    
        //  300 |                   |                    
        //      |                   |                    
        //  200 |         2         |         1          
        //      |                   |                    
        //  100 |                ,,,F,                   
        //      |        ,,,··'''     ',                 
        //    0 C----G#''           ●   'E--------------A
        //      |      ',               ·                
        // -100 |        '·,   5       ·                 
        //      |           ',        ·                  
        // -200 |         3   '·,     ·       4          
        //      |                ',  ·                   
        // -300 |                  'H                    
        //      |                   |                    
        // -400 └-------------------D-------------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, 100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -300, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 0, -300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 0, 100, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, -400, 0, -300), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, -400, 0, -300, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 0, 400, 0, 100), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 100, 0, 0, -300), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 0, -300, -300, 0), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, -300, 0, 0, 100), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 0, 100, 100, 0), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, -400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -300, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, -300, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -300, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -300, 0)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 100)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 0, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 100)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 0, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 100)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 100)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 100, 0)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 0, -300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 0, -300)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -300, -300, 0)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 0, -400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 100, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 100, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 0, -300)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 100, 100, 0)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 400, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 100, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(0, 400), // #2
            new VoronoiSite(0, 0), // #3
            new VoronoiSite(400, 0), // #4
            new VoronoiSite(100, 100), // #5
        ];
        plane.SetSites(sites);

        //  600 ↑                   B                    
        //      |                   |                    
        //  500 |                   |                    
        //      |                   |                    
        //  400 |         2         |         1          
        //      |                   |                    
        //  300 |                ,,,F,                   
        //      |        ,,,··'''     ',                 
        //  200 C----G#''               'E--------------A
        //      |      ',               ·                
        //  100 |        '·,   5       ·                 
        //      |           ',        ·                  
        //    0 |         3   '·,     ·       4          
        //      |                ',  ·                   
        // -100 |                  'H                    
        //      |                   |                    
        // -200 └-------------------D-------------------→
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, -100, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 200, -100), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 200, 300, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, -200, 200, -100), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, -200, 200, -100, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, 600, 200, 300), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 300, 200, 200, -100), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 200, -100, -100, 200), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, -100, 200, 200, 300), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 200, 300, 300, 200), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, -100, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, -100, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, -100, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, -100, 200)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 200, 300)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 300)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 200, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 300)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 200, 300)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 300, 200)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 200, -100); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, -100)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 200, -100)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -100, -100, 200)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, -100)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 300, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 300, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 200, -100)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 300, 300, 200)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 600, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 300, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(400, 800), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(800, 400), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                   B                    
        //      |                   |                    
        //  900 |                   |                    
        //      |                   |                    
        //  800 |         2         |         1          
        //      |                   |                    
        //  700 |                ,,,F,                   
        //      |        ,,,··'''     ',                 
        //  600 C----G#''               'E--------------A
        //      |      ',               ·                
        //  500 |        '·,   5       ·                 
        //      |           ',        ·                  
        //  400 |         3   '·,     ·       4          
        //      |                ',  ·                   
        //  300 |                  'H                    
        //      |                   |                    
        //  200 └-------------------D-------------------→
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 700, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 700), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 600, 700, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 200, 600, 300), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 200, 600, 300, 600), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 1000, 600, 700), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 700, 600, 600, 300), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 600, 300, 300, 600), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 300, 600, 600, 700), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 600, 700, 700, 600), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 300, 600)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 300, 600); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 300, 600)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 300, 600)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 700)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 600, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 700)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 700); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 700)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 700)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 700, 600)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 600, 300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 600, 300)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 300, 600)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 600, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 700, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 700, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 600, 300)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 700, 700, 600)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 1000, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 700, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(200, 600), // #3
            new VoronoiSite(200, 200), // #4
            new VoronoiSite(300, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                   C                    
        //      |                   |                    
        //  700 |                  ,G                    
        //      |                ,'  ·                   
        //  600 |         3   ,·'     ·       2          
        //      |           ,'         ·                 
        //  500 |        ,·'   5       ·                 
        //      |      ,'               ·                
        //  400 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                 
        //  300 |                '''E'                   
        //      |                   |                    
        //  200 |         4         |         1          
        //      |                   |                    
        //  100 |                   |                    
        //      |                   |                    
        //    0 ●-------------------A-------------------→
        //       0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 400, 300), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 500, 400), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 100, 400), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 0, 400, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 400, 100, 400), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 400, 800, 400, 700), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 800, 400, 500, 400), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 300, 100, 400), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 100, 400, 400, 700), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 400, 700, 500, 400), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 500, 400, 400, 300), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 700)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 400, 700); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 700)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 700)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 500, 400)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 800, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 500, 400)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 500, 400); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 500, 400)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 500, 400)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 400, 300)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 100, 400); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 100, 400)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 100, 400)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 400, 400, 700)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 0, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 100, 400)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 400, 300); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 300)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 100, 400)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 400, 400, 300)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 400, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 300)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-400, -400, 400, 400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(-200, 200), // #3
            new VoronoiSite(-200, -200), // #4
            new VoronoiSite(-100, 100), // #5
        ];
        plane.SetSites(sites);

        //  400 ↑                   C                    
        //      |                   |                    
        //  300 |                  ,G                    
        //      |                ,'  ·                   
        //  200 |         3   ,·'     ·       2          
        //      |           ,'         ·                 
        //  100 |        ,·'   5       ·                 
        //      |      ,'               ·                
        //    0 D----H#,,           ●   ,F--------------B
        //      |        '''··,,,     ,'                 
        // -100 |                '''E'                   
        //      |                   |                    
        // -200 |         4         |         1          
        //      |                   |                    
        // -300 |                   |                    
        //      |                   |                    
        // -400 └-------------------A-------------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 0, -400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -400, 0), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 0, -100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 100, 0), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, -300, 0), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -400, 0, -100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -400, 0, -300, 0), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, 400, 0, 300), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 0, 100, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 0, -100, -300, 0), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, -300, 0, 0, 300), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 0, 300, 100, 0), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 100, 0, 0, -100), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 300)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 0, 300); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 300)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 300)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 100, 0)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 100, 0)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 100, 0); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 100, 0)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 100, 0)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 0, -100)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, -300, 0); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -300, 0)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -300, 0)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 0, 0, 300)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, -400, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -300, 0)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 0, -100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -300, 0)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 0, -100)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 0, -400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(0, 400), // #3
            new VoronoiSite(0, 0), // #4
            new VoronoiSite(100, 300), // #5
        ];
        plane.SetSites(sites);

        //  600 ↑                   C                    
        //      |                   |                    
        //  500 |                  ,G                    
        //      |                ,'  ·                   
        //  400 |         3   ,·'     ·       2          
        //      |           ,'         ·                 
        //  300 |        ,·'   5       ·                 
        //      |      ,'               ·                
        //  200 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                 
        //  100 |                '''E'                   
        //      |                   |                    
        //    0 |         4         |         1          
        //      |                   |                    
        // -100 |                   |                    
        //      |                   |                    
        // -200 └-------------------A-------------------→
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 200, 100), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 300, 200), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, -100, 200), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, -200, 200, 100), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, -200, 200, -100, 200), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 200, 600, 200, 500), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 200, 300, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 200, 100, -100, 200), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, -100, 200, 200, 500), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 200, 500, 300, 200), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 300, 200, 200, 100), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 500)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 200, 500); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 500)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 200, 500)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 300, 200)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 300, 200)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 300, 200); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 300, 200)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 300, 200)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 200, 100)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, -100, 200); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, -100, 200)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -100, 200)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 200, 200, 500)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, -200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, -100, 200)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 200, 100); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 100)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, -100, 200)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 200, 100)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 100)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(800, 800), // #2
            new VoronoiSite(400, 800), // #3
            new VoronoiSite(400, 400), // #4
            new VoronoiSite(500, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                   C                    
        //      |                   |                    
        //  900 |                  ,G                    
        //      |                ,'  ·                   
        //  800 |         3   ,·'     ·       2          
        //      |           ,'         ·                 
        //  700 |        ,·'   5       ·                 
        //      |      ,'               ·                
        //  600 D----H#,,               ,F--------------B
        //      |        '''··,,,     ,'                 
        //  500 |                '''E'                   
        //      |                   |                    
        //  400 |         4         |         1          
        //      |                   |                    
        //  300 |                   |                    
        //      |                   |                    
        //  200 └-------------------A-------------------→
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 600, 500), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 700, 600), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 600, 900), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 200, 600, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 600, 300, 600), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 600, 1000, 600, 900), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 1000, 600, 700, 600), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 500, 300, 600), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 300, 600, 600, 900), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 600, 900, 700, 600), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 700, 600, 600, 500), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 900)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 600, 900); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 900)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 900)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 700, 600)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 1000, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 700, 600)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 700, 600); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 700, 600)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 700, 600)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 600, 500)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 300, 600); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 300, 600)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 300, 600)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, 600, 900)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 300, 600)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 600, 500); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 500)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 300, 600)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 600, 600, 500)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 600, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 500)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(600, 200), // #2
            new VoronoiSite(600, 600), // #3
            new VoronoiSite(200, 600), // #4
            new VoronoiSite(500, 500), // #5
        ];
        plane.SetSites(sites);

        //  800 ↑                   D                    
        //      |                   |                    
        //  700 |                   H,                   
        //      |                  ·  ',                 
        //  600 |         4       ·     '·,   3          
        //      |                 ·        ',            
        //  500 |                ·       5   '·,         
        //      |               ·               ',       
        //  400 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''         
        //  300 |                  'F'''                 
        //      |                   |                    
        //  200 |         1         |         2          
        //      |                   |                    
        //  100 |                   |                    
        //      |                   |                    
        //    0 ●-------------------B-------------------→
        //       0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 300, 400), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 400, 300), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 300, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 800, 400, 700), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 800, 400, 700, 400), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 0, 400, 300), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 300, 400, 400, 700), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 400, 700, 700, 400), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 700, 400, 400, 300), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 400, 300, 300, 400), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 700, 400)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 700, 400); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 700, 400)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 700, 400)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 300)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 300)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 400, 300); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 400, 300)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 400, 400, 300)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 300, 400)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 400, 700); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 700)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 400, 700)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 700, 700, 400)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 400, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 400, 700)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 300, 400); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 300, 400)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 400, 400, 700)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 300, 300, 400)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 0, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 300, 400)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-400, -400, 400, 400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(200, 200), // #3
            new VoronoiSite(-200, 200), // #4
            new VoronoiSite(100, 100), // #5
        ];
        plane.SetSites(sites);

        //  400 ↑                   D                    
        //      |                   |                    
        //  300 |                   H,                   
        //      |                  ·  ',                 
        //  200 |         4       ·     '·,   3          
        //      |                 ·        ',            
        //  100 |                ·       5   '·,         
        //      |               ·               ',       
        //    0 A--------------E,   ●           ,,#G----C
        //      |                ',     ,,,··'''         
        // -100 |                  'F'''                 
        //      |                   |                    
        // -200 |         1         |         2          
        //      |                   |                    
        // -300 |                   |                    
        //      |                   |                    
        // -400 └-------------------B-------------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -400, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, -100, 0), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 0, -100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -400, 0, -100, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 400, 0, 300), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 400, 0, 300, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 0, -400, 0, -100), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, -100, 0, 0, 300), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 0, 300, 300, 0), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 300, 0, 0, -100), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 0, -100, -100, 0), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 300, 0)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 300, 0); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 300, 0)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 0)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -100)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 0, -400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -100)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 0, -100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -400, 0, -100)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 0, -100)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -100, 0)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 0, 300); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 300)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 0, 300)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 300, 0)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 0, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 0, 300)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, -100, 0); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -100, 0)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 0, 0, 300)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -100, -100, 0)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, -400, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -400, 0, -100, 0)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 0), // #1
            new VoronoiSite(400, 0), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(0, 400), // #4
            new VoronoiSite(300, 300), // #5
        ];
        plane.SetSites(sites);

        //  600 ↑                   D                    
        //      |                   |                    
        //  500 |                   H,                   
        //      |                  ·  ',                 
        //  400 |         4       ·     '·,   3          
        //      |                 ·        ',            
        //  300 |                ·       5   '·,         
        //      |               ·               ',       
        //  200 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''         
        //  100 |                  'F'''                 
        //      |                   |                    
        //    0 |         1         |         2          
        //      |                   |                    
        // -100 |                   |                    
        //      |                   |                    
        // -200 └-------------------B-------------------→
        //    -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 100, 200), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 200, 100), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 200, 100, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 600, 200, 500), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 600, 200, 500, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 200, -200, 200, 100), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 100, 200, 200, 500), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 200, 500, 500, 200), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 500, 200, 200, 100), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 200, 100, 100, 200), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 500, 200)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 500, 200); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 500, 200)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 500, 200)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, 100)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 100)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 200, 100); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, 200, 100)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 200, 100)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 100, 200)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 200, 500); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 500)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 200, 500)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 500, 200)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 200, 500)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 100, 200); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 100, 200)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 200, 200, 500)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 100, 100, 200)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, -200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 100, 200)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInASkewedKite_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInASkewedKite_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(800, 400), // #2
            new VoronoiSite(800, 800), // #3
            new VoronoiSite(400, 800), // #4
            new VoronoiSite(700, 700), // #5
        ];
        plane.SetSites(sites);

        // 1000 ↑                   D                    
        //      |                   |                    
        //  900 |                   H,                   
        //      |                  ·  ',                 
        //  800 |         4       ·     '·,   3          
        //      |                 ·        ',            
        //  700 |                ·       5   '·,         
        //      |               ·               ',       
        //  600 A--------------E,               ,,#G----C
        //      |                ',     ,,,··'''         
        //  500 |                  'F'''                 
        //      |                   |                    
        //  400 |         1         |         2          
        //      |                   |                    
        //  300 |                   |                    
        //      |                   |                    
        //  200 └-------------------B-------------------→
        //     200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(8), "Expected: point count 8");
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(HasPoint(points, 500, 600), Is.True, "Expected: has point E"); // E
        Assume.That(HasPoint(points, 600, 500), Is.True, "Expected: has point F"); // F
        Assume.That(HasPoint(points, 900, 600), Is.True, "Expected: has point G"); // G
        Assume.That(HasPoint(points, 600, 900), Is.True, "Expected: has point H"); // H
        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 600, 500, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 1000, 600, 900), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 1000, 600, 900, 600), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 200, 600, 500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 500, 600, 600, 900), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 600, 900, 900, 600), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 900, 600, 600, 500), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 600, 500, 500, 600), Is.True, "Expected: has edge F-E"); // F-E

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 900, 600)), Is.True, "Expected: point C has edge C-G"); // C on C-G
        point = FindPoint(points, 900, 600); // G
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 900, 600)), Is.True, "Expected: point G has edge C-G"); // G on C-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 900, 600)), Is.True, "Expected: point G has edge H-G"); // G on H-G
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 500)), Is.True, "Expected: point G has edge G-F"); // G on G-F
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 500)), Is.True, "Expected: point B has edge B-F"); // B on B-F
        point = FindPoint(points, 600, 500); // F
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 600, 500)), Is.True, "Expected: point F has edge B-F"); // F on B-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 600, 600, 500)), Is.True, "Expected: point F has edge G-F"); // F on G-F
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 500, 600)), Is.True, "Expected: point F has edge F-E"); // F on F-E
        point = FindPoint(points, 600, 900); // H
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 900)), Is.True, "Expected: point H has edge D-H"); // H on D-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 600, 900)), Is.True, "Expected: point H has edge E-H"); // H on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 900, 900, 600)), Is.True, "Expected: point H has edge H-G"); // H on H-G
        point = FindPoint(points, 600, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 600, 900)), Is.True, "Expected: point D has edge D-H"); // D on D-H
        point = FindPoint(points, 500, 600); // E
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 500, 600)), Is.True, "Expected: point E has edge A-E"); // E on A-E
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 600, 900)), Is.True, "Expected: point E has edge E-H"); // E on E-H
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 500, 500, 600)), Is.True, "Expected: point E has edge F-E"); // E on F-E
        point = FindPoint(points, 200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 500, 600)), Is.True, "Expected: point A has edge A-E"); // A on A-E
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                               ,,B
        //      |                                          ,,·''   
        //  900 |              1                      ,,·''        
        //      |                                ,,·''             
        //  800 |                           ,,·''                  
        //      |                      ,,·''                       
        //  700 |                 ,,·''                            
        //      |            ,,·''                                 
        //  600 |       ,,·''                                      
        //      |  ,,·''                                           
        //  500 A##                      3                         
        //      |  ''·,,                                           
        //  400 |       ''·,,                                      
        //      |            ''·,,                                 
        //  300 |                 ''·,,                            
        //      |                      ''·,,                       
        //  200 |                           ''·,,                  
        //      |                                ''·,,             
        //  100 |              2                      ''·,,        
        //      |                                          ''·,,   
        //    0 ●-----------------------------------------------''C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(-200, -400), // #2
            new VoronoiSite(0, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                               ,,B
        //      |                                          ,,·''   
        //  400 |              1                      ,,·''        
        //      |                                ,,·''             
        //  300 |                           ,,·''                  
        //      |                      ,,·''                       
        //  200 |                 ,,·''                            
        //      |            ,,·''                                 
        //  100 |       ,,·''                                      
        //      |  ,,·''                                           
        //    0 A##                      3                         
        //      |  ''·,,                                           
        // -100 |       ''·,,                                      
        //      |            ''·,,                                 
        // -200 |                 ''·,,                            
        //      |                      ''·,,                       
        // -300 |                           ''·,,                  
        //      |                                ''·,,             
        // -400 |              2                      ''·,,        
        //      |                                          ''·,,   
        // -500 └-----------------------------------------------''C
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 0, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 0, 500, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 0, 500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                               ,,B
        //      |                                          ,,·''   
        //  700 |              1                      ,,·''        
        //      |                                ,,·''             
        //  600 |                           ,,·''                  
        //      |                      ,,·''                       
        //  500 |                 ,,·''                            
        //      |            ,,·''                                 
        //  400 |       ,,·''                                      
        //      |  ,,·''                                           
        //  300 A##                      3                         
        //      |  ''·,,                                           
        //  200 |       ''·,,                                      
        //      |            ''·,,                                 
        //  100 |                 ''·,,                            
        //      |                      ''·,,                       
        //    0 |         ●                 ''·,,                  
        //      |                                ''·,,             
        // -100 |              2                      ''·,,        
        //      |                                          ''·,,   
        // -200 └-----------------------------------------------''C
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 300, 800, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 300, 800, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 300, 800, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                               ,,B
        //      |                                          ,,·''   
        // 1100 |              1                      ,,·''        
        //      |                                ,,·''             
        // 1000 |                           ,,·''                  
        //      |                      ,,·''                       
        //  900 |                 ,,·''                            
        //      |            ,,·''                                 
        //  800 |       ,,·''                                      
        //      |  ,,·''                                           
        //  700 A##                      3                         
        //      |  ''·,,                                           
        //  600 |       ''·,,                                      
        //      |            ''·,,                                 
        //  500 |                 ''·,,                            
        //      |                      ''·,,                       
        //  400 |                           ''·,,                  
        //      |                                ''·,,             
        //  300 |              2                      ''·,,        
        //      |                                          ''·,,   
        //  200 └-----------------------------------------------''C
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 700, 1200, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 700, 1200, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 700, 1200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        A                         
        //      |                       ' '                        
        //  900 |                     ,'   ',                      
        //      |                    ,       ,                     
        //  800 |                   ·         ·                    
        //      |                  '           '                   
        //  700 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  600 |              ·                   ·               
        //      |             '                     '              
        //  500 |           ,'           3           ',            
        //      |          ,                           ,           
        //  400 |         ·                             ·          
        //      |        '                               '         
        //  300 |      ,'                                 ',       
        //      |     ,                                     ,      
        //  200 |    ·                                       ·     
        //      |   '                                         '    
        //  100 | ,'                                           ',  
        //      |,                                               , 
        //    0 C-------------------------------------------------B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1000, 0, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(-400, 200), // #2
            new VoronoiSite(0, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        A                         
        //      |                       ' '                        
        //  400 |                     ,'   ',                      
        //      |                    ,       ,                     
        //  300 |                   ·         ·                    
        //      |                  '           '                   
        //  200 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  100 |              ·                   ·               
        //      |             '                     '              
        //    0 |           ,'           3           ',            
        //      |          ,                           ,           
        // -100 |         ·                             ·          
        //      |        '                               '         
        // -200 |      ,'                                 ',       
        //      |     ,                                     ,      
        // -300 |    ·                                       ·     
        //      |   '                                         '    
        // -400 | ,'                                           ',  
        //      |,                                               , 
        // -500 C-------------------------------------------------B
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 500, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, -500, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, -500, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 500, 500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(-100, 500), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        A                         
        //      |                       ' '                        
        //  700 |                     ,'   ',                      
        //      |                    ,       ,                     
        //  600 |                   ·         ·                    
        //      |                  '           '                   
        //  500 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  400 |              ·                   ·               
        //      |             '                     '              
        //  300 |           ,'           3           ',            
        //      |          ,                           ,           
        //  200 |         ·                             ·          
        //      |        '                               '         
        //  100 |      ,'                                 ',       
        //      |     ,                                     ,      
        //    0 |    ·    ●                                  ·     
        //      |   '                                         '    
        // -100 | ,'                                           ',  
        //      |,                                               , 
        // -200 C-------------------------------------------------B
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 800, 800, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 800, -200, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 800, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, -200, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 800, 800, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        A                         
        //      |                       ' '                        
        // 1100 |                     ,'   ',                      
        //      |                    ,       ,                     
        // 1000 |                   ·         ·                    
        //      |                  '           '                   
        //  900 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  800 |              ·                   ·               
        //      |             '                     '              
        //  700 |           ,'           3           ',            
        //      |          ,                           ,           
        //  600 |         ·                             ·          
        //      |        '                               '         
        //  500 |      ,'                                 ',       
        //      |     ,                                     ,      
        //  400 |    ·                                       ·     
        //      |   '                                         '    
        //  300 | ,'                                           ',  
        //      |,                                               , 
        //  200 C-------------------------------------------------B
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 1200, 200, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 C,,                                                
        //      |  ''·,,                                           
        //  900 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  800 |                 ''·,,                            
        //      |                      ''·,,                       
        //  700 |                           ''·,,                  
        //      |                                ''·,,             
        //  600 |                                     ''·,,        
        //      |                                          ''·,,   
        //  500 |                        3                      ##A
        //      |                                          ,,·''   
        //  400 |                                     ,,·''        
        //      |                                ,,·''             
        //  300 |                           ,,·''                  
        //      |                      ,,·''                       
        //  200 |                 ,,·''                            
        //      |            ,,·''                                 
        //  100 |       ,,·''                      1               
        //      |  ,,·''                                           
        //    0 B''-----------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 500, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 500, 0, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -400), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(0, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 C,,                                                
        //      |  ''·,,                                           
        //  400 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  300 |                 ''·,,                            
        //      |                      ''·,,                       
        //  200 |                           ''·,,                  
        //      |                                ''·,,             
        //  100 |                                     ''·,,        
        //      |                                          ''·,,   
        //    0 |                        3                      ##A
        //      |                                          ,,·''   
        // -100 |                                     ,,·''        
        //      |                                ,,·''             
        // -200 |                           ,,·''                  
        //      |                      ,,·''                       
        // -300 |                 ,,·''                            
        //      |            ,,·''                                 
        // -400 |       ,,·''                      1               
        //      |  ,,·''                                           
        // -500 B''-----------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, -500, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 0, -500, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, -500, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -100), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 C,,                                                
        //      |  ''·,,                                           
        //  700 |       ''·,,                      2               
        //      |            ''·,,                                 
        //  600 |                 ''·,,                            
        //      |                      ''·,,                       
        //  500 |                           ''·,,                  
        //      |                                ''·,,             
        //  400 |                                     ''·,,        
        //      |                                          ''·,,   
        //  300 |                        3                      ##A
        //      |                                          ,,·''   
        //  200 |                                     ,,·''        
        //      |                                ,,·''             
        //  100 |                           ,,·''                  
        //      |                      ,,·''                       
        //    0 |         ●       ,,·''                            
        //      |            ,,·''                                 
        // -100 |       ,,·''                      1               
        //      |  ,,·''                                           
        // -200 B''-----------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 300, -200, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 300, -200, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 300, -200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 C,,                                                
        //      |  ''·,,                                           
        // 1100 |       ''·,,                      2               
        //      |            ''·,,                                 
        // 1000 |                 ''·,,                            
        //      |                      ''·,,                       
        //  900 |                           ''·,,                  
        //      |                                ''·,,             
        //  800 |                                     ''·,,        
        //      |                                          ''·,,   
        //  700 |                        3                      ##A
        //      |                                          ,,·''   
        //  600 |                                     ,,·''        
        //      |                                ,,·''             
        //  500 |                           ,,·''                  
        //      |                      ,,·''                       
        //  400 |                 ,,·''                            
        //      |            ,,·''                                 
        //  300 |       ,,·''                      1               
        //      |  ,,·''                                           
        //  200 B''-----------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 700, 200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 700, 200, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 700, 200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 B                                                 C
        //      |'                                               ' 
        //  900 | ',                                           ,'  
        //      |   ,                                         ,    
        //  800 |    ·                                       ·     
        //      |     '                                     '      
        //  700 |      ',                                 ,'       
        //      |        ,                               ,         
        //  600 |         ·                             ·          
        //      |          '                           '           
        //  500 |           ',           3           ,'            
        //      |             ,                     ,              
        //  400 |              ·                   ·               
        //      |               '                 '                
        //  300 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        //  200 |                   ·         ·                    
        //      |                    '       '                     
        //  100 |                     ',   ,'                      
        //      |                       , ,                        
        //    0 ●------------------------A------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 0, 1000, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, -200), // #1
            new VoronoiSite(400, -200), // #2
            new VoronoiSite(0, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 B                                                 C
        //      |'                                               ' 
        //  400 | ',                                           ,'  
        //      |   ,                                         ,    
        //  300 |    ·                                       ·     
        //      |     '                                     '      
        //  200 |      ',                                 ,'       
        //      |        ,                               ,         
        //  100 |         ·                             ·          
        //      |          '                           '           
        //    0 |           ',           3           ,'            
        //      |             ,                     ,              
        // -100 |              ·                   ·               
        //      |               '                 '                
        // -200 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        // -300 |                   ·         ·                    
        //      |                    '       '                     
        // -400 |                     ',   ,'                      
        //      |                       , ,                        
        // -500 └------------------------A------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -500, -500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -500, 500, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, -500, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, 500, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -500, -500, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 100), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 B                                                 C
        //      |'                                               ' 
        //  700 | ',                                           ,'  
        //      |   ,                                         ,    
        //  600 |    ·                                       ·     
        //      |     '                                     '      
        //  500 |      ',                                 ,'       
        //      |        ,                               ,         
        //  400 |         ·                             ·          
        //      |          '                           '           
        //  300 |           ',           3           ,'            
        //      |             ,                     ,              
        //  200 |              ·                   ·               
        //      |               '                 '                
        //  100 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        //    0 |         ●         ·         ·                    
        //      |                    '       '                     
        // -100 |                     ',   ,'                      
        //      |                       , ,                        
        // -200 └------------------------A------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -200, -200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, -200, 800, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, 800, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(1100, 500), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 B                                                 C
        //      |'                                               ' 
        // 1100 | ',                                           ,'  
        //      |   ,                                         ,    
        // 1000 |    ·                                       ·     
        //      |     '                                     '      
        //  900 |      ',                                 ,'       
        //      |        ,                               ,         
        //  800 |         ·                             ·          
        //      |          '                           '           
        //  700 |           ',           3           ,'            
        //      |             ,                     ,              
        //  600 |              ·                   ·               
        //      |               '                 '                
        //  500 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        //  400 |                   ·         ·                    
        //      |                    '       '                     
        //  300 |                     ',   ,'                      
        //      |                       , ,                        
        //  200 └------------------------A------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 200, 200, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 200, 1200, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 1200, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 900), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                     ,,B          
        //      |                                ,,·''             
        //  900 |    1                      ,,·''                  
        //      |                      ,,·''                       
        //  800 |                 ,,·''                            
        //      |            ,,·''                                 
        //  700 |       ,,·''                                      
        //      |  ,,·''                                           
        //  600 A''                                                
        //      |                                                  
        //  500 |              3                                   
        //      |                                                  
        //  400 D,,                                                
        //      |  ''·,,                                           
        //  300 |       ''·,,                                      
        //      |            ''·,,                                 
        //  200 |                 ''·,,                            
        //      |                      ''·,,                       
        //  100 |    2                      ''·,,                  
        //      |                                ''·,,             
        //    0 ●-------------------------------------''C---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 400, 800, 0), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 0, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 400), // #1
            new VoronoiSite(-400, -400), // #2
            new VoronoiSite(-200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                     ,,B          
        //      |                                ,,·''             
        //  400 |    1                      ,,·''                  
        //      |                      ,,·''                       
        //  300 |                 ,,·''                            
        //      |            ,,·''                                 
        //  200 |       ,,·''                                      
        //      |  ,,·''                                           
        //  100 A''                                                
        //      |                                                  
        //    0 |              3         ●                         
        //      |                                                  
        // -100 D,,                                                
        //      |  ''·,,                                           
        // -200 |       ''·,,                                      
        //      |            ''·,,                                 
        // -300 |                 ''·,,                            
        //      |                      ''·,,                       
        // -400 |    2                      ''·,,                  
        //      |                                ''·,,             
        // -500 └-------------------------------------''C---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 100, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, -100, 300, -500), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 300, -500)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, -500, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -100, 300, -500)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, -500, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 300, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 100, 300, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 700), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                     ,,B          
        //      |                                ,,·''             
        //  700 |    1                      ,,·''                  
        //      |                      ,,·''                       
        //  600 |                 ,,·''                            
        //      |            ,,·''                                 
        //  500 |       ,,·''                                      
        //      |  ,,·''                                           
        //  400 A''                                                
        //      |                                                  
        //  300 |              3                                   
        //      |                                                  
        //  200 D,,                                                
        //      |  ''·,,                                           
        //  100 |       ''·,,                                      
        //      |            ''·,,                                 
        //    0 |         ●       ''·,,                            
        //      |                      ''·,,                       
        // -100 |    2                      ''·,,                  
        //      |                                ''·,,             
        // -200 └-------------------------------------''C---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 400, 600, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 200, 600, -200), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 600, -200)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, -200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 200, 600, -200)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, -200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 600, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 600, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 1100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                     ,,B          
        //      |                                ,,·''             
        // 1100 |    1                      ,,·''                  
        //      |                      ,,·''                       
        // 1000 |                 ,,·''                            
        //      |            ,,·''                                 
        //  900 |       ,,·''                                      
        //      |  ,,·''                                           
        //  800 A''                                                
        //      |                                                  
        //  700 |              3                                   
        //      |                                                  
        //  600 D,,                                                
        //      |  ''·,,                                           
        //  500 |       ''·,,                                      
        //      |            ''·,,                                 
        //  400 |                 ''·,,                            
        //      |                      ''·,,                       
        //  300 |    2                      ''·,,                  
        //      |                                ''·,,             
        //  200 └-------------------------------------''C---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 600, 1000, 200), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 1000, 200)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 600, 1000, 200)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1000, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1000, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                   D         A                    
        //      |                  '           '                   
        //  900 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  800 |              ·                   ·               
        //      |             '                     '              
        //  700 |           ,'           3           ',            
        //      |          ,                           ,           
        //  600 |         ·                             ·          
        //      |        '                               '         
        //  500 |      ,'                                 ',       
        //      |     ,                                     ,      
        //  400 |    ·                                       ·     
        //      |   '                                         '    
        //  300 | ,'                                           ',  
        //      |,                                               , 
        //  200 C                                                 B
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1000, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 1000, 0, 200), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 400, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 600, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 400), // #1
            new VoronoiSite(-400, 400), // #2
            new VoronoiSite(0, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                   D         A                    
        //      |                  '           '                   
        //  400 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  300 |              ·                   ·               
        //      |             '                     '              
        //  200 |           ,'           3           ',            
        //      |          ,                           ,           
        //  100 |         ·                             ·          
        //      |        '                               '         
        //    0 |      ,'                ●                ',       
        //      |     ,                                     ,      
        // -100 |    ·                                       ·     
        //      |   '                                         '    
        // -200 | ,'                                           ',  
        //      |,                                               , 
        // -300 C                                                 B
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 500, 500, -300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, 500, -500, -300), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, -500, -300)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, -100, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, 500, -500, -300)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 100, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 500, 500, -300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 500, 500, -300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(-100, 700), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                   D         A                    
        //      |                  '           '                   
        //  700 |    2           ,'             ',           1     
        //      |               ,                 ,                
        //  600 |              ·                   ·               
        //      |             '                     '              
        //  500 |           ,'           3           ',            
        //      |          ,                           ,           
        //  400 |         ·                             ·          
        //      |        '                               '         
        //  300 |      ,'                                 ',       
        //      |     ,                                     ,      
        //  200 |    ·                                       ·     
        //      |   '                                         '    
        //  100 | ,'                                           ',  
        //      |,                                               , 
        //    0 C         ●                                       B
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 800, 800, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 800, -200, 0), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, -200, 0)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, -200, 0)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 400, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 800, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 800, 800, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 1100), // #1
            new VoronoiSite(300, 1100), // #2
            new VoronoiSite(700, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                   D         A                    
        //      |                  '           '                   
        // 1100 |    2           ,'             ',           1     
        //      |               ,                 ,                
        // 1000 |              ·                   ·               
        //      |             '                     '              
        //  900 |           ,'           3           ',            
        //      |          ,                           ,           
        //  800 |         ·                             ·          
        //      |        '                               '         
        //  700 |      ,'                                 ',       
        //      |     ,                                     ,      
        //  600 |    ·                                       ·     
        //      |   '                                         '    
        //  500 | ,'                                           ',  
        //      |,                                               , 
        //  400 C                                                 B
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1200, 1200, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 1200, 200, 400), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 200, 400)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 600, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 200, 400)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 800, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1200, 1200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1200, 1200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 100), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         C,,                                      
        //      |            ''·,,                                 
        //  900 |                 ''·,,                      2     
        //      |                      ''·,,                       
        //  800 |                           ''·,,                  
        //      |                                ''·,,             
        //  700 |                                     ''·,,        
        //      |                                          ''·,,   
        //  600 |                                               ''D
        //      |                                                  
        //  500 |                                  3               
        //      |                                                  
        //  400 |                                               ,,A
        //      |                                          ,,·''   
        //  300 |                                     ,,·''        
        //      |                                ,,·''             
        //  200 |                           ,,·''                  
        //      |                      ,,·''                       
        //  100 |                 ,,·''                      1     
        //      |            ,,·''                                 
        //    0 ●---------B''-------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 600, 200, 1000), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 1000, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 1000, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, -400), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(200, 0), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑         C,,                                      
        //      |            ''·,,                                 
        //  400 |                 ''·,,                      2     
        //      |                      ''·,,                       
        //  300 |                           ''·,,                  
        //      |                                ''·,,             
        //  200 |                                     ''·,,        
        //      |                                          ''·,,   
        //  100 |                                               ''D
        //      |                                                  
        //    0 |                        ●         3               
        //      |                                                  
        // -100 |                                               ,,A
        //      |                                          ,,·''   
        // -200 |                                     ,,·''        
        //      |                                ,,·''             
        // -300 |                           ,,·''                  
        //      |                      ,,·''                       
        // -400 |                 ,,·''                      1     
        //      |            ,,·''                                 
        // -500 └---------B''-------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -100, -300, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 100, -300, 500), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, -300, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -300, 500)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 500, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 100, -300, 500)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 500, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -100, -300, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -300, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -100, -300, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, -100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑         C,,                                      
        //      |            ''·,,                                 
        //  700 |                 ''·,,                      2     
        //      |                      ''·,,                       
        //  600 |                           ''·,,                  
        //      |                                ''·,,             
        //  500 |                                     ''·,,        
        //      |                                          ''·,,   
        //  400 |                                               ''D
        //      |                                                  
        //  300 |                                  3               
        //      |                                                  
        //  200 |                                               ,,A
        //      |                                          ,,·''   
        //  100 |                                     ,,·''        
        //      |                                ,,·''             
        //    0 |         ●                 ,,·''                  
        //      |                      ,,·''                       
        // -100 |                 ,,·''                      1     
        //      |            ,,·''                                 
        // -200 └---------B''-------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 0, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 400, 0, 800), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 0, 800)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 800, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 400, 0, 800)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 0, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 0, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 300), // #1
            new VoronoiSite(1100, 1100), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         C,,                                      
        //      |            ''·,,                                 
        // 1100 |                 ''·,,                      2     
        //      |                      ''·,,                       
        // 1000 |                           ''·,,                  
        //      |                                ''·,,             
        //  900 |                                     ''·,,        
        //      |                                          ''·,,   
        //  800 |                                               ''D
        //      |                                                  
        //  700 |                                  3               
        //      |                                                  
        //  600 |                                               ,,A
        //      |                                          ,,·''   
        //  500 |                                     ,,·''        
        //      |                                ,,·''             
        //  400 |                           ,,·''                  
        //      |                      ,,·''                       
        //  300 |                 ,,·''                      1     
        //      |            ,,·''                                 
        //  200 └---------B''-------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 600, 400, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 800, 400, 1200), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 400, 1200)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 1200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 800, 400, 1200)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 1200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 400, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 400, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(900, 100), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 B                                                 C
        //      |'                                               ' 
        //  700 | ',                                           ,'  
        //      |   ,                                         ,    
        //  600 |    ·                                       ·     
        //      |     '                                     '      
        //  500 |      ',                                 ,'       
        //      |        ,                               ,         
        //  400 |         ·                             ·          
        //      |          '                           '           
        //  300 |           ',           3           ,'            
        //      |             ,                     ,              
        //  200 |              ·                   ·               
        //      |               '                 '                
        //  100 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        //    0 ●-------------------A---------D-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 0, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 0, 1000, 800), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 400, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, -400), // #1
            new VoronoiSite(400, -400), // #2
            new VoronoiSite(0, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 B                                                 C
        //      |'                                               ' 
        //  200 | ',                                           ,'  
        //      |   ,                                         ,    
        //  100 |    ·                                       ·     
        //      |     '                                     '      
        //    0 |      ',                ●                ,'       
        //      |        ,                               ,         
        // -100 |         ·                             ·          
        //      |          '                           '           
        // -200 |           ',           3           ,'            
        //      |             ,                     ,              
        // -300 |              ·                   ·               
        //      |               '                 '                
        // -400 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        // -500 └-------------------A---------D-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -500, -500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, -500, 500, 300), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, 500, 300)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 100, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -500, 500, 300)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, -100, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, -500, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -500, -500, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(700, -100), // #2
            new VoronoiSite(300, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 B                                                 C
        //      |'                                               ' 
        //  500 | ',                                           ,'  
        //      |   ,                                         ,    
        //  400 |    ·                                       ·     
        //      |     '                                     '      
        //  300 |      ',                                 ,'       
        //      |        ,                               ,         
        //  200 |         ·                             ·          
        //      |          '                           '           
        //  100 |           ',           3           ,'            
        //      |             ,                     ,              
        //    0 |         ●    ·                   ·               
        //      |               '                 '                
        // -100 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        // -200 └-------------------A---------D-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, -200, -200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, -200, 800, 600), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 800, 600)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 400, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 800, 600)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, -200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, -200, -200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(1100, 300), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 B                                                 C
        //      |'                                               ' 
        //  900 | ',                                           ,'  
        //      |   ,                                         ,    
        //  800 |    ·                                       ·     
        //      |     '                                     '      
        //  700 |      ',                                 ,'       
        //      |        ,                               ,         
        //  600 |         ·                             ·          
        //      |          '                           '           
        //  500 |           ',           3           ,'            
        //      |             ,                     ,              
        //  400 |              ·                   ·               
        //      |               '                 '                
        //  300 |    1           ',             ,'           2     
        //      |                  ,           ,                   
        //  200 └-------------------A---------D-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 200, 200, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 200, 1200, 1000), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1200, 1000)), Is.True, "Expected: point C has edge D-C"); // C on D-C
        point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1200, 1000)), Is.True, "Expected: point D has edge D-C"); // D on D-C
        point = FindPoint(points, 600, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 200, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 200, 200, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 600), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                            
        //      |                                                            
        // 1100 |                                                            
        //      |                                                            
        // 1000 |                                                        ,,,C
        //      |                                                ,,,··'''    
        //  900 |                   2                     ,,,·'''            
        //      |                                 ,,,··'''                   
        //  800 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  700 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  600 A###                     1                                   
        //      |   '''··,,,                                                 
        //  500 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  400 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  300 |                   3                     '''·,,,            
        //      |                                                '''··,,,    
        //  200 |                                                        '''B
        //      |                                                            
        //  100 |                                                            
        //      |                                                            
        //    0 ●-----------------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 1200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 600, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 0), // #1
            new VoronoiSite(-200, 300), // #2
            new VoronoiSite(-200, -300), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                                            
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 |                                                        ,,,C
        //      |                                                ,,,··'''    
        //  300 |                   2                     ,,,·'''            
        //      |                                 ,,,··'''                   
        //  200 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  100 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //    0 A###                     1    ●                              
        //      |   '''··,,,                                                 
        // -100 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        // -200 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        // -300 |                   3                     '''·,,,            
        //      |                                                '''··,,,    
        // -400 |                                                        '''B
        //      |                                                            
        // -500 |                                                            
        //      |                                                            
        // -600 └-----------------------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, -400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -600, 0, 600, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -600, 0, 600, -400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, 600, -400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, 600, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, 600, -400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 0, 600, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 400), // #1
            new VoronoiSite(200, 700), // #2
            new VoronoiSite(200, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                            
        //      |                                                            
        //  900 |                                                            
        //      |                                                            
        //  800 |                                                        ,,,C
        //      |                                                ,,,··'''    
        //  700 |                   2                     ,,,·'''            
        //      |                                 ,,,··'''                   
        //  600 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  500 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  400 A###                     1                                   
        //      |   '''··,,,                                                 
        //  300 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  200 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  100 |                   3                     '''·,,,            
        //      |                                                '''··,,,    
        //    0 |         ●                                              '''B
        //      |                                                            
        // -100 |                                                            
        //      |                                                            
        // -200 └-----------------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 400, 1000, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 400, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 1000, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, -200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 1000, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 1000, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 400, 1000, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 800), // #1
            new VoronoiSite(600, 1100), // #2
            new VoronoiSite(600, 500), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                                            
        //      |                                                            
        // 1300 |                                                            
        //      |                                                            
        // 1200 |                                                        ,,,C
        //      |                                                ,,,··'''    
        // 1100 |                   2                     ,,,·'''            
        //      |                                 ,,,··'''                   
        // 1000 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  900 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  800 A###                     1                                   
        //      |   '''··,,,                                                 
        //  700 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  600 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  500 |                   3                     '''·,,,            
        //      |                                                '''··,,,    
        //  400 |                                                        '''B
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 └-----------------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1400, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1400, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 1400, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 800, 1400, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1400, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1400, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1400, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1400, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1400, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1400, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 700), // #1
            new VoronoiSite(900, 800), // #2
            new VoronoiSite(300, 800), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             A                              
        //      |                            · ·                             
        // 1100 |                           ·   ·                            
        //      |                          ·     ·                           
        // 1000 |                          ·     ·                           
        //      |                         ·       ·                          
        //  900 |                        ·         ·                         
        //      |                       ·           ·                        
        //  800 |              3       ·             ·       2               
        //      |                     ·               ·                      
        //  700 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  600 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  500 |                 ·                       ·                  
        //      |                ·                         ·                 
        //  400 |                ·                         ·                 
        //      |               ·                           ·                
        //  300 |              ·                             ·               
        //      |             ·                               ·              
        //  200 |            ·                                 ·             
        //      |           ·                                   ·            
        //  100 |           ·                                   ·            
        //      |          ·                                     ·           
        //    0 ●---------B---------------------------------------C---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 1200, 200, 0), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 100), // #1
            new VoronoiSite(300, 200), // #2
            new VoronoiSite(-300, 200), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                             A                              
        //      |                            · ·                             
        //  500 |                           ·   ·                            
        //      |                          ·     ·                           
        //  400 |                          ·     ·                           
        //      |                         ·       ·                          
        //  300 |                        ·         ·                         
        //      |                       ·           ·                        
        //  200 |              3       ·             ·       2               
        //      |                     ·               ·                      
        //  100 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //    0 |                   ·         ●         ·                    
        //      |                  ·                     ·                   
        // -100 |                 ·                       ·                  
        //      |                ·                         ·                 
        // -200 |                ·                         ·                 
        //      |               ·                           ·                
        // -300 |              ·                             ·               
        //      |             ·                               ·              
        // -400 |            ·                                 ·             
        //      |           ·                                   ·            
        // -500 |           ·                                   ·            
        //      |          ·                                     ·           
        // -600 └---------B---------------------------------------C---------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -400, -600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 400, -600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 600, -400, -600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -400, -600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, -400, -600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 400, -600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, -400, -600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, -600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 400, -600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 500), // #1
            new VoronoiSite(700, 600), // #2
            new VoronoiSite(100, 600), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             A                              
        //      |                            · ·                             
        //  900 |                           ·   ·                            
        //      |                          ·     ·                           
        //  800 |                          ·     ·                           
        //      |                         ·       ·                          
        //  700 |                        ·         ·                         
        //      |                       ·           ·                        
        //  600 |              3       ·             ·       2               
        //      |                     ·               ·                      
        //  500 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  400 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  300 |                 ·                       ·                  
        //      |                ·                         ·                 
        //  200 |                ·                         ·                 
        //      |               ·                           ·                
        //  100 |              ·                             ·               
        //      |             ·                               ·              
        //    0 |         ●  ·                                 ·             
        //      |           ·                                   ·            
        // -100 |           ·                                   ·            
        //      |          ·                                     ·           
        // -200 └---------B---------------------------------------C---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 800, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 1000, 0, -200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 0, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 800, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 0, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 800, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 800, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 900), // #1
            new VoronoiSite(1100, 1000), // #2
            new VoronoiSite(500, 1000), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                             A                              
        //      |                            · ·                             
        // 1300 |                           ·   ·                            
        //      |                          ·     ·                           
        // 1200 |                          ·     ·                           
        //      |                         ·       ·                          
        // 1100 |                        ·         ·                         
        //      |                       ·           ·                        
        // 1000 |              3       ·             ·       2               
        //      |                     ·               ·                      
        //  900 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  800 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  700 |                 ·                       ·                  
        //      |                ·                         ·                 
        //  600 |                ·                         ·                 
        //      |               ·                           ·                
        //  500 |              ·                             ·               
        //      |             ·                               ·              
        //  400 |            ·                                 ·             
        //      |           ·                                   ·            
        //  300 |           ·                                   ·            
        //      |          ·                                     ·           
        //  200 └---------B---------------------------------------C---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1400, 1200, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 1400, 400, 200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 400, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 1400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 1200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 400, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1400, 1200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 600), // #1
            new VoronoiSite(800, 300), // #2
            new VoronoiSite(800, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                            
        //      |                                                            
        // 1100 |                                                            
        //      |                                                            
        // 1000 B,,,                                                         
        //      |   '''··,,,                                                 
        //  900 |           '''·,,,                     3                    
        //      |                  '''··,,,                                  
        //  800 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  700 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  600 |                                  1                     ###A
        //      |                                                ,,,··'''    
        //  500 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  400 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  300 |           ,,,·'''                     2                    
        //      |   ,,,··'''                                                 
        //  200 C'''                                                         
        //      |                                                            
        //  100 |                                                            
        //      |                                                            
        //    0 ●-----------------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 600, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1200, 600, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 0), // #1
            new VoronoiSite(200, -300), // #2
            new VoronoiSite(200, 300), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                                            
        //      |                                                            
        //  500 |                                                            
        //      |                                                            
        //  400 B,,,                                                         
        //      |   '''··,,,                                                 
        //  300 |           '''·,,,                     3                    
        //      |                  '''··,,,                                  
        //  200 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  100 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //    0 |                             ●    1                     ###A
        //      |                                                ,,,··'''    
        // -100 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        // -200 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        // -300 |           ,,,·'''                     2                    
        //      |   ,,,··'''                                                 
        // -400 C'''                                                         
        //      |                                                            
        // -500 |                                                            
        //      |                                                            
        // -600 └-----------------------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -600, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -600, -400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, -600, -400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 0, -600, 400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -600, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -600, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -600, -400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -600, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -600, -400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -600, -400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 400), // #1
            new VoronoiSite(600, 100), // #2
            new VoronoiSite(600, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                            
        //      |                                                            
        //  900 |                                                            
        //      |                                                            
        //  800 B,,,                                                         
        //      |   '''··,,,                                                 
        //  700 |           '''·,,,                     3                    
        //      |                  '''··,,,                                  
        //  600 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  500 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  400 |                                  1                     ###A
        //      |                                                ,,,··'''    
        //  300 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  200 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  100 |           ,,,·'''                     2                    
        //      |   ,,,··'''                                                 
        //    0 C'''      ●                                                  
        //      |                                                            
        // -100 |                                                            
        //      |                                                            
        // -200 └-----------------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, -200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 400, -200, 800), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, -200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1000, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, -200, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, -200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, -200, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 800), // #1
            new VoronoiSite(1000, 500), // #2
            new VoronoiSite(1000, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                                            
        //      |                                                            
        // 1300 |                                                            
        //      |                                                            
        // 1200 B,,,                                                         
        //      |   '''··,,,                                                 
        // 1100 |           '''·,,,                     3                    
        //      |                  '''··,,,                                  
        // 1000 |                          '''·,,,                           
        //      |                                 '''··,,,                   
        //  900 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  800 |                                  1                     ###A
        //      |                                                ,,,··'''    
        //  700 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  600 |                          ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  500 |           ,,,·'''                     2                    
        //      |   ,,,··'''                                                 
        //  400 C'''                                                         
        //      |                                                            
        //  300 |                                                            
        //      |                                                            
        //  200 └-----------------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1400, 800, 200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1400, 800, 200, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 200, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 1400, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 200, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 800, 200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 500), // #1
            new VoronoiSite(300, 400), // #2
            new VoronoiSite(900, 400), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         C                                       B          
        //      |          ·                                     ·           
        // 1100 |           ·                                   ·            
        //      |           ·                                   ·            
        // 1000 |            ·                                 ·             
        //      |             ·                               ·              
        //  900 |              ·                             ·               
        //      |               ·                           ·                
        //  800 |                ·                         ·                 
        //      |                ·                         ·                 
        //  700 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  600 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //  500 |                     ·       1       ·                      
        //      |                     ·               ·                      
        //  400 |              2       ·             ·       3               
        //      |                       ·           ·                        
        //  300 |                        ·         ·                         
        //      |                         ·       ·                          
        //  200 |                          ·     ·                           
        //      |                          ·     ·                           
        //  100 |                           ·   ·                            
        //      |                            · ·                             
        //    0 ●-----------------------------A-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 200, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 0, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -100), // #1
            new VoronoiSite(-300, -200), // #2
            new VoronoiSite(300, -200), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑         C                                       B          
        //      |          ·                                     ·           
        //  500 |           ·                                   ·            
        //      |           ·                                   ·            
        //  400 |            ·                                 ·             
        //      |             ·                               ·              
        //  300 |              ·                             ·               
        //      |               ·                           ·                
        //  200 |                ·                         ·                 
        //      |                ·                         ·                 
        //  100 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //    0 |                   ·         ●         ·                    
        //      |                    ·                 ·                     
        // -100 |                     ·       1       ·                      
        //      |                     ·               ·                      
        // -200 |              2       ·             ·       3               
        //      |                       ·           ·                        
        // -300 |                        ·         ·                         
        //      |                         ·       ·                          
        // -400 |                          ·     ·                           
        //      |                          ·     ·                           
        // -500 |                           ·   ·                            
        //      |                            · ·                             
        // -600 └-----------------------------A-----------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -400, 600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -600, -400, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, -600, 400, 600), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, 400, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 0, -600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, -400, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, 400, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -400, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -600, -400, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 300), // #1
            new VoronoiSite(100, 200), // #2
            new VoronoiSite(700, 200), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         C                                       B          
        //      |          ·                                     ·           
        //  900 |           ·                                   ·            
        //      |           ·                                   ·            
        //  800 |            ·                                 ·             
        //      |             ·                               ·              
        //  700 |              ·                             ·               
        //      |               ·                           ·                
        //  600 |                ·                         ·                 
        //      |                ·                         ·                 
        //  500 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  400 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //  300 |                     ·       1       ·                      
        //      |                     ·               ·                      
        //  200 |              2       ·             ·       3               
        //      |                       ·           ·                        
        //  100 |                        ·         ·                         
        //      |                         ·       ·                          
        //    0 |         ●                ·     ·                           
        //      |                          ·     ·                           
        // -100 |                           ·   ·                            
        //      |                            · ·                             
        // -200 └-----------------------------A-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, -200, 0, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, -200, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 800, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 400, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 0, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 800, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, -200, 0, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 700), // #1
            new VoronoiSite(500, 600), // #2
            new VoronoiSite(1100, 600), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑         C                                       B          
        //      |          ·                                     ·           
        // 1300 |           ·                                   ·            
        //      |           ·                                   ·            
        // 1200 |            ·                                 ·             
        //      |             ·                               ·              
        // 1100 |              ·                             ·               
        //      |               ·                           ·                
        // 1000 |                ·                         ·                 
        //      |                ·                         ·                 
        //  900 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  800 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //  700 |                     ·       1       ·                      
        //      |                     ·               ·                      
        //  600 |              2       ·             ·       3               
        //      |                       ·           ·                        
        //  500 |                        ·         ·                         
        //      |                         ·       ·                          
        //  400 |                          ·     ·                           
        //      |                          ·     ·                           
        //  300 |                           ·   ·                            
        //      |                            · ·                             
        //  200 └-----------------------------A-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 400, 1400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 200, 1200, 1400), Is.True, "Expected: has edge A-B"); // A-B

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1200, 1400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
        point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 400, 1400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1200, 1400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 400, 1400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 400, 1400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                            
        //      |                                                            
        // 1100 |                                                        ,,,B
        //      |                                                ,,,··'''    
        // 1000 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  900 |    2                     ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  800 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  700 A'''                                                         
        //      |                                                            
        //  600 |         1                                                  
        //      |                                                            
        //  500 D,,,                                                         
        //      |   '''··,,,                                                 
        //  400 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  300 |    3                     '''·,,,                           
        //      |                                 '''··,,,                   
        //  200 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  100 |                                                        '''C
        //      |                                                            
        //    0 ●-----------------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1200, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 100, 0, 500), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 0, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 0, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1200, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 0), // #1
            new VoronoiSite(-500, 300), // #2
            new VoronoiSite(-500, -300), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                                            
        //      |                                                            
        //  500 |                                                        ,,,B
        //      |                                                ,,,··'''    
        //  400 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  300 |    2                     ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  200 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  100 A'''                                                         
        //      |                                                            
        //    0 |         1                   ●                              
        //      |                                                            
        // -100 D,,,                                                         
        //      |   '''··,,,                                                 
        // -200 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        // -300 |    3                     '''·,,,                           
        //      |                                 '''··,,,                   
        // -400 |                                         '''·,,,            
        //      |                                                '''··,,,    
        // -500 |                                                        '''C
        //      |                                                            
        // -600 └-----------------------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -600, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -600, -100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -600, 100, 600, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, -500, -600, -100), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -500, -600, -100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -600, -100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -500, -600, -100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -600, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 100, 600, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 600, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 100, 600, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(-100, 700), // #2
            new VoronoiSite(-100, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                            
        //      |                                                            
        //  900 |                                                        ,,,B
        //      |                                                ,,,··'''    
        //  800 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  700 |    2                     ,,,·'''                           
        //      |                  ,,,··'''                                  
        //  600 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  500 A'''                                                         
        //      |                                                            
        //  400 |         1                                                  
        //      |                                                            
        //  300 D,,,                                                         
        //      |   '''··,,,                                                 
        //  200 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  100 |    3                     '''·,,,                           
        //      |                                 '''··,,,                   
        //    0 |         ●                               '''·,,,            
        //      |                                                '''··,,,    
        // -100 |                                                        '''C
        //      |                                                            
        // -200 └-----------------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, -100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 500, 1000, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, -100, -200, 300), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, -100, -200, 300)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -200, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, -100, -200, 300)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 1000, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1000, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 500, 1000, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(300, 1100), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                                            
        //      |                                                            
        // 1300 |                                                        ,,,B
        //      |                                                ,,,··'''    
        // 1200 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        // 1100 |    2                     ,,,·'''                           
        //      |                  ,,,··'''                                  
        // 1000 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  900 A'''                                                         
        //      |                                                            
        //  800 |         1                                                  
        //      |                                                            
        //  700 D,,,                                                         
        //      |   '''··,,,                                                 
        //  600 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  500 |    3                     '''·,,,                           
        //      |                                 '''··,,,                   
        //  400 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  300 |                                                        '''C
        //      |                                                            
        //  200 └-----------------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1400, 1300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1400, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 900, 1400, 1300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1400, 300, 200, 700), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1400, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 300, 200, 700)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 300, 200, 700)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 200, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1400, 1300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1400, 1300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 900, 1400, 1300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(300, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        D         A                         
        //      |                       ·           ·                        
        // 1100 |              3       ·             ·       2               
        //      |                      ·              ·                      
        // 1000 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  900 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  800 |                 ·                       ·                  
        //      |                 ·                        ·                 
        //  700 |                ·                         ·                 
        //      |               ·                           ·                
        //  600 |              ·                             ·               
        //      |             ·                               ·              
        //  500 |            ·                                 ·             
        //      |            ·                                  ·            
        //  400 |           ·                                   ·            
        //      |          ·                                     ·           
        //  300 |         ·                                       ·          
        //      |        ·                                         ·         
        //  200 |       ·                                           ·        
        //      |       ·                                            ·       
        //  100 |      ·                                             ·       
        //      |     ·                                               ·      
        //    0 ●----C-------------------------------------------------B----→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 1100, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 0, 500, 1200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 700, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1100, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, 400), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-300, 500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                        D         A                         
        //      |                       ·           ·                        
        //  500 |              3       ·             ·       2               
        //      |                      ·              ·                      
        //  400 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  300 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  200 |                 ·                       ·                  
        //      |                 ·                        ·                 
        //  100 |                ·                         ·                 
        //      |               ·                           ·                
        //    0 |              ·              ●              ·               
        //      |             ·                               ·              
        // -100 |            ·                                 ·             
        //      |            ·                                  ·            
        // -200 |           ·                                   ·            
        //      |          ·                                     ·           
        // -300 |         ·                                       ·          
        //      |        ·                                         ·         
        // -400 |       ·                                           ·        
        //      |       ·                                            ·       
        // -500 |      ·                                             ·       
        //      |     ·                                               ·      
        // -600 └----C-------------------------------------------------B----→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -100, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 600, 500, -600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, -600, -100, 600), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -600, -100, 600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, -100, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -600, -100, 600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 100, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 600, 500, -600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 500, -600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 600, 500, -600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        D         A                         
        //      |                       ·           ·                        
        //  900 |              3       ·             ·       2               
        //      |                      ·              ·                      
        //  800 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        //  700 |                   ·                   ·                    
        //      |                  ·                     ·                   
        //  600 |                 ·                       ·                  
        //      |                 ·                        ·                 
        //  500 |                ·                         ·                 
        //      |               ·                           ·                
        //  400 |              ·                             ·               
        //      |             ·                               ·              
        //  300 |            ·                                 ·             
        //      |            ·                                  ·            
        //  200 |           ·                                   ·            
        //      |          ·                                     ·           
        //  100 |         ·                                       ·          
        //      |        ·                                         ·         
        //    0 |       · ●                                         ·        
        //      |       ·                                            ·       
        // -100 |      ·                                             ·       
        //      |     ·                                               ·      
        // -200 └----C-------------------------------------------------B----→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 900, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -100, -200, 300, 1000), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -100, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, 300, 1000)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 300, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -200, 300, 1000)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 500, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 900, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 900, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1000, 900, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 1200), // #1
            new VoronoiSite(1100, 1300), // #2
            new VoronoiSite(500, 1300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                        D         A                         
        //      |                       ·           ·                        
        // 1300 |              3       ·             ·       2               
        //      |                      ·              ·                      
        // 1200 |                     ·       1       ·                      
        //      |                    ·                 ·                     
        // 1100 |                   ·                   ·                    
        //      |                  ·                     ·                   
        // 1000 |                 ·                       ·                  
        //      |                 ·                        ·                 
        //  900 |                ·                         ·                 
        //      |               ·                           ·                
        //  800 |              ·                             ·               
        //      |             ·                               ·              
        //  700 |            ·                                 ·             
        //      |            ·                                  ·            
        //  600 |           ·                                   ·            
        //      |          ·                                     ·           
        //  500 |         ·                                       ·          
        //      |        ·                                         ·         
        //  400 |       ·                                           ·        
        //      |       ·                                            ·       
        //  300 |      ·                                             ·       
        //      |     ·                                               ·      
        //  200 └----C-------------------------------------------------B----→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 1400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1300, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 1400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 1400, 1300, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 200, 700, 1400), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 700, 1400)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 700, 1400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 200, 700, 1400)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 900, 1400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1400, 1300, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 1300, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1400, 1300, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 600), // #1
            new VoronoiSite(1100, 300), // #2
            new VoronoiSite(1100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                            
        //      |                                                            
        // 1100 C,,,                                                         
        //      |   '''··,,,                                                 
        // 1000 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  900 |                          '''·,,,                     3     
        //      |                                 '''··,,,                   
        //  800 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  700 |                                                        '''D
        //      |                                                            
        //  600 |                                                 1          
        //      |                                                            
        //  500 |                                                        ,,,A
        //      |                                                ,,,··'''    
        //  400 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  300 |                          ,,,·'''                     2     
        //      |                  ,,,··'''                                  
        //  200 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  100 B'''                                                         
        //      |                                                            
        //    0 ●-----------------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 1100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 500, 0, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1100, 1200, 700), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1200, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 1200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 0, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(500, -300), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                                            
        //      |                                                            
        //  500 C,,,                                                         
        //      |   '''··,,,                                                 
        //  400 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  300 |                          '''·,,,                     3     
        //      |                                 '''··,,,                   
        //  200 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  100 |                                                        '''D
        //      |                                                            
        //    0 |                             ●                   1          
        //      |                                                            
        // -100 |                                                        ,,,A
        //      |                                                ,,,··'''    
        // -200 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        // -300 |                          ,,,·'''                     2     
        //      |                  ,,,··'''                                  
        // -400 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        // -500 B'''                                                         
        //      |                                                            
        // -600 └-----------------------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, -100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -600, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -600, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, -100, -600, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -600, 500, 600, 100), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -600, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 500, 600, 100)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 600, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 500, 600, 100)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 600, -100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -100, -600, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -600, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -100, -600, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(900, 100), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                            
        //      |                                                            
        //  900 C,,,                                                         
        //      |   '''··,,,                                                 
        //  800 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        //  700 |                          '''·,,,                     3     
        //      |                                 '''··,,,                   
        //  600 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  500 |                                                        '''D
        //      |                                                            
        //  400 |                                                 1          
        //      |                                                            
        //  300 |                                                        ,,,A
        //      |                                                ,,,··'''    
        //  200 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  100 |                          ,,,·'''                     2     
        //      |                  ,,,··'''                                  
        //    0 |         ● ,,,·'''                                          
        //      |   ,,,··'''                                                 
        // -100 B'''                                                         
        //      |                                                            
        // -200 └-----------------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 300, -200, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 900, 1000, 500), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 900, 1000, 500)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1000, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 900, 1000, 500)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 1000, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 300, -200, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -200, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 300, -200, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1200, 800), // #1
            new VoronoiSite(1300, 500), // #2
            new VoronoiSite(1300, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                                            
        //      |                                                            
        // 1300 C,,,                                                         
        //      |   '''··,,,                                                 
        // 1200 |           '''·,,,                                          
        //      |                  '''··,,,                                  
        // 1100 |                          '''·,,,                     3     
        //      |                                 '''··,,,                   
        // 1000 |                                         '''·,,,            
        //      |                                                '''··,,,    
        //  900 |                                                        '''D
        //      |                                                            
        //  800 |                                                 1          
        //      |                                                            
        //  700 |                                                        ,,,A
        //      |                                                ,,,··'''    
        //  600 |                                         ,,,·'''            
        //      |                                 ,,,··'''                   
        //  500 |                          ,,,·'''                     2     
        //      |                  ,,,··'''                                  
        //  400 |           ,,,·'''                                          
        //      |   ,,,··'''                                                 
        //  300 B'''                                                         
        //      |                                                            
        //  200 └-----------------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1400, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 1300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1400, 900), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1400, 700, 200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1300, 1400, 900), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1300, 1400, 900)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 1400, 900); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1300, 1400, 900)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 1400, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 700, 200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 700, 200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(900, 100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑    B                                                 C     
        //      |     ·                                               ·      
        // 1100 |      ·                                             ·       
        //      |      ·                                            ·        
        // 1000 |       ·                                           ·        
        //      |        ·                                         ·         
        //  900 |         ·                                       ·          
        //      |          ·                                     ·           
        //  800 |           ·                                   ·            
        //      |           ·                                  ·             
        //  700 |            ·                                 ·             
        //      |             ·                               ·              
        //  600 |              ·                             ·               
        //      |               ·                           ·                
        //  500 |                ·                         ·                 
        //      |                ·                        ·                  
        //  400 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  300 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //  200 |                     ·       1       ·                      
        //      |                     ·              ·                       
        //  100 |              2       ·             ·       3               
        //      |                       ·           ·                        
        //    0 ●------------------------A---------D------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1100, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 100, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1100, 1200, 700, 0), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1100, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 700, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 500, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 100, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(0, -400), // #1
            new VoronoiSite(-300, -500), // #2
            new VoronoiSite(300, -500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑    B                                                 C     
        //      |     ·                                               ·      
        //  500 |      ·                                             ·       
        //      |      ·                                            ·        
        //  400 |       ·                                           ·        
        //      |        ·                                         ·         
        //  300 |         ·                                       ·          
        //      |          ·                                     ·           
        //  200 |           ·                                   ·            
        //      |           ·                                  ·             
        //  100 |            ·                                 ·             
        //      |             ·                               ·              
        //    0 |              ·              ●              ·               
        //      |               ·                           ·                
        // -100 |                ·                         ·                 
        //      |                ·                        ·                  
        // -200 |                 ·                       ·                  
        //      |                  ·                     ·                   
        // -300 |                   ·                   ·                    
        //      |                    ·                 ·                     
        // -400 |                     ·       1       ·                      
        //      |                     ·              ·                       
        // -500 |              2       ·             ·       3               
        //      |                       ·           ·                        
        // -600 └------------------------A---------D------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -100, -600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -100, -600, -500, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 600, 100, -600), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 100, -600)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 100, -600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 600, 100, -600)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, -100, -600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -600, -500, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -500, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -100, -600, -500, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 0), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(700, -100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑    B                                                 C     
        //      |     ·                                               ·      
        //  900 |      ·                                             ·       
        //      |      ·                                            ·        
        //  800 |       ·                                           ·        
        //      |        ·                                         ·         
        //  700 |         ·                                       ·          
        //      |          ·                                     ·           
        //  600 |           ·                                   ·            
        //      |           ·                                  ·             
        //  500 |            ·                                 ·             
        //      |             ·                               ·              
        //  400 |              ·                             ·               
        //      |               ·                           ·                
        //  300 |                ·                         ·                 
        //      |                ·                        ·                  
        //  200 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  100 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //    0 |         ●           ·       1       ·                      
        //      |                     ·              ·                       
        // -100 |              2       ·             ·       3               
        //      |                       ·           ·                        
        // -200 └------------------------A---------D------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -200, -100, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 1000, 500, -200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1000, 500, -200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 500, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1000, 500, -200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 300, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -100, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, -100, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -200, -100, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 400), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(1100, 300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑    B                                                 C     
        //      |     ·                                               ·      
        // 1300 |      ·                                             ·       
        //      |      ·                                            ·        
        // 1200 |       ·                                           ·        
        //      |        ·                                         ·         
        // 1100 |         ·                                       ·          
        //      |          ·                                     ·           
        // 1000 |           ·                                   ·            
        //      |           ·                                  ·             
        //  900 |            ·                                 ·             
        //      |             ·                               ·              
        //  800 |              ·                             ·               
        //      |               ·                           ·                
        //  700 |                ·                         ·                 
        //      |                ·                        ·                  
        //  600 |                 ·                       ·                  
        //      |                  ·                     ·                   
        //  500 |                   ·                   ·                    
        //      |                    ·                 ·                     
        //  400 |                     ·       1       ·                      
        //      |                     ·              ·                       
        //  300 |              2       ·             ·       3               
        //      |                       ·           ·                        
        //  200 └------------------------A---------D------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 1400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1300, 1400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 200, 300, 1400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1300, 1400, 900, 200), Is.True, "Expected: has edge C-D"); // C-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1300, 1400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1300, 1400, 900, 200)), Is.True, "Expected: point C has edge C-D"); // C on C-D
        point = FindPoint(points, 900, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1300, 1400, 900, 200)), Is.True, "Expected: point D has edge C-D"); // D on C-D
        point = FindPoint(points, 700, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 300, 1400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        point = FindPoint(points, 300, 1400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 200, 300, 1400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(900, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             B                    
        //      |                            '                     
        //  900 |              1           ,'                      
        //      |                         ,                        
        //  800 |                        ·                         
        //      |                       '                          
        //  700 |                     ,'           2               
        //      |                    ,                             
        //  600 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  500 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //  400 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        //  300 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        //  200 |        ,A''                                      
        //      |      ,'                                          
        //  100 |   ,·'                                            
        //      | ,'                                               
        //    0 D'------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 600, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 1000, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, 0, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1000, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 400), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(400, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                             B                    
        //      |                            '                     
        //  400 |              1           ,'                      
        //      |                         ,                        
        //  300 |                        ·                         
        //      |                       '                          
        //  200 |                     ,'           2               
        //      |                    ,                             
        //  100 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //    0 |                ,'      ●            ,,·''        
        //      |               ,                ,,·''             
        // -100 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        // -200 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        // -300 |        ,A''                                      
        //      |      ,'                                          
        // -400 |   ,·'                                            
        //      | ,'                                               
        // -500 D'------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -300, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, -300, 100, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, -300, 500, 100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -300, -300, -500, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, -500, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -300, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, 100, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, 500, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, -500, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, 500, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -300, 100, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                             B                    
        //      |                            '                     
        //  700 |              1           ,'                      
        //      |                         ,                        
        //  600 |                        ·                         
        //      |                       '                          
        //  500 |                     ,'           2               
        //      |                    ,                             
        //  400 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  300 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //  200 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        //  100 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        //    0 |        ,A''                                      
        //      |      ,'                                          
        // -100 |   ,·'                                            
        //      | ,'                                               
        // -200 D'------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 400, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 800, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, -200, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -200, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 400, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 800, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, -200, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 800, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 400, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 1100), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(1100, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             B                    
        //      |                            '                     
        // 1100 |              1           ,'                      
        //      |                         ,                        
        // 1000 |                        ·                         
        //      |                       '                          
        //  900 |                     ,'           2               
        //      |                    ,                             
        //  800 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  700 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //  600 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        //  500 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        //  400 |        ,A''                                      
        //      |      ,'                                          
        //  300 |   ,·'                                            
        //      | ,'                                               
        //  200 D'------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 800, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 1200, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 200, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 400, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 1200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 400, 800, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 D,                                                 
        //      | ',                                               
        //  900 |   '·,                                            
        //      |      ',                                          
        //  800 |        'A,,                                      
        //      |          ' ''·,,                                 
        //  700 |           ',    ''·,,                      1     
        //      |             ,        ''·,,                       
        //  600 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  500 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  400 |                   ·                           ''B
        //      |                    '                             
        //  300 |                     ',           2               
        //      |                       ,                          
        //  200 |                        ·                         
        //      |                         '                        
        //  100 |              3           ',                      
        //      |                            ,                     
        //    0 ●-----------------------------C-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 1000, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 800, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 800, 0, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, 200), // #1
            new VoronoiSite(200, -200), // #2
            new VoronoiSite(-200, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 D,                                                 
        //      | ',                                               
        //  400 |   '·,                                            
        //      |      ',                                          
        //  300 |        'A,,                                      
        //      |          ' ''·,,                                 
        //  200 |           ',    ''·,,                      1     
        //      |             ,        ''·,,                       
        //  100 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //    0 |                ',      ●            ''·,,        
        //      |                  ,                       ''·,,   
        // -100 |                   ·                           ''B
        //      |                    '                             
        // -200 |                     ',           2               
        //      |                       ,                          
        // -300 |                        ·                         
        //      |                         '                        
        // -400 |              3           ',                      
        //      |                            ,                     
        // -500 └-----------------------------C-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, 300, 500, -100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, 300, 100, -500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -300, 300, -500, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, -500, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, 500, -100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, 100, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, -500, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 100, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, 100, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, -100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 300, 500, -100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 100), // #2
            new VoronoiSite(100, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 D,                                                 
        //      | ',                                               
        //  700 |   '·,                                            
        //      |      ',                                          
        //  600 |        'A,,                                      
        //      |          ' ''·,,                                 
        //  500 |           ',    ''·,,                      1     
        //      |             ,        ''·,,                       
        //  400 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  300 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  200 |                   ·                           ''B
        //      |                    '                             
        //  100 |                     ',           2               
        //      |                       ,                          
        //    0 |         ●              ·                         
        //      |                         '                        
        // -100 |              3           ',                      
        //      |                            ,                     
        // -200 └-----------------------------C-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 800, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 600, 400, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 600, -200, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, -200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 800, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 400, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, -200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 400, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 400, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 600, 800, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 900), // #1
            new VoronoiSite(900, 500), // #2
            new VoronoiSite(500, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 D,                                                 
        //      | ',                                               
        // 1100 |   '·,                                            
        //      |      ',                                          
        // 1000 |        'A,,                                      
        //      |          ' ''·,,                                 
        //  900 |           ',    ''·,,                      1     
        //      |             ,        ''·,,                       
        //  800 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  700 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  600 |                   ·                           ''B
        //      |                    '                             
        //  500 |                     ',           2               
        //      |                       ,                          
        //  400 |                        ·                         
        //      |                         '                        
        //  300 |              3           ',                      
        //      |                            ,                     
        //  200 └-----------------------------C-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 1200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 1000, 800, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 1000, 200, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 200, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 400, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1200, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 200, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1000, 1200, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(100, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                ,D
        //      |                                              ,'  
        //  900 |                                           ,·'    
        //      |                                         ,'       
        //  800 |                                     ,,A'         
        //      |                                ,,·'' '           
        //  700 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  600 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  500 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  400 C''                           ·                    
        //      |                            '                     
        //  300 |              2           ,'                      
        //      |                         ,                        
        //  200 |                        ·                         
        //      |                       '                          
        //  100 |                     ,'           1               
        //      |                    ,                             
        //    0 ●-------------------B-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 400, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, 0, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 800, 1000, 1000), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 400, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -400), // #1
            new VoronoiSite(-200, -200), // #2
            new VoronoiSite(-400, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                ,D
        //      |                                              ,'  
        //  400 |                                           ,·'    
        //      |                                         ,'       
        //  300 |                                     ,,A'         
        //      |                                ,,·'' '           
        //  200 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  100 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //    0 |       ,,·''            ●      ,'                 
        //      |  ,,·''                       ,                   
        // -100 C''                           ·                    
        //      |                            '                     
        // -200 |              2           ,'                      
        //      |                         ,                        
        // -300 |                        ·                         
        //      |                       '                          
        // -400 |                     ,'           1               
        //      |                    ,                             
        // -500 └-------------------B-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 300, -100, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 300, -500, -100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 300, 500, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 500, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -100, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -500, -100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, 500, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -500, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -500, -100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -100, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 300, -100, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -100), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(-100, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                ,D
        //      |                                              ,'  
        //  700 |                                           ,·'    
        //      |                                         ,'       
        //  600 |                                     ,,A'         
        //      |                                ,,·'' '           
        //  500 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  400 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  300 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  200 C''                           ·                    
        //      |                            '                     
        //  100 |              2           ,'                      
        //      |                         ,                        
        //    0 |         ●              ·                         
        //      |                       '                          
        // -100 |                     ,'           1               
        //      |                    ,                             
        // -200 └-------------------B-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 200, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, -200, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 800, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 600, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, -200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 800, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, -200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 600, 200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                ,D
        //      |                                              ,'  
        // 1100 |                                           ,·'    
        //      |                                         ,'       
        // 1000 |                                     ,,A'         
        //      |                                ,,·'' '           
        //  900 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  800 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  700 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  600 C''                           ·                    
        //      |                            '                     
        //  500 |              2           ,'                      
        //      |                         ,                        
        //  400 |                        ·                         
        //      |                       '                          
        //  300 |                     ,'           1               
        //      |                    ,                             
        //  200 └-------------------B-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 600, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 1000, 1200, 1200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 1200, 1200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 600, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 1200, 1200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 600, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 600, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                   C                              
        //      |                    '                             
        //  900 |                     ',           3               
        //      |                       ,                          
        //  800 |                        ·                         
        //      |                         '                        
        //  700 |              2           ',                      
        //      |                            ,                     
        //  600 B,,                           ·                    
        //      |  ''·,,                       '                   
        //  500 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //  400 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        //  300 |    1                      ''·,,    ',            
        //      |                                ''·,, ,           
        //  200 |                                     ''A,         
        //      |                                         ',       
        //  100 |                                           '·,    
        //      |                                              ',  
        //    0 ●------------------------------------------------'D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 0, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 200, 400, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 200, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 400, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, -200), // #1
            new VoronoiSite(-200, 200), // #2
            new VoronoiSite(200, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                   C                              
        //      |                    '                             
        //  400 |                     ',           3               
        //      |                       ,                          
        //  300 |                        ·                         
        //      |                         '                        
        //  200 |              2           ',                      
        //      |                            ,                     
        //  100 B,,                           ·                    
        //      |  ''·,,                       '                   
        //    0 |       ''·,,            ●      ',                 
        //      |            ''·,,                ,                
        // -100 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        // -200 |    1                      ''·,,    ',            
        //      |                                ''·,, ,           
        // -300 |                                     ''A,         
        //      |                                         ',       
        // -400 |                                           '·,    
        //      |                                              ',  
        // -500 └------------------------------------------------'D
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -300, -500, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, -300, -100, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, -300, 500, -500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, 500, -500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, -500, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, -100, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, 500, -500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -100, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, -100, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -300, -500, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 100), // #1
            new VoronoiSite(100, 500), // #2
            new VoronoiSite(500, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                   C                              
        //      |                    '                             
        //  700 |                     ',           3               
        //      |                       ,                          
        //  600 |                        ·                         
        //      |                         '                        
        //  500 |              2           ',                      
        //      |                            ,                     
        //  400 B,,                           ·                    
        //      |  ''·,,                       '                   
        //  300 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //  200 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        //  100 |    1                      ''·,,    ',            
        //      |                                ''·,, ,           
        //    0 |         ●                           ''A,         
        //      |                                         ',       
        // -100 |                                           '·,    
        //      |                                              ',  
        // -200 └------------------------------------------------'D
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, -200, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 0, 200, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 0, 800, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 800, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 600, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -200, 400)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 800, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, 200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 0, -200, 400)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 900), // #2
            new VoronoiSite(900, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                   C                              
        //      |                    '                             
        // 1100 |                     ',           3               
        //      |                       ,                          
        // 1000 |                        ·                         
        //      |                         '                        
        //  900 |              2           ',                      
        //      |                            ,                     
        //  800 B,,                           ·                    
        //      |  ''·,,                       '                   
        //  700 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //  600 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        //  500 |    1                      ''·,,    ',            
        //      |                                ''·,, ,           
        //  400 |                                     ''A,         
        //      |                                         ',       
        //  300 |                                           '·,    
        //      |                                              ',  
        //  200 └------------------------------------------------'D
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, 200, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 400, 600, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 400, 1200, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 1200, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1000, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 200, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 600, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 1200, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 600, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 600, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 400, 200, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        B                         
        //      |                       '                          
        //  900 |                     ,'                           
        //      |                    ,                             
        //  800 |                   ·                              
        //      |                  '                               
        //  700 |    1           ,'                                
        //      |               ,                                  
        //  600 |              ·                                   
        //      |             '                                    
        //  500 |           ,'           2                      ,,C
        //      |          ,                               ,,·''   
        //  400 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  300 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //  200 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        //  100 | ,'    ,,·''                      3               
        //      |, ,,·''                                           
        //    0 A''-----------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-400, 200), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(200, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        B                         
        //      |                       '                          
        //  400 |                     ,'                           
        //      |                    ,                             
        //  300 |                   ·                              
        //      |                  '                               
        //  200 |    1           ,'                                
        //      |               ,                                  
        //  100 |              ·                                   
        //      |             '                                    
        //    0 |           ,'           2                      ,,C
        //      |          ,                               ,,·''   
        // -100 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        // -200 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        // -300 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        // -400 | ,'    ,,·''                      3               
        //      |, ,,·''                                           
        // -500 A''-----------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -500, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, -500, 500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -500, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        B                         
        //      |                       '                          
        //  700 |                     ,'                           
        //      |                    ,                             
        //  600 |                   ·                              
        //      |                  '                               
        //  500 |    1           ,'                                
        //      |               ,                                  
        //  400 |              ·                                   
        //      |             '                                    
        //  300 |           ,'           2                      ,,C
        //      |          ,                               ,,·''   
        //  200 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  100 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //    0 |    ·    ●       ,,·''                            
        //      |   '        ,,·''                                 
        // -100 | ,'    ,,·''                      3               
        //      |, ,,·''                                           
        // -200 A''-----------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 300, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, -200, 800, 300), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 300, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 800, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 300, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(900, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        B                         
        //      |                       '                          
        // 1100 |                     ,'                           
        //      |                    ,                             
        // 1000 |                   ·                              
        //      |                  '                               
        //  900 |    1           ,'                                
        //      |               ,                                  
        //  800 |              ·                                   
        //      |             '                                    
        //  700 |           ,'           2                      ,,C
        //      |          ,                               ,,·''   
        //  600 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  500 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //  400 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        //  300 | ,'    ,,·''                      3               
        //      |, ,,·''                                           
        //  200 A''-----------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 700, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 1200, 700), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 700, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 700, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 300), // #3
        ];
        plane.SetSites(sites);

        // 1000 A,,                                                
        //      |' ''·,,                                           
        //  900 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  800 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  700 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  600 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  500 |           ',           2                      ''B
        //      |             ,                                    
        //  400 |              ·                                   
        //      |               '                                  
        //  300 |    3           ',                                
        //      |                  ,                               
        //  200 |                   ·                              
        //      |                    '                             
        //  100 |                     ',                           
        //      |                       ,                          
        //    0 ●------------------------C------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-400, -200), // #3
        ];
        plane.SetSites(sites);

        //  500 A,,                                                
        //      |' ''·,,                                           
        //  400 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  300 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  200 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  100 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //    0 |           ',           2                      ''B
        //      |             ,                                    
        // -100 |              ·                                   
        //      |               '                                  
        // -200 |    3           ',                                
        //      |                  ,                               
        // -300 |                   ·                              
        //      |                    '                             
        // -400 |                     ',                           
        //      |                       ,                          
        // -500 └------------------------C------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 500, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 500, 0, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 0, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 0, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 500, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 100), // #3
        ];
        plane.SetSites(sites);

        //  800 A,,                                                
        //      |' ''·,,                                           
        //  700 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  600 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  500 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  400 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  300 |           ',           2                      ''B
        //      |             ,                                    
        //  200 |              ·                                   
        //      |               '                                  
        //  100 |    3           ',                                
        //      |                  ,                               
        //    0 |         ●         ·                              
        //      |                    '                             
        // -100 |                     ',                           
        //      |                       ,                          
        // -200 └------------------------C------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 800, 800, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 800, 300, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 300, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 300, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 300, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 800, 800, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 500), // #3
        ];
        plane.SetSites(sites);

        // 1200 A,,                                                
        //      |' ''·,,                                           
        // 1100 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        // 1000 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  900 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  800 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  700 |           ',           2                      ''B
        //      |             ,                                    
        //  600 |              ·                                   
        //      |               '                                  
        //  500 |    3           ',                                
        //      |                  ,                               
        //  400 |                   ·                              
        //      |                    '                             
        //  300 |                     ',                           
        //      |                       ,                          
        //  200 └------------------------C------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1200, 1200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1200, 700, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 700, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 700, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 700, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1200, 1200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                               ,,A
        //      |                                          ,,·'' ' 
        //  900 |              3                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  800 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  700 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  600 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  500 C''                      2           ,'            
        //      |                                   ,              
        //  400 |                                  ·               
        //      |                                 '                
        //  300 |                               ,'           1     
        //      |                              ,                   
        //  200 |                             ·                    
        //      |                            '                     
        //  100 |                          ,'                      
        //      |                         ,                        
        //    0 ●------------------------B------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(400, -200), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(-200, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                               ,,A
        //      |                                          ,,·'' ' 
        //  400 |              3                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  300 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  200 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  100 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //    0 C''                      2           ,'            
        //      |                                   ,              
        // -100 |                                  ·               
        //      |                                 '                
        // -200 |                               ,'           1     
        //      |                              ,                   
        // -300 |                             ·                    
        //      |                            '                     
        // -400 |                          ,'                      
        //      |                         ,                        
        // -500 └------------------------B------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, -500, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, -500, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 500, 0, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(100, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                               ,,A
        //      |                                          ,,·'' ' 
        //  700 |              3                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  600 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  500 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  400 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  300 C''                      2           ,'            
        //      |                                   ,              
        //  200 |                                  ·               
        //      |                                 '                
        //  100 |                               ,'           1     
        //      |                              ,                   
        //    0 |         ●                   ·                    
        //      |                            '                     
        // -100 |                          ,'                      
        //      |                         ,                        
        // -200 └------------------------B------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 300, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, -200, 300), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 300, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, -200, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 800, 300, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                               ,,A
        //      |                                          ,,·'' ' 
        // 1100 |              3                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        // 1000 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  900 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  800 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  700 C''                      2           ,'            
        //      |                                   ,              
        //  600 |                                  ·               
        //      |                                 '                
        //  500 |                               ,'           1     
        //      |                              ,                   
        //  400 |                             ·                    
        //      |                            '                     
        //  300 |                          ,'                      
        //      |                         ,                        
        //  200 └------------------------B------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1200, 700, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 1200, 200, 700), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 700, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 200, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1200, 700, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 700), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                        C                         
        //      |                         '                        
        //  900 |                          ',                      
        //      |                            ,                     
        //  800 |                             ·                    
        //      |                              '                   
        //  700 |                               ',           3     
        //      |                                 ,                
        //  600 |                                  ·               
        //      |                                   '              
        //  500 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  400 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  300 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //  200 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        //  100 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        //    0 ●-----------------------------------------------''A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -400), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(400, 200), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                        C                         
        //      |                         '                        
        //  400 |                          ',                      
        //      |                            ,                     
        //  300 |                             ·                    
        //      |                              '                   
        //  200 |                               ',           3     
        //      |                                 ,                
        //  100 |                                  ·               
        //      |                                   '              
        //    0 B,,                      2           ',            
        //      |  ''·,,                               ,           
        // -100 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        // -200 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        // -300 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        // -400 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        // -500 └-----------------------------------------------''A
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -500, -500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, -500, 0, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, 0, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, 0, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -500, -500, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, -100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 500), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                        C                         
        //      |                         '                        
        //  700 |                          ',                      
        //      |                            ,                     
        //  600 |                             ·                    
        //      |                              '                   
        //  500 |                               ',           3     
        //      |                                 ,                
        //  400 |                                  ·               
        //      |                                   '              
        //  300 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  200 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  100 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //    0 |         ●                 ''·,,            ·     
        //      |                                ''·,,        '    
        // -100 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        // -200 └-----------------------------------------------''A
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, -200, -200, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, -200, 300, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, 300, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 300, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, 300, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, -200, -200, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                        C                         
        //      |                         '                        
        // 1100 |                          ',                      
        //      |                            ,                     
        // 1000 |                             ·                    
        //      |                              '                   
        //  900 |                               ',           3     
        //      |                                 ,                
        //  800 |                                  ·               
        //      |                                   '              
        //  700 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  600 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  500 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //  400 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        //  300 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        //  200 └-----------------------------------------------''A
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 200, 200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 200, 700, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 700, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 700, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 700, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 200, 200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                  B               
        //      |                                 '                
        //  900 |                               ,'                 
        //      |                              ,                   
        //  800 |                             ·                    
        //      |                            '                     
        //  700 |              1           ,'                      
        //      |                         ,                        
        //  600 |                        ·                         
        //      |                       '                          
        //  500 |                     ,'           2               
        //      |                    ,                             
        //  400 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  300 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //  200 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        //  100 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        //    0 ●---------A''-------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, 700, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 1000, 400), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                  B               
        //      |                                 '                
        //  400 |                               ,'                 
        //      |                              ,                   
        //  300 |                             ·                    
        //      |                            '                     
        //  200 |              1           ,'                      
        //      |                         ,                        
        //  100 |                        ·                         
        //      |                       '                          
        //    0 |                     ,' ●         2               
        //      |                    ,                             
        // -100 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        // -200 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        // -300 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        // -400 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        // -500 └---------A''-------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -300, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, -100), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, -500, 200, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, -500, 500, -100), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -300, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 200, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 500, -100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 500, -100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -500, 200, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                  B               
        //      |                                 '                
        //  700 |                               ,'                 
        //      |                              ,                   
        //  600 |                             ·                    
        //      |                            '                     
        //  500 |              1           ,'                      
        //      |                         ,                        
        //  400 |                        ·                         
        //      |                       '                          
        //  300 |                     ,'           2               
        //      |                    ,                             
        //  200 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  100 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //    0 |         ●    ·            ,,·''                  
        //      |             '        ,,·''                       
        // -100 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        // -200 └---------A''-------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, -200, 500, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, -200, 800, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, -200, 500, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(1100, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                  B               
        //      |                                 '                
        // 1100 |                               ,'                 
        //      |                              ,                   
        // 1000 |                             ·                    
        //      |                            '                     
        //  900 |              1           ,'                      
        //      |                         ,                        
        //  800 |                        ·                         
        //      |                       '                          
        //  700 |                     ,'           2               
        //      |                    ,                             
        //  600 |                   ·                           ,,C
        //      |                  '                       ,,·''   
        //  500 |                ,'                   ,,·''        
        //      |               ,                ,,·''             
        //  400 |              ·            ,,·''                  
        //      |             '        ,,·''                       
        //  300 |           ,'    ,,·''                      3     
        //      |          , ,,·''                                 
        //  200 └---------A''-------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 400, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 200, 900, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 1200, 600), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 900, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 1200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 1200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 200, 900, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 A,,                                                
        //      |' ''·,,                                           
        //  700 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  600 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  500 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  400 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  300 |           ',           2                      ''B
        //      |             ,                                    
        //  200 |              ·                                   
        //      |               '                                  
        //  100 |    3           ',                                
        //      |                  ,                               
        //    0 ●-------------------C-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 800, 1000, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 800, 400, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(-400, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 A,,                                                
        //      |' ''·,,                                           
        //  200 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  100 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //    0 |      ',                ●  ''·,,                  
        //      |        ,                       ''·,,             
        // -100 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        // -200 |           ',           2                      ''B
        //      |             ,                                    
        // -300 |              ·                                   
        //      |               '                                  
        // -400 |    3           ',                                
        //      |                  ,                               
        // -500 └-------------------C-----------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, 300, 500, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, 300, -100, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 300, 500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 300, -100, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -100, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 300, -100, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, 300, 500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(-100, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 A,,                                                
        //      |' ''·,,                                           
        //  500 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  400 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  300 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  200 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  100 |           ',           2                      ''B
        //      |             ,                                    
        //    0 |         ●    ·                                   
        //      |               '                                  
        // -100 |    3           ',                                
        //      |                  ,                               
        // -200 └-------------------C-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 600, 800, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 600, 200, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 600, 800, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 600, 200, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 600, 200, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 600, 800, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 A,,                                                
        //      |' ''·,,                                           
        //  900 | ',    ''·,,                      1               
        //      |   ,        ''·,,                                 
        //  800 |    ·            ''·,,                            
        //      |     '                ''·,,                       
        //  700 |      ',                   ''·,,                  
        //      |        ,                       ''·,,             
        //  600 |         ·                           ''·,,        
        //      |          '                               ''·,,   
        //  500 |           ',           2                      ''B
        //      |             ,                                    
        //  400 |              ·                                   
        //      |               '                                  
        //  300 |    3           ',                                
        //      |                  ,                               
        //  200 └-------------------C-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1000, 1200, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1000, 600, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1200, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 600, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 600, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1200, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                     ,,A          
        //      |                                ,,·'' '           
        //  900 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  800 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  700 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  600 C''                           ·                    
        //      |                            '                     
        //  500 |              2           ,'                      
        //      |                         ,                        
        //  400 |                        ·                         
        //      |                       '                          
        //  300 |                     ,'           1               
        //      |                    ,                             
        //  200 |                   ·                              
        //      |                  '                               
        //  100 |                ,'                                
        //      |               ,                                  
        //    0 ●--------------B----------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1000, 300, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 1000, 0, 600), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-400, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                     ,,A          
        //      |                                ,,·'' '           
        //  400 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  300 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  200 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  100 C''                           ·                    
        //      |                            '                     
        //    0 |              2         ● ,'                      
        //      |                         ,                        
        // -100 |                        ·                         
        //      |                       '                          
        // -200 |                     ,'           1               
        //      |                    ,                             
        // -300 |                   ·                              
        //      |                  '                               
        // -400 |                ,'                                
        //      |               ,                                  
        // -500 └--------------B----------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, 100), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, -200, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, -500, 100), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -500, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -500, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 500, -200, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(-100, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                     ,,A          
        //      |                                ,,·'' '           
        //  700 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        //  600 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  500 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  400 C''                           ·                    
        //      |                            '                     
        //  300 |              2           ,'                      
        //      |                         ,                        
        //  200 |                        ·                         
        //      |                       '                          
        //  100 |                     ,'           1               
        //      |                    ,                             
        //    0 |         ●         ·                              
        //      |                  '                               
        // -100 |                ,'                                
        //      |               ,                                  
        // -200 └--------------B----------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 600, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 800, 100, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, -200, 400), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 100, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, -200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, -200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 800, 100, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                     ,,A          
        //      |                                ,,·'' '           
        // 1100 |    3                      ,,·''    ,'            
        //      |                      ,,·''        ,              
        // 1000 |                 ,,·''            ·               
        //      |            ,,·''                '                
        //  900 |       ,,·''                   ,'                 
        //      |  ,,·''                       ,                   
        //  800 C''                           ·                    
        //      |                            '                     
        //  700 |              2           ,'                      
        //      |                         ,                        
        //  600 |                        ·                         
        //      |                       '                          
        //  500 |                     ,'           1               
        //      |                    ,                             
        //  400 |                   ·                              
        //      |                  '                               
        //  300 |                ,'                                
        //      |               ,                                  
        //  200 └--------------B----------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1200, 500, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1200, 200, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1200, 500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1200, 200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1200, 200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 1200, 500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(900, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             C                    
        //      |                              '                   
        //  900 |                               ',           3     
        //      |                                 ,                
        //  800 |                                  ·               
        //      |                                   '              
        //  700 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  600 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  500 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //  400 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        //  300 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        //  200 |                                               ''A
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 200, 0, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 200, 600, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(400, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                             C                    
        //      |                              '                   
        //  400 |                               ',           3     
        //      |                                 ,                
        //  300 |                                  ·               
        //      |                                   '              
        //  200 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  100 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //    0 |                 ''·,,  ●                ',       
        //      |                      ''·,,                ,      
        // -100 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        // -200 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        // -300 |                                               ''A
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, -300, -500, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, -300, 100, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -300, -500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -300, 100, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 100, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -300, 100, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, -300, -500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                             C                    
        //      |                              '                   
        //  700 |                               ',           3     
        //      |                                 ,                
        //  600 |                                  ·               
        //      |                                   '              
        //  500 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  400 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  300 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //  200 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        //  100 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        //    0 |         ●                                     ''A
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 0, -200, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 0, 400, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, -200, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 400, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 400, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, -200, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(1100, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             C                    
        //      |                              '                   
        // 1100 |                               ',           3     
        //      |                                 ,                
        // 1000 |                                  ·               
        //      |                                   '              
        //  900 B,,                      2           ',            
        //      |  ''·,,                               ,           
        //  800 |       ''·,,                           ·          
        //      |            ''·,,                       '         
        //  700 |                 ''·,,                   ',       
        //      |                      ''·,,                ,      
        //  600 |                           ''·,,            ·     
        //      |                                ''·,,        '    
        //  500 |              1                      ''·,,    ',  
        //      |                                          ''·,, , 
        //  400 |                                               ''A
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 400, 200, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 400, 800, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 400, 200, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 400, 800, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 400, 800, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 400, 200, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              B                                   
        //      |               '                                  
        //  900 |                ',                                
        //      |                  ,                               
        //  800 |                   ·                              
        //      |                    '                             
        //  700 |                     ',           1               
        //      |                       ,                          
        //  600 |                        ·                         
        //      |                         '                        
        //  500 |              2           ',                      
        //      |                            ,                     
        //  400 C,,                           ·                    
        //      |  ''·,,                       '                   
        //  300 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //  200 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        //  100 |    3                      ''·,,    ',            
        //      |                                ''·,, ,           
        //    0 ●-------------------------------------''A---------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 0, 300, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 0, 0, 400), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 300, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(-200, 0), // #2
            new VoronoiSite(-400, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑              B                                   
        //      |               '                                  
        //  400 |                ',                                
        //      |                  ,                               
        //  300 |                   ·                              
        //      |                    '                             
        //  200 |                     ',           1               
        //      |                       ,                          
        //  100 |                        ·                         
        //      |                         '                        
        //    0 |              2         ● ',                      
        //      |                            ,                     
        // -100 C,,                           ·                    
        //      |  ''·,,                       '                   
        // -200 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        // -300 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        // -400 |    3                      ''·,,    ',            
        //      |                                ''·,, ,           
        // -500 └-------------------------------------''A---------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 300, -500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -500, -100), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -500, -200, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, -500, -500, -100), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 300, -500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -200, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -500, -100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -500, -100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -500, -100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -500, -200, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(-100, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑              B                                   
        //      |               '                                  
        //  700 |                ',                                
        //      |                  ,                               
        //  600 |                   ·                              
        //      |                    '                             
        //  500 |                     ',           1               
        //      |                       ,                          
        //  400 |                        ·                         
        //      |                         '                        
        //  300 |              2           ',                      
        //      |                            ,                     
        //  200 C,,                           ·                    
        //      |  ''·,,                       '                   
        //  100 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //    0 |         ●       ''·,,            ·               
        //      |                      ''·,,        '              
        // -100 |    3                      ''·,,    ',            
        //      |                                ''·,, ,           
        // -200 └-------------------------------------''A---------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 600, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, 800), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, -200, 100, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, -200, -200, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, 100, 800)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, -200, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, -200, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 100, 800); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -200, 100, 800)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_Mirrored"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              B                                   
        //      |               '                                  
        // 1100 |                ',                                
        //      |                  ,                               
        // 1000 |                   ·                              
        //      |                    '                             
        //  900 |                     ',           1               
        //      |                       ,                          
        //  800 |                        ·                         
        //      |                         '                        
        //  700 |              2           ',                      
        //      |                            ,                     
        //  600 C,,                           ·                    
        //      |  ''·,,                       '                   
        //  500 |       ''·,,                   ',                 
        //      |            ''·,,                ,                
        //  400 |                 ''·,,            ·               
        //      |                      ''·,,        '              
        //  300 |    3                      ''·,,    ',            
        //      |                                ''·,, ,           
        //  200 └-------------------------------------''A---------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 200, 500, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 200, 200, 600), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 500, 1200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 200, 500, 1200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                   C                              
        //      |                  '                               
        //  900 |    3           ,'                                
        //      |               ,                                  
        //  800 |              ·                                   
        //      |             '                                    
        //  700 |           ,'           2                      ,,B
        //      |          ,                               ,,·''   
        //  600 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  500 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //  400 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        //  300 | ,'    ,,·''                      1               
        //      |, ,,·''                                           
        //  200 A''                                                
        //      |                                                  
        //  100 |                                                  
        //      |                                                  
        //    0 ●-------------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, 400, 1000), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1000, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(200, -200), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(-400, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                   C                              
        //      |                  '                               
        //  400 |    3           ,'                                
        //      |               ,                                  
        //  300 |              ·                                   
        //      |             '                                    
        //  200 |           ,'           2                      ,,B
        //      |          ,                               ,,·''   
        //  100 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //    0 |      ,'                ●  ,,·''                  
        //      |     ,                ,,·''                       
        // -100 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        // -200 | ,'    ,,·''                      1               
        //      |, ,,·''                                           
        // -300 A''                                                
        //      |                                                  
        // -400 |                                                  
        //      |                                                  
        // -500 └-------------------------------------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -500, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -100, 500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -500, -300, 500, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -500, -300, -100, 500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -500, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 500, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, -100, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -100, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, -100, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -500, -300, 500, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(-100, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                   C                              
        //      |                  '                               
        //  700 |    3           ,'                                
        //      |               ,                                  
        //  600 |              ·                                   
        //      |             '                                    
        //  500 |           ,'           2                      ,,B
        //      |          ,                               ,,·''   
        //  400 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  300 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //  200 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        //  100 | ,'    ,,·''                      1               
        //      |, ,,·''                                           
        //    0 A''       ●                                        
        //      |                                                  
        // -100 |                                                  
        //      |                                                  
        // -200 └-------------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -200, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 800, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 0, 800, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 0, 200, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 800, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 800, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 0, 800, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated90"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                   C                              
        //      |                  '                               
        // 1100 |    3           ,'                                
        //      |               ,                                  
        // 1000 |              ·                                   
        //      |             '                                    
        //  900 |           ,'           2                      ,,B
        //      |          ,                               ,,·''   
        //  800 |         ·                           ,,·''        
        //      |        '                       ,,·''             
        //  700 |      ,'                   ,,·''                  
        //      |     ,                ,,·''                       
        //  600 |    ·            ,,·''                            
        //      |   '        ,,·''                                 
        //  500 | ,'    ,,·''                      1               
        //      |, ,,·''                                           
        //  400 A''                                                
        //      |                                                  
        //  300 |                                                  
        //      |                                                  
        //  200 └-------------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 400, 1200, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 400, 600, 1200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1200, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 600, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 600, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1200, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 400, 1200, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑         A,,                                      
        //      |          ' ''·,,                                 
        //  900 |           ',    ''·,,                      3     
        //      |             ,        ''·,,                       
        //  800 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  700 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  600 |                   ·                           ''C
        //      |                    '                             
        //  500 |                     ',           2               
        //      |                       ,                          
        //  400 |                        ·                         
        //      |                         '                        
        //  300 |              1           ',                      
        //      |                            ,                     
        //  200 |                             ·                    
        //      |                              '                   
        //  100 |                               ',                 
        //      |                                 ,                
        //    0 ●----------------------------------B--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 200, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 600), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1000, 1000, 600), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, -200), // #1
            new VoronoiSite(200, 0), // #2
            new VoronoiSite(400, 400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑         A,,                                      
        //      |          ' ''·,,                                 
        //  400 |           ',    ''·,,                      3     
        //      |             ,        ''·,,                       
        //  300 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  200 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  100 |                   ·                           ''C
        //      |                    '                             
        //    0 |                     ', ●         2               
        //      |                       ,                          
        // -100 |                        ·                         
        //      |                         '                        
        // -200 |              1           ',                      
        //      |                            ,                     
        // -300 |                             ·                    
        //      |                              '                   
        // -400 |                               ',                 
        //      |                                 ,                
        // -500 └----------------------------------B--------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, -300, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, -500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 100), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, 500, 200, -500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -300, 500, 500, 100), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, -300, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 200, -500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 500, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 500, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 500, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, -500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 500, 200, -500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(700, 700), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑         A,,                                      
        //      |          ' ''·,,                                 
        //  700 |           ',    ''·,,                      3     
        //      |             ,        ''·,,                       
        //  600 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  500 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  400 |                   ·                           ''C
        //      |                    '                             
        //  300 |                     ',           2               
        //      |                       ,                          
        //  200 |                        ·                         
        //      |                         '                        
        //  100 |              1           ',                      
        //      |                            ,                     
        //    0 |         ●                   ·                    
        //      |                              '                   
        // -100 |                               ',                 
        //      |                                 ,                
        // -200 └----------------------------------B--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 0, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 400), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 800, 500, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 800, 800, 400), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 800, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 800, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 800, 500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated180"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(1100, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑         A,,                                      
        //      |          ' ''·,,                                 
        // 1100 |           ',    ''·,,                      3     
        //      |             ,        ''·,,                       
        // 1000 |              ·            ''·,,                  
        //      |               '                ''·,,             
        //  900 |                ',                   ''·,,        
        //      |                  ,                       ''·,,   
        //  800 |                   ·                           ''C
        //      |                    '                             
        //  700 |                     ',           2               
        //      |                       ,                          
        //  600 |                        ·                         
        //      |                         '                        
        //  500 |              1           ',                      
        //      |                            ,                     
        //  400 |                             ·                    
        //      |                              '                   
        //  300 |                               ',                 
        //      |                                 ,                
        //  200 └----------------------------------B--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 400, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1200, 900, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 1200, 1200, 800), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 400, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 900, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 1200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 1200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 400, 1200, 900, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                                  
        //      |                                                  
        //  900 |                                                  
        //      |                                                  
        //  800 |                                               ,,A
        //      |                                          ,,·'' ' 
        //  700 |              1                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  600 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  500 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  400 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  300 B''                      2           ,'            
        //      |                                   ,              
        //  200 |                                  ·               
        //      |                                 '                
        //  100 |                               ,'           3     
        //      |                              ,                   
        //    0 ●-----------------------------C-------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1000, 800), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 800, 0, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 800, 600, 0), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 800); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-500, -500, 500, 500);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-200, 200), // #1
            new VoronoiSite(0, -200), // #2
            new VoronoiSite(400, -400), // #3
        ];
        plane.SetSites(sites);

        //  500 ↑                                                  
        //      |                                                  
        //  400 |                                                  
        //      |                                                  
        //  300 |                                               ,,A
        //      |                                          ,,·'' ' 
        //  200 |              1                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  100 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //    0 |                 ,,·''  ●                ,'       
        //      |            ,,·''                       ,         
        // -100 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        // -200 B''                      2           ,'            
        //      |                                   ,              
        // -300 |                                  ·               
        //      |                                 '                
        // -400 |                               ,'           3     
        //      |                              ,                   
        // -500 └-----------------------------C-------------------→
        //    -500 -400 -300 -200 -100    0  100  200  300  400  500 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 500, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -500, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, -500), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, -500, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 100, -500), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -500, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 100, -500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 100, -500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, 100, -500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -500, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 300, -500, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 800, 800);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, -100), // #3
        ];
        plane.SetSites(sites);

        //  800 ↑                                                  
        //      |                                                  
        //  700 |                                                  
        //      |                                                  
        //  600 |                                               ,,A
        //      |                                          ,,·'' ' 
        //  500 |              1                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  400 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  300 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  200 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  100 B''                      2           ,'            
        //      |                                   ,              
        //    0 |         ●                        ·               
        //      |                                 '                
        // -100 |                               ,'           3     
        //      |                              ,                   
        // -200 └-----------------------------C-------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 800, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 600, -200, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 600, 400, -200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 800, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, -200, 100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 400, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, 400, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 800, 600, -200, 100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled_MirroredAndRotated270"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(1100, 300), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                                  
        //      |                                                  
        // 1100 |                                                  
        //      |                                                  
        // 1000 |                                               ,,A
        //      |                                          ,,·'' ' 
        //  900 |              1                      ,,·''    ,'  
        //      |                                ,,·''        ,    
        //  800 |                           ,,·''            ·     
        //      |                      ,,·''                '      
        //  700 |                 ,,·''                   ,'       
        //      |            ,,·''                       ,         
        //  600 |       ,,·''                           ·          
        //      |  ,,·''                               '           
        //  500 B''                      2           ,'            
        //      |                                   ,              
        //  400 |                                  ·               
        //      |                                 '                
        //  300 |                               ,'           3     
        //      |                              ,                   
        //  200 └-----------------------------C-------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(3), "Expected: point count 3");
        Assume.That(HasPoint(points, 1200, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 1000, 200, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 1000, 800, 200), Is.True, "Expected: has edge A-C"); // A-C

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(2));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 200, 500)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 1000, 200, 500)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void ThreePointsMeetingPastCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1100, 100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             C                              
        //      |                           ,'                               
        // 1100 |    1                    ,'                                 
        //      |                        ·                                   
        // 1000 |                      ,'                                    
        //      |                    ,'                                      
        //  900 |                   ·                                        
        //      |                 ,'                                         
        //  800 |               ,'                                           
        //      |              ·                                             
        //  700 |            ,'                    2                         
        //      |          ,'                                                
        //  600 |         ·                                                ,D
        //      |       ,'                                             ,·''  
        //  500 |     ,'                                           ,,''      
        //      |    ·                                         ,,·'          
        //  400 |  ,'                                       ,·'              
        //      |,'                                     ,·''                 
        //  300 A                                   ,,''                     
        //      |                               ,,·'                         
        //  200 |                            ,·'                             
        //      |                        ,·''                                
        //  100 |                    ,,''                              3     
        //      |                ,,·'                                        
        //    0 ●--------------B'-------------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 300, 600, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 0, 1200, 600), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 0, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1200, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 600, 1200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingPastCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, 500), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(500, -500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                             C                              
        //      |                           ,'                               
        //  500 |    1                    ,'                                 
        //      |                        ·                                   
        //  400 |                      ,'                                    
        //      |                    ,'                                      
        //  300 |                   ·                                        
        //      |                 ,'                                         
        //  200 |               ,'                                           
        //      |              ·                                             
        //  100 |            ,'                    2                         
        //      |          ,'                                                
        //    0 |         ·                   ●                            ,D
        //      |       ,'                                             ,·''  
        // -100 |     ,'                                           ,,''      
        //      |    ·                                         ,,·'          
        // -200 |  ,'                                       ,·'              
        //      |,'                                     ,·''                 
        // -300 A                                   ,,''                     
        //      |                               ,,·'                         
        // -400 |                            ,·'                             
        //      |                        ,·''                                
        // -500 |                    ,,''                              3     
        //      |                ,,·'                                        
        // -600 └--------------B'-------------------------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -600, -300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -300, -600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -600, -300, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -300, -600, 600, 0), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, -300, -600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -600, 600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -600, -300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, -300, 0, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, -600, 600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, -300, 0, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingPastCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, -100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             C                              
        //      |                           ,'                               
        //  900 |    1                    ,'                                 
        //      |                        ·                                   
        //  800 |                      ,'                                    
        //      |                    ,'                                      
        //  700 |                   ·                                        
        //      |                 ,'                                         
        //  600 |               ,'                                           
        //      |              ·                                             
        //  500 |            ,'                    2                         
        //      |          ,'                                                
        //  400 |         ·                                                ,D
        //      |       ,'                                             ,·''  
        //  300 |     ,'                                           ,,''      
        //      |    ·                                         ,,·'          
        //  200 |  ,'                                       ,·'              
        //      |,'                                     ,·''                 
        //  100 A                                   ,,''                     
        //      |                               ,,·'                         
        //    0 |         ●                  ,·'                             
        //      |                        ,·''                                
        // -100 |                    ,,''                              3     
        //      |                ,,·'                                        
        // -200 └--------------B'-------------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 100, 400, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 100, -200, 1000, 400), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 100, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 1000, 400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -200, 100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 400, 1000)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1000, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, -200, 1000, 400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 400, 1000); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 100, 400, 1000)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void ThreePointsMeetingPastCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 1300), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(1300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                             C                              
        //      |                           ,'                               
        // 1300 |    1                    ,'                                 
        //      |                        ·                                   
        // 1200 |                      ,'                                    
        //      |                    ,'                                      
        // 1100 |                   ·                                        
        //      |                 ,'                                         
        // 1000 |               ,'                                           
        //      |              ·                                             
        //  900 |            ,'                    2                         
        //      |          ,'                                                
        //  800 |         ·                                                ,D
        //      |       ,'                                             ,·''  
        //  700 |     ,'                                           ,,''      
        //      |    ·                                         ,,·'          
        //  600 |  ,'                                       ,·'              
        //      |,'                                     ,·''                 
        //  500 A                                   ,,''                     
        //      |                               ,,·'                         
        //  400 |                            ,·'                             
        //      |                        ,·''                                
        //  300 |                    ,,''                              3     
        //      |                ,,·'                                        
        //  200 └--------------B'-------------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 500, 800, 1400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 200, 1400, 800), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 500, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 1400, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 200, 500); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 800, 1400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 1400, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 200, 1400, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 800, 1400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 500, 800, 1400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 1100), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(100, 100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑              A,                                            
        //      |                ''·,                                        
        // 1100 |                    '',,                              1     
        //      |                        '·,,                                
        // 1000 |                            '·,                             
        //      |                               ''·,                         
        //  900 B                                   '',,                     
        //      |',                                     '·,,                 
        //  800 |  ',                                       '·,              
        //      |    ·                                         ''·,          
        //  700 |     ',                                           '',,      
        //      |       ',                                             '·,,  
        //  600 |         ·                                                'C
        //      |          ',                                                
        //  500 |            ',                    2                         
        //      |              ·                                             
        //  400 |               ',                                           
        //      |                 ',                                         
        //  300 |                   ·                                        
        //      |                    ',                                      
        //  200 |                      ',                                    
        //      |                        ·                                   
        //  100 |    3                    ',                                 
        //      |                           ',                               
        //    0 ●-----------------------------D-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, 1200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1200, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 1200, 1200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 900, 600, 0), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 300, 1200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 1200, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, -100), // #2
            new VoronoiSite(-500, -500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑              A,                                            
        //      |                ''·,                                        
        //  500 |                    '',,                              1     
        //      |                        '·,,                                
        //  400 |                            '·,                             
        //      |                               ''·,                         
        //  300 B                                   '',,                     
        //      |',                                     '·,,                 
        //  200 |  ',                                       '·,              
        //      |    ·                                         ''·,          
        //  100 |     ',                                           '',,      
        //      |       ',                                             '·,,  
        //    0 |         ·                   ●                            'C
        //      |          ',                                                
        // -100 |            ',                    2                         
        //      |              ·                                             
        // -200 |               ',                                           
        //      |                 ',                                         
        // -300 |                   ·                                        
        //      |                    ',                                      
        // -400 |                      ',                                    
        //      |                        ·                                   
        // -500 |    3                    ',                                 
        //      |                           ',                               
        // -600 └-----------------------------D-----------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -300, 600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -600, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -300, 600, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -600, 300, 0, -600), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, -600, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 300, 0, -600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, -300, 600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 600, 600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, -600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -600, 300, 0, -600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -300, 600, 600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(-100, -100), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑              A,                                            
        //      |                ''·,                                        
        //  900 |                    '',,                              1     
        //      |                        '·,,                                
        //  800 |                            '·,                             
        //      |                               ''·,                         
        //  700 B                                   '',,                     
        //      |',                                     '·,,                 
        //  600 |  ',                                       '·,              
        //      |    ·                                         ''·,          
        //  500 |     ',                                           '',,      
        //      |       ',                                             '·,,  
        //  400 |         ·                                                'C
        //      |          ',                                                
        //  300 |            ',                    2                         
        //      |              ·                                             
        //  200 |               ',                                           
        //      |                 ',                                         
        //  100 |                   ·                                        
        //      |                    ',                                      
        //    0 |         ●            ',                                    
        //      |                        ·                                   
        // -100 |    3                    ',                                 
        //      |                           ',                               
        // -200 └-----------------------------D-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 100, 1000), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1000, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 100, 1000, 1000, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 700, 400, -200), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 400, -200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 100, 1000); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 1000, 1000, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 400, -200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 1000, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 100, 1000, 1000, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1300, 1300), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(300, 300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑              A,                                            
        //      |                ''·,                                        
        // 1300 |                    '',,                              1     
        //      |                        '·,,                                
        // 1200 |                            '·,                             
        //      |                               ''·,                         
        // 1100 B                                   '',,                     
        //      |',                                     '·,,                 
        // 1000 |  ',                                       '·,              
        //      |    ·                                         ''·,          
        //  900 |     ',                                           '',,      
        //      |       ',                                             '·,,  
        //  800 |         ·                                                'C
        //      |          ',                                                
        //  700 |            ',                    2                         
        //      |              ·                                             
        //  600 |               ',                                           
        //      |                 ',                                         
        //  500 |                   ·                                        
        //      |                    ',                                      
        //  400 |                      ',                                    
        //      |                        ·                                   
        //  300 |    3                    ',                                 
        //      |                           ',                               
        //  200 └-----------------------------D-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 500, 1400), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1400, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1400, 1400, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 1100, 800, 200), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 800, 200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 500, 1400); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1400, 1400, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 800, 200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 1400, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 500, 1400, 1400, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1100, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                                           ,B               
        //      |                                       ,·''                 
        // 1100 |    3                              ,,''                     
        //      |                               ,,·'                         
        // 1000 |                            ,·'                             
        //      |                        ,·''                                
        //  900 |                    ,,''                                   A
        //      |                ,,·'                                     ,' 
        //  800 |             ,·'                                       ,'   
        //      |         ,·''                                         ·     
        //  700 |     ,,''                                           ,'      
        //      | ,,·'                                             ,'        
        //  600 D'                                                ·          
        //      |                                               ,'           
        //  500 |                        2                    ,'             
        //      |                                            ·               
        //  400 |                                          ,'                
        //      |                                        ,'                  
        //  300 |                                       ·                    
        //      |                                     ,'                     
        //  200 |                                   ,'                       
        //      |                                  ·                         
        //  100 |                                ,'                    1     
        //      |                              ,'                            
        //    0 ●-----------------------------C-----------------------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1200, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 1200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 900, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 1200, 0, 600), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 1200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1200, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(500, -500), // #1
            new VoronoiSite(-100, -100), // #2
            new VoronoiSite(-500, 500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                                           ,B               
        //      |                                       ,·''                 
        //  500 |    3                              ,,''                     
        //      |                               ,,·'                         
        //  400 |                            ,·'                             
        //      |                        ,·''                                
        //  300 |                    ,,''                                   A
        //      |                ,,·'                                     ,' 
        //  200 |             ,·'                                       ,'   
        //      |         ,·''                                         ·     
        //  100 |     ,,''                                           ,'      
        //      | ,,·'                                             ,'        
        //    0 D'                            ●                   ·          
        //      |                                               ,'           
        // -100 |                        2                    ,'             
        //      |                                            ·               
        // -200 |                                          ,'                
        //      |                                        ,'                  
        // -300 |                                       ·                    
        //      |                                     ,'                     
        // -400 |                                   ,'                       
        //      |                                  ·                         
        // -500 |                                ,'                    1     
        //      |                              ,'                            
        // -600 └-----------------------------C-----------------------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 600, 300), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 300, 600), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, -600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 300, 0, -600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 600, -600, 0), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 300, 600); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, -600, 0)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 600, 300); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, -600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -600, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, 600, -600, 0)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 0, -600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, 300, 0, -600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(900, -100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(-100, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                                           ,B               
        //      |                                       ,·''                 
        //  900 |    3                              ,,''                     
        //      |                               ,,·'                         
        //  800 |                            ,·'                             
        //      |                        ,·''                                
        //  700 |                    ,,''                                   A
        //      |                ,,·'                                     ,' 
        //  600 |             ,·'                                       ,'   
        //      |         ,·''                                         ·     
        //  500 |     ,,''                                           ,'      
        //      | ,,·'                                             ,'        
        //  400 D'                                                ·          
        //      |                                               ,'           
        //  300 |                        2                    ,'             
        //      |                                            ·               
        //  200 |                                          ,'                
        //      |                                        ,'                  
        //  100 |                                       ·                    
        //      |                                     ,'                     
        //    0 |         ●                         ,'                       
        //      |                                  ·                         
        // -100 |                                ,'                    1     
        //      |                              ,'                            
        // -200 └-----------------------------C-----------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1000, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 1000), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 700, 400, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 1000, -200, 400), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 1000); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, -200, 400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1000, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 700, 400, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, -200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 1000, -200, 400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 400, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 700, 400, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1300, 300), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 1300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                                           ,B               
        //      |                                       ,·''                 
        // 1300 |    3                              ,,''                     
        //      |                               ,,·'                         
        // 1200 |                            ,·'                             
        //      |                        ,·''                                
        // 1100 |                    ,,''                                   A
        //      |                ,,·'                                     ,' 
        // 1000 |             ,·'                                       ,'   
        //      |         ,·''                                         ·     
        //  900 |     ,,''                                           ,'      
        //      | ,,·'                                             ,'        
        //  800 D'                                                ·          
        //      |                                               ,'           
        //  700 |                        2                    ,'             
        //      |                                            ·               
        //  600 |                                          ,'                
        //      |                                        ,'                  
        //  500 |                                       ·                    
        //      |                                     ,'                     
        //  400 |                                   ,'                       
        //      |                                  ·                         
        //  300 |                                ,'                    1     
        //      |                              ,'                            
        //  200 └-----------------------------C-----------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1400, 1100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 1400), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1400, 1100, 800, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1100, 1400, 200, 800), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1100, 1400); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1400, 200, 800)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1400, 1100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 1100, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1400, 200, 800)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 1100, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 1200, 1200);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(1100, 1100), // #3
        ];
        plane.SetSites(sites);

        // 1200 ↑                             D                              
        //      |                              ',                            
        // 1100 |                                ',                    3     
        //      |                                  ·                         
        // 1000 |                                   ',                       
        //      |                                     ',                     
        //  900 |                                       ·                    
        //      |                                        ',                  
        //  800 |                                          ',                
        //      |                                            ·               
        //  700 |                        2                    ',             
        //      |                                               ',           
        //  600 C,                                                ·          
        //      | ''·,                                             ',        
        //  500 |     '',,                                           ',      
        //      |         '·,,                                         ·     
        //  400 |             '·,                                       ',   
        //      |                ''·,                                     ', 
        //  300 |                    '',,                                   B
        //      |                        '·,,                                
        //  200 |                            '·,                             
        //      |                               ''·,                         
        //  100 |    1                              '',,                     
        //      |                                       '·,,                 
        //    0 ●-------------------------------------------'A--------------→
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1200, 300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 1200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 0, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1200, 300, 600, 1200), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1200, 300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 900, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 600, 1200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 0, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-600, -600, 600, 600);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-500, -500), // #1
            new VoronoiSite(-100, 100), // #2
            new VoronoiSite(500, 500), // #3
        ];
        plane.SetSites(sites);

        //  600 ↑                             D                              
        //      |                              ',                            
        //  500 |                                ',                    3     
        //      |                                  ·                         
        //  400 |                                   ',                       
        //      |                                     ',                     
        //  300 |                                       ·                    
        //      |                                        ',                  
        //  200 |                                          ',                
        //      |                                            ·               
        //  100 |                        2                    ',             
        //      |                                               ',           
        //    0 C,                            ●                   ·          
        //      | ''·,                                             ',        
        // -100 |     '',,                                           ',      
        //      |         '·,,                                         ·     
        // -200 |             '·,                                       ',   
        //      |                ''·,                                     ', 
        // -300 |                    '',,                                   B
        //      |                        '·,,                                
        // -400 |                            '·,                             
        //      |                               ''·,                         
        // -500 |    1                              '',,                     
        //      |                                       '·,,                 
        // -600 └-------------------------------------------'A--------------→
        //    -600 -500 -400 -300 -200 -100    0  100  200  300  400  500  600 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 300, -600), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 600, -300), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, -600, -600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, -300, 0, 600), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 600, -300); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -300, 0, 600)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 300, -600); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -600, -600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 600, -300, 0, 600)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, -600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 300, -600, -600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 1000, 1000);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(900, 900), // #3
        ];
        plane.SetSites(sites);

        // 1000 ↑                             D                              
        //      |                              ',                            
        //  900 |                                ',                    3     
        //      |                                  ·                         
        //  800 |                                   ',                       
        //      |                                     ',                     
        //  700 |                                       ·                    
        //      |                                        ',                  
        //  600 |                                          ',                
        //      |                                            ·               
        //  500 |                        2                    ',             
        //      |                                               ',           
        //  400 C,                                                ·          
        //      | ''·,                                             ',        
        //  300 |     '',,                                           ',      
        //      |         '·,,                                         ·     
        //  200 |             '·,                                       ',   
        //      |                ''·,                                     ', 
        //  100 |                    '',,                                   B
        //      |                        '·,,                                
        //    0 |         ●                  '·,                             
        //      |                               ''·,                         
        // -100 |    1                              '',,                     
        //      |                                       '·,,                 
        // -200 └-------------------------------------------'A--------------→
        //    -200 -100    0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1000, 100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 1000), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, -200, -200, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 100, 400, 1000), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1000, 100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 100, 400, 1000)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 700, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 400, 1000); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1000, 100, 400, 1000)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, -200, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1400, 1400);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(1300, 1300), // #3
        ];
        plane.SetSites(sites);

        // 1400 ↑                             D                              
        //      |                              ',                            
        // 1300 |                                ',                    3     
        //      |                                  ·                         
        // 1200 |                                   ',                       
        //      |                                     ',                     
        // 1100 |                                       ·                    
        //      |                                        ',                  
        // 1000 |                                          ',                
        //      |                                            ·               
        //  900 |                        2                    ',             
        //      |                                               ',           
        //  800 C,                                                ·          
        //      | ''·,                                             ',        
        //  700 |     '',,                                           ',      
        //      |         '·,,                                         ·     
        //  600 |             '·,                                       ',   
        //      |                ''·,                                     ', 
        //  500 |                    '',,                                   B
        //      |                        '·,,                                
        //  400 |                            '·,                             
        //      |                               ''·,                         
        //  300 |    1                              '',,                     
        //      |                                       '·,,                 
        //  200 └-------------------------------------------'A--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 1200 1300 1400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1100, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1400, 500), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(2), "Expected: edge count 2");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1100, 200, 200, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1400, 500, 800, 1400), Is.True, "Expected: has edge B-D"); // B-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1400, 500); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 500, 800, 1400)), Is.True, "Expected: point B has edge B-D"); // B on B-D
        point = FindPoint(points, 1100, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        point = FindPoint(points, 800, 1400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1400, 500, 800, 1400)), Is.True, "Expected: point D has edge B-D"); // D on B-D
        point = FindPoint(points, 200, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
    }

    [Test]
    public void FourPointsMeetingAtCorner()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 900, 900);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(400, 700), // #2
            new VoronoiSite(700, 400), // #3
            new VoronoiSite(800, 100), // #4
        ];
        plane.SetSites(sites);

        //  900 ↑              C                            ,B
        //      |             ·                           ,'  
        //  800 |    1       ·                         ,·'    
        //      |            ·                       ,'       
        //  700 |           ·       2             ,·'         
        //      |          ·                    ,'            
        //  600 |         ·                  ,·'              
        //      |        ·                 ,'                 
        //  500 |       ·               ,·'                   
        //      |       ·             ,'                      
        //  400 |      ·           ,·'             3          
        //      |     ·          ,'                           
        //  300 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''    
        //  200 |  ·     ,·'               ,,,·'''            
        //      |  ·   ,'          ,,,··'''                   
        //  100 | · ,·'     ,,,·'''                     4     
        //      |·,',,,··'''                                  
        //    0 A#''-----------------------------------------→
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 300, 900), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 900, 300), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 900, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 300, 900), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 900, 300), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 900, 300); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 300, 900); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourPointsMeetingAtCorner_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-450, -450, 450, 450);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-350, 350), // #1
            new VoronoiSite(-50, 250), // #2
            new VoronoiSite(250, -50), // #3
            new VoronoiSite(350, -350), // #4
        ];
        plane.SetSites(sites);

        //      ↑              ·                           ,· 
        //  400 |             ·                          ,,   
        //      |            ·                        ,··     
        //  300 |            ·                      ,,        
        //      |           ·                    ,··          
        //  200 |          ·                   ,,             
        //      |         ·                  ··               
        //  100 |        ·                ,,'                 
        //      |       ·               ··                    
        //    0 |       ·            ,●'                      
        //      |      ·           ··                         
        // -100 |     ·         ,,'                           
        //      |    ·        ··                         ,,,· 
        // -200 |   ·      ,,'                   ,,,···''     
        //      |  ·     ··               ,,,··''             
        // -300 |  ·   ,'          ,,···''                    
        //      | · ··'    ,,,··'''                           
        // -400 |·,',,···''                                   
        //      ##''-----------------------------------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -450, -450), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 450, 450), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -150, 450), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 450, -150), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -450, -450, 450, 450), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -450, -450, -150, 450), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -450, -450, 450, -150), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -450, -450); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, 450, 450)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, -150, 450)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, 450, -150)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 450, -150); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, 450, -150)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -150, 450); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, -150, 450)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 450, 450); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, -450, 450, 450)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourPointsMeetingAtCorner_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 700, 700);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, 600), // #1
            new VoronoiSite(200, 500), // #2
            new VoronoiSite(500, 200), // #3
            new VoronoiSite(600, -100), // #4
        ];
        plane.SetSites(sites);

        //  700 ↑              C                            ,B
        //      |             ·                           ,'  
        //  600 |    1       ·                         ,·'    
        //      |            ·                       ,'       
        //  500 |           ·       2             ,·'         
        //      |          ·                    ,'            
        //  400 |         ·                  ,·'              
        //      |        ·                 ,'                 
        //  300 |       ·               ,·'                   
        //      |       ·             ,'                      
        //  200 |      ·           ,·'             3          
        //      |     ·          ,'                           
        //  100 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''    
        //    0 |  ·     ,●'               ,,,·'''            
        //      |  ·   ,'          ,,,··'''                   
        // -100 | · ,·'     ,,,·'''                     4     
        //      |·,',,,··'''                                  
        // -200 A#''-----------------------------------------→
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 100, 700), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 700, 100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, -200, 700, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, -200, 100, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, -200, 700, 100), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 700, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 100, 700)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 700, 100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 700, 100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 700, 100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 100, 700); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 100, 700)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, -200, 700, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    [Test]
    public void FourPointsMeetingAtCorner_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1100, 1100);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 1000), // #1
            new VoronoiSite(600, 900), // #2
            new VoronoiSite(900, 600), // #3
            new VoronoiSite(1000, 300), // #4
        ];
        plane.SetSites(sites);

        // 1100 ↑              C                            ,B
        //      |             ·                           ,'  
        // 1000 |    1       ·                         ,·'    
        //      |            ·                       ,'       
        //  900 |           ·       2             ,·'         
        //      |          ·                    ,'            
        //  800 |         ·                  ,·'              
        //      |        ·                 ,'                 
        //  700 |       ·               ,·'                   
        //      |       ·             ,'                      
        //  600 |      ·           ,·'             3          
        //      |     ·          ,'                           
        //  500 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''    
        //  400 |  ·     ,·'               ,,,·'''            
        //      |  ·   ,'          ,,,··'''                   
        //  300 | · ,·'     ,,,·'''                     4     
        //      |·,',,,··'''                                  
        //  200 A#''-----------------------------------------→
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 500, 1100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 1100, 500), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 1100, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 500, 1100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, 1100, 500), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1100, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 500, 1100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1100, 500)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 1100, 500); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1100, 500)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 500, 1100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 500, 1100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1100, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 200, 1100, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 900, 900);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(400, 200), // #3
            new VoronoiSite(100, 100), // #4
        ];
        plane.SetSites(sites);

        //  900 A#,,                                          
        //      |·','''··,,,                                  
        //  800 | · '·,     '''·,,,                     1     
        //      |  ·   ',          '''··,,,                   
        //  700 |  ·     '·,               '''·,,,            
        //      |   ·       ',                    '''··,,,    
        //  600 |    ·        '·,                         '''C
        //      |     ·          ',                           
        //  500 |      ·           '·,             2          
        //      |       ·             ',                      
        //  400 |       ·               '·,                   
        //      |        ·                 ',                 
        //  300 |         ·                  '·,              
        //      |          ·                    ',            
        //  200 |           ·       3             '·,         
        //      |            ·                       ',       
        //  100 |    4       ·                         '·,    
        //      |             ·                           ',  
        //    0 ●--------------D----------------------------'B
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 0, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 900, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 900, 600), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 300, 0), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 900, 900, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 900, 900, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 900, 300, 0), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 0, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 300, 0); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 900, 600); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 900, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-450, -450, 450, 450);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(350, 350), // #1
            new VoronoiSite(250, 50), // #2
            new VoronoiSite(-50, -250), // #3
            new VoronoiSite(-350, -350), // #4
        ];
        plane.SetSites(sites);

        //      ##,,                                          
        //  400 |·',''···,,                                   
        //      | · ··,    '''··,,,                           
        //  300 |  ·   ',          ''···,,                    
        //      |  ·     ··               '''··,,             
        //  200 |   ·      '',                   '''···,,     
        //      |    ·        ··                         '''· 
        //  100 |     ·         '',                           
        //      |      ·           ··                         
        //    0 |       ·            '●,                      
        //      |       ·               ··                    
        // -100 |        ·                '',                 
        //      |         ·                  ··               
        // -200 |          ·                   ''             
        //      |           ·                    '··          
        // -300 |            ·                      ''        
        //      |            ·                        '··     
        // -400 |             ·                          ''   
        //      └--------------·---------------------------'·→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -450, 450), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 450, -450), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 450, 150), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -150, -450), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -450, 450, 450, -450), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -450, 450, 450, 150), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -450, 450, -150, -450), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -450, 450); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, 450, -450)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, 450, 150)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, -150, -450)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -150, -450); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, -150, -450)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 450, 150); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, 450, 150)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 450, -450); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -450, 450, 450, -450)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 700, 700);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, 600), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(200, 0), // #3
            new VoronoiSite(-100, -100), // #4
        ];
        plane.SetSites(sites);

        //  700 A#,,                                          
        //      |·','''··,,,                                  
        //  600 | · '·,     '''·,,,                     1     
        //      |  ·   ',          '''··,,,                   
        //  500 |  ·     '·,               '''·,,,            
        //      |   ·       ',                    '''··,,,    
        //  400 |    ·        '·,                         '''C
        //      |     ·          ',                           
        //  300 |      ·           '·,             2          
        //      |       ·             ',                      
        //  200 |       ·               '·,                   
        //      |        ·                 ',                 
        //  100 |         ·                  '·,              
        //      |          ·                    ',            
        //    0 |         ● ·       3             '·,         
        //      |            ·                       ',       
        // -100 |    4       ·                         '·,    
        //      |             ·                           ',  
        // -200 └--------------D----------------------------'B
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, -200, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 700, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 700, 400), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 100, -200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, -200, 700, 700, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, -200, 700, 700, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, -200, 700, 100, -200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, -200, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 700, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 700, 400)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 100, -200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 100, -200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 100, -200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 700, 400); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 700, 400)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 700, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, -200, 700, 700, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated90"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1100, 1100);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 1000), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(600, 400), // #3
            new VoronoiSite(300, 300), // #4
        ];
        plane.SetSites(sites);

        // 1100 A#,,                                          
        //      |·','''··,,,                                  
        // 1000 | · '·,     '''·,,,                     1     
        //      |  ·   ',          '''··,,,                   
        //  900 |  ·     '·,               '''·,,,            
        //      |   ·       ',                    '''··,,,    
        //  800 |    ·        '·,                         '''C
        //      |     ·          ',                           
        //  700 |      ·           '·,             2          
        //      |       ·             ',                      
        //  600 |       ·               '·,                   
        //      |        ·                 ',                 
        //  500 |         ·                  '·,              
        //      |          ·                    ',            
        //  400 |           ·       3             '·,         
        //      |            ·                       ',       
        //  300 |    4       ·                         '·,    
        //      |             ·                           ',  
        //  200 └--------------D----------------------------'B
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 200, 1100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 1100, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 1100, 800), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 500, 200), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1100, 1100, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1100, 1100, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 1100, 500, 200), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 200, 1100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 1100, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 1100, 800)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 500, 200)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 500, 200); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 500, 200)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 1100, 800); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 1100, 800)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 1100, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 200, 1100, 1100, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 900, 900);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(500, 200), // #2
            new VoronoiSite(200, 500), // #3
            new VoronoiSite(100, 800), // #4
        ];
        plane.SetSites(sites);

        //  900 ↑                                         ,,#A
        //      |                                 ,,,··''','· 
        //  800 |    4                     ,,,·'''     ,·' ·  
        //      |                  ,,,··'''          ,'   ·   
        //  700 |           ,,,·'''               ,·'     ·   
        //      |   ,,,··'''                    ,'       ·    
        //  600 D'''                         ,·'        ·     
        //      |                          ,'          ·      
        //  500 |         3             ,·'           ·       
        //      |                     ,'             ·        
        //  400 |                  ,·'               ·        
        //      |                ,'                 ·         
        //  300 |             ,·'                  ·          
        //      |           ,'                    ·           
        //  200 |        ,·'             2       ·            
        //      |      ,'                       ·             
        //  100 |   ,·'                         ·       1     
        //      | ,'                           ·              
        //    0 B'----------------------------C--------------→
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 900), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 0), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 600, 0), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 0, 600), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 900, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 900, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 900, 0, 600), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 900); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 0, 600); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 600, 0); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 0); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-450, -450, 450, 450);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(350, -350), // #1
            new VoronoiSite(50, -250), // #2
            new VoronoiSite(-250, 50), // #3
            new VoronoiSite(-350, 350), // #4
        ];
        plane.SetSites(sites);

        //      ↑                                        ,,## 
        //  400 |                                 ,,···'','·  
        //      |                         ,,,··'''    ,·· ·   
        //  300 |                  ,,···''          ,'   ·    
        //      |           ,,··'''               ··     ·    
        //  200 |   ,,···'''                   ,''      ·     
        //      ·'''                         ··        ·      
        //  100 |                         ,''         ·       
        //      |                       ··           ·        
        //    0 |                    ,●'            ·         
        //      |                  ··               ·         
        // -100 |               ,''                ·          
        //      |             ··                  ·           
        // -200 |           ''                   ·            
        //      |        ··'                    ·             
        // -300 |      ''                      ·              
        //      |   ··'                        ·              
        // -400 | ''                          ·               
        //      ·'---------------------------·---------------→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 450, 450), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -450, -450), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 150, -450), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -450, 150), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 450, 450, -450, -450), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 450, 450, 150, -450), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 450, 450, -450, 150), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 450, 450); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, -450, -450)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, 150, -450)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, -450, 150)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -450, 150); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, -450, 150)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 150, -450); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, 150, -450)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -450, -450); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, 450, -450, -450)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 700, 700);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(600, -100), // #1
            new VoronoiSite(300, 0), // #2
            new VoronoiSite(0, 300), // #3
            new VoronoiSite(-100, 600), // #4
        ];
        plane.SetSites(sites);

        //  700 ↑                                         ,,#A
        //      |                                 ,,,··''','· 
        //  600 |    4                     ,,,·'''     ,·' ·  
        //      |                  ,,,··'''          ,'   ·   
        //  500 |           ,,,·'''               ,·'     ·   
        //      |   ,,,··'''                    ,'       ·    
        //  400 D'''                         ,·'        ·     
        //      |                          ,'          ·      
        //  300 |         3             ,·'           ·       
        //      |                     ,'             ·        
        //  200 |                  ,·'               ·        
        //      |                ,'                 ·         
        //  100 |             ,·'                  ·          
        //      |           ,'                    ·           
        //    0 |        ,●'             2       ·            
        //      |      ,'                       ·             
        // -100 |   ,·'                         ·       1     
        //      | ,'                           ·              
        // -200 B'----------------------------C--------------→
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, 700), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, -200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 400, -200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, -200, 400), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 700, -200, -200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 700, 400, -200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 700, -200, 400), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 700, 700); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, -200, -200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 400, -200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, -200, 400)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, -200, 400); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, -200, 400)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 400, -200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, 400, -200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, -200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, 700, -200, -200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated180"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1100, 1100);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(1000, 300), // #1
            new VoronoiSite(700, 400), // #2
            new VoronoiSite(400, 700), // #3
            new VoronoiSite(300, 1000), // #4
        ];
        plane.SetSites(sites);

        // 1100 ↑                                         ,,#A
        //      |                                 ,,,··''','· 
        // 1000 |    4                     ,,,·'''     ,·' ·  
        //      |                  ,,,··'''          ,'   ·   
        //  900 |           ,,,·'''               ,·'     ·   
        //      |   ,,,··'''                    ,'       ·    
        //  800 D'''                         ,·'        ·     
        //      |                          ,'          ·      
        //  700 |         3             ,·'           ·       
        //      |                     ,'             ·        
        //  600 |                  ,·'               ·        
        //      |                ,'                 ·         
        //  500 |             ,·'                  ·          
        //      |           ,'                    ·           
        //  400 |        ,·'             2       ·            
        //      |      ,'                       ·             
        //  300 |   ,·'                         ·       1     
        //      | ,'                           ·              
        //  200 B'----------------------------C--------------→
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1100, 1100), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 200), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 800, 200), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 200, 800), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1100, 1100, 200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1100, 1100, 800, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1100, 1100, 200, 800), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1100, 1100); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 200, 200)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 800, 200)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 200, 800)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 200, 800); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 200, 800)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 800, 200); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 800, 200)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 200); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 1100, 200, 200)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(0, 0, 900, 900);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(800, 800), // #4
        ];
        plane.SetSites(sites);

        //  900 B,                            D               
        //      | ',                           ·              
        //  800 |   '·,                         ·       4     
        //      |      ',                       ·             
        //  700 |        '·,             3       ·            
        //      |           ',                    ·           
        //  600 |             '·,                  ·          
        //      |                ',                 ·         
        //  500 |                  '·,               ·        
        //      |                     ',             ·        
        //  400 |         2             '·,           ·       
        //      |                          ',          ·      
        //  300 C,,,                         '·,        ·     
        //      |   '''··,,,                    ',       ·    
        //  200 |           '''·,,,               '·,     ·   
        //      |                  '''··,,,          ',   ·   
        //  100 |    1                     '''·,,,     '·, ·  
        //      |                                 '''··,,,',· 
        //    0 ●-----------------------------------------''#A
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 900, 0), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 0, 900), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 0, 300), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 600, 900), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 0, 0, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 0, 0, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 0, 600, 900), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 900, 0); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 600, 900); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 0, 300); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 0, 900); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_CenteredAtOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-450, -450, 450, 450);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-350, -350), // #1
            new VoronoiSite(-250, -50), // #2
            new VoronoiSite(50, 250), // #3
            new VoronoiSite(350, 350), // #4
        ];
        plane.SetSites(sites);

        //      ·,                           ·                
        //  400 | ,,                          ·               
        //      |   ··,                        ·              
        //  300 |      ,,                      ·              
        //      |        ··,                    ·             
        //  200 |           ,,                   ·            
        //      |             ··                  ·           
        //  100 |               ',,                ·          
        //      |                  ··               ·         
        //    0 |                    '●,            ·         
        //      |                       ··           ·        
        // -100 |                         ',,         ·       
        //      ·,,,                         ··        ·      
        // -200 |   ''···,,,                   ',,      ·     
        //      |           ''··,,,               ··     ·    
        // -300 |                  ''···,,          ',   ·    
        //      |                         '''··,,,    '·· ·   
        // -400 |                                 ''···,,',·  
        //      └----------------------------------------''##→
        //    -400 -300 -200 -100    0  100  200  300  400 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 450, -450), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -450, 450), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -450, -150), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 150, 450), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 450, -450, -450, 450), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 450, -450, -450, -150), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 450, -450, 150, 450), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 450, -450); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, -450, 450)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, -450, -150)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, 150, 450)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 150, 450); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, 150, 450)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -450, -150); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, -450, -150)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -450, 450); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 450, -450, -450, 450)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_ShiftedTowardsOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(-200, -200, 700, 700);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(-100, -100), // #1
            new VoronoiSite(0, 200), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(600, 600), // #4
        ];
        plane.SetSites(sites);

        //  700 B,                            D               
        //      | ',                           ·              
        //  600 |   '·,                         ·       4     
        //      |      ',                       ·             
        //  500 |        '·,             3       ·            
        //      |           ',                    ·           
        //  400 |             '·,                  ·          
        //      |                ',                 ·         
        //  300 |                  '·,               ·        
        //      |                     ',             ·        
        //  200 |         2             '·,           ·       
        //      |                          ',          ·      
        //  100 C,,,                         '·,        ·     
        //      |   '''··,,,                    ',       ·    
        //    0 |         ● '''·,,,               '·,     ·   
        //      |                  '''··,,,          ',   ·   
        // -100 |    1                     '''·,,,     '·, ·  
        //      |                                 '''··,,,',· 
        // -200 └-----------------------------------------''#A
        //    -200 -100    0  100  200  300  400  500  600  700 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 700, -200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, -200, 700), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, -200, 100), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 400, 700), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, -200, -200, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, -200, -200, 100), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, -200, 400, 700), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 700, -200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 700)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 100)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, 400, 700)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 400, 700); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, 400, 700)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, -200, 100); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 100)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, -200, 700); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 700, -200, -200, 700)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner_Rotated270"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270_ShiftedAwayFromOrigin()
    {
        // Arrange

        VoronoiPlane plane = new VoronoiPlane(200, 200, 1100, 1100);
        List<VoronoiSite> sites =
        [
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(1000, 1000), // #4
        ];
        plane.SetSites(sites);

        // 1100 B,                            D               
        //      | ',                           ·              
        // 1000 |   '·,                         ·       4     
        //      |      ',                       ·             
        //  900 |        '·,             3       ·            
        //      |           ',                    ·           
        //  800 |             '·,                  ·          
        //      |                ',                 ·         
        //  700 |                  '·,               ·        
        //      |                     ',             ·        
        //  600 |         2             '·,           ·       
        //      |                          ',          ·      
        //  500 C,,,                         '·,        ·     
        //      |   '''··,,,                    ',       ·    
        //  400 |           '''·,,,               '·,     ·   
        //      |                  '''··,,,          ',   ·   
        //  300 |    1                     '''·,,,     '·, ·  
        //      |                                 '''··,,,',· 
        //  200 └-----------------------------------------''#A
        //     200  300  400  500  600  700  800  900 1000 1100 

        // Act

        plane.Tessellate(BorderEdgeGeneration.DoNotMakeBorderEdges);
        List<VoronoiEdge> edges = plane.Edges;
        List<VoronoiPoint> points = plane.Points;

        // Assume

        Assume.That(points, Is.Not.Null);
        Assume.That(points.Count, Is.EqualTo(4), "Expected: point count 4");
        Assume.That(HasPoint(points, 1100, 200), Is.True, "Expected: has point A"); // A
        Assume.That(HasPoint(points, 200, 1100), Is.True, "Expected: has point B"); // B
        Assume.That(HasPoint(points, 200, 500), Is.True, "Expected: has point C"); // C
        Assume.That(HasPoint(points, 800, 1100), Is.True, "Expected: has point D"); // D
        Assume.That(edges.Count, Is.EqualTo(3), "Expected: edge count 3");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1100, 200, 200, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1100, 200, 200, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1100, 200, 800, 1100), Is.True, "Expected: has edge A-D"); // A-D

        // Assert

        VoronoiPoint point = FindPoint(points, 1100, 200); // A
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(3));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 1100)), Is.True, "Expected: point A has edge A-B"); // A on A-B
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 500)), Is.True, "Expected: point A has edge A-C"); // A on A-C
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 800, 1100)), Is.True, "Expected: point A has edge A-D"); // A on A-D
        point = FindPoint(points, 800, 1100); // D
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 800, 1100)), Is.True, "Expected: point D has edge A-D"); // D on A-D
        point = FindPoint(points, 200, 500); // C
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 500)), Is.True, "Expected: point C has edge A-C"); // C on A-C
        point = FindPoint(points, 200, 1100); // B
        Assert.That(point.Edges, Is.Not.Null);
        Assert.That(point.Edges.Count(), Is.EqualTo(1));
        Assert.That(PointHasEdge(point, FindEdge(edges, 1100, 200, 200, 1100)), Is.True, "Expected: point B has edge A-B"); // B on A-B
    }

}
