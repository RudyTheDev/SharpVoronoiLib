using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using static SharpVoronoiLib.UnitTests.CommonTestUtilities;

#pragma warning disable
// ReSharper disable All

namespace SharpVoronoiLib.UnitTests;

/// <summary>
/// These tests assert that <see cref="VoronoiEdge"/>`s have expected neighbouring edges.
/// Specifically, that the <see cref="VoronoiEdge.Neighbours"/> contains the expected <see cref="VoronoiEdge"/>`s.
/// These tests are run with generating the border edges, i.e. <see cref="BorderEdgeGeneration.MakeBorderEdges"/>.
/// </summary>
/// <remarks>
/// This is an AUTO-GENERATED test fixture class from UnitTestGenerator.
/// This is one of the several auto-generated fixture classes each checking a different part of the algorithm's result.
/// It contains a bunch of known Voronoi site layouts, including many edge cases.
/// </remarks>
[Parallelizable(ParallelScope.All)]
[TestFixture]
public class GeneratedTest_EdgeNeighbours_ClosedBorders
{
    [Test]
    public void NoPoints()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointInMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        1                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |         1                                       |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 800), // #1
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                        1                        |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 500), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                       1         |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 200), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                        1                        |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointArbitrary()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 700), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |         1                                       |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 800), // #1
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                  1              |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 300), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                       1         |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointArbitrary"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointArbitrary_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 200), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |              1                                  |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointOnBorderCentered()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 500), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 1                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 1000), // #1
        };

        // 1000 Y------------------------1------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 500), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 1
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderCentered"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderCentered_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X------------------------1------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointOnBorderOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 700), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 1                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 1000), // #1
        };

        // 1000 Y----------------------------------1--------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 300), // #1
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 1
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X--------------1----------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 700), // #1
        };

        // 1000 Z-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 1
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 0), // #1
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y----------------------------------1--------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 300), // #1
        };

        // 1000 Y-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 1                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointOnBorderOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointOnBorderOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 1000), // #1
        };

        // 1000 X--------------1----------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void OnePointInCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 0), // #1
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 1-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
        };

        // 1000 1-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 1000), // #1
        };

        // 1000 W-------------------------------------------------1
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="OnePointInCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void OnePointInCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 0), // #1
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                                                 |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------1
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(4), "Expected: edge count 4");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours Y-W"); // X-Y neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours Z-X"); // X-Y neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours X-Y"); // Y-W neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Z-X"); // W-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours X-Y"); // Z-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours W-Z"); // Z-X neighbours W-Z
    }

    [Test]
    public void TwoPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(500, 300), // #2
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                        1                        |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 A-------------------------------------------------B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                        2                        |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 500, 1000, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 0, 500, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 1000, 0, 1000, 500); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-B neighbours B-Z"); // W-B neighbours B-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-Z neighbours W-B"); // B-Z neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(300, 500), // #2
        };

        // 1000 Y------------------------A------------------------X
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              2         |         1              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 1000, 500, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 0, 0, 500, 0); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours B-Z"); // W-B neighbours B-Z
        edge = FindEdge(edges, 500, 0, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-Z neighbours W-B"); // B-Z neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    [Test]
    public void TwoPointsVerticalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                        1                        |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        2                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 700), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 700, 1000, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 0, 1000, 0, 700); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 0, 700, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 1000, 0, 1000, 700); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge W-B neighbours B-Z"); // W-B neighbours B-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge B-Z neighbours W-B"); // B-Z neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsVerticalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsHorizontalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
        };

        // 1000 Y----------------------------------A--------------X
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                                  |              |
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                                  |              |
        //      |                                  |              |
        //  500 |                        2         |         1    |
        //      |                                  |              |
        //  400 |                                  |              |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 W----------------------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 700, 0), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 1000, 700, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 700, 1000, 0, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 0, 0, 700, 0); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours B-Z"); // W-B neighbours B-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge B-Z neighbours W-B"); // B-Z neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    [Test]
    public void ThreeConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(500, 100), // #3
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                        1                        |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        2                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 C-------------------------------------------------D
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                        3                        |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 300, 1000, 300), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 700, 0, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 1000, 300, 1000, 700), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 700, 1000, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 0, 300, 1000, 300); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge C-D neighbours A-C"); // C-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge C-D neighbours C-Y"); // C-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge C-D neighbours W-D"); // C-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge C-D neighbours D-B"); // C-D neighbours D-B
        edge = FindEdge(edges, 0, 1000, 0, 700); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 0, 700, 0, 300); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge A-C neighbours C-D"); // A-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 0, 300, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge C-Y neighbours C-D"); // C-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-Y neighbours Y-W"); // C-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge Y-W neighbours C-Y"); // Y-W neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge Y-W neighbours W-D"); // Y-W neighbours W-D
        edge = FindEdge(edges, 1000, 0, 1000, 300); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge W-D neighbours C-D"); // W-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-D neighbours Y-W"); // W-D neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 1000, 300, 1000, 700); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge D-B neighbours C-D"); // D-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge D-B neighbours B-Z"); // D-B neighbours B-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge B-Z neighbours D-B"); // B-Z neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 500), // #3
        };

        // 1000 Y--------------C-------------------A--------------X
        //      |              |                   |              |
        //  900 |              |                   |              |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 |              |                   |              |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 |    3         |         2         |         1    |
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |              |                   |              |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 W--------------D-------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 1000, 300, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 700, 1000, 300, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 300, 0, 700, 0), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 1000, 700, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 300, 1000, 300, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge C-D neighbours A-C"); // C-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge C-D neighbours C-Y"); // C-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge C-D neighbours W-D"); // C-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge C-D neighbours D-B"); // C-D neighbours D-B
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 700, 1000, 300, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge A-C neighbours C-D"); // A-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 300, 1000, 0, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge C-Y neighbours C-D"); // C-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-Y neighbours Y-W"); // C-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours C-Y"); // Y-W neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge Y-W neighbours W-D"); // Y-W neighbours W-D
        edge = FindEdge(edges, 0, 0, 300, 0); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge W-D neighbours C-D"); // W-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-D neighbours Y-W"); // W-D neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 300, 0, 700, 0); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge D-B neighbours C-D"); // D-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge D-B neighbours B-Z"); // D-B neighbours B-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge B-Z neighbours D-B"); // B-Z neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    [Test]
    public void FourConcentricPointsVerticalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 800), // #1
            new VoronoiSite(500, 600), // #2
            new VoronoiSite(500, 400), // #3
            new VoronoiSite(500, 200), // #4
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                        1                        |
        //      |                                                 |
        //  700 A-------------------------------------------------B
        //      |                                                 |
        //  600 |                        2                        |
        //      |                                                 |
        //  500 C-------------------------------------------------D
        //      |                                                 |
        //  400 |                        3                        |
        //      |                                                 |
        //  300 E-------------------------------------------------F
        //      |                                                 |
        //  200 |                        4                        |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 1000, 500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 300, 1000, 300), Is.True, "Expected: has edge E-F"); // E-F
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 700, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 500, 0, 300), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge W-F"); // W-F
        Assume.That(HasEdge(edges, 1000, 300, 1000, 500), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 700), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 700, 1000, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 700)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 0, 500, 1000, 500); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge C-D neighbours A-C"); // C-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: edge C-D neighbours C-E"); // C-D neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 500)), Is.True, "Expected: edge C-D neighbours F-D"); // C-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 700)), Is.True, "Expected: edge C-D neighbours D-B"); // C-D neighbours D-B
        edge = FindEdge(edges, 0, 300, 1000, 300); // E-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: edge E-F neighbours C-E"); // E-F neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge E-F neighbours E-Y"); // E-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge E-F neighbours W-F"); // E-F neighbours W-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 500)), Is.True, "Expected: edge E-F neighbours F-D"); // E-F neighbours F-D
        edge = FindEdge(edges, 0, 1000, 0, 700); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 0, 700, 0, 500); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours C-D"); // A-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: edge A-C neighbours C-E"); // A-C neighbours C-E
        edge = FindEdge(edges, 0, 500, 0, 300); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge C-E neighbours C-D"); // C-E neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge C-E neighbours E-F"); // C-E neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge C-E neighbours A-C"); // C-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge C-E neighbours E-Y"); // C-E neighbours E-Y
        edge = FindEdge(edges, 0, 300, 0, 0); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge E-Y neighbours E-F"); // E-Y neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 300)), Is.True, "Expected: edge E-Y neighbours C-E"); // E-Y neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge E-Y neighbours Y-W"); // E-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge Y-W neighbours E-Y"); // Y-W neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge Y-W neighbours W-F"); // Y-W neighbours W-F
        edge = FindEdge(edges, 1000, 0, 1000, 300); // W-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge W-F neighbours E-F"); // W-F neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-F neighbours Y-W"); // W-F neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 500)), Is.True, "Expected: edge W-F neighbours F-D"); // W-F neighbours F-D
        edge = FindEdge(edges, 1000, 300, 1000, 500); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge F-D neighbours C-D"); // F-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 1000, 300)), Is.True, "Expected: edge F-D neighbours E-F"); // F-D neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge F-D neighbours W-F"); // F-D neighbours W-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 700)), Is.True, "Expected: edge F-D neighbours D-B"); // F-D neighbours D-B
        edge = FindEdge(edges, 1000, 500, 1000, 700); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 500)), Is.True, "Expected: edge D-B neighbours C-D"); // D-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 500)), Is.True, "Expected: edge D-B neighbours F-D"); // D-B neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge D-B neighbours B-Z"); // D-B neighbours B-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1000, 700)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 700)), Is.True, "Expected: edge B-Z neighbours D-B"); // B-Z neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsVerticalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsHorizontalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 500), // #1
            new VoronoiSite(600, 500), // #2
            new VoronoiSite(400, 500), // #3
            new VoronoiSite(200, 500), // #4
        };

        // 1000 Y--------------E---------C---------A--------------X
        //      |              |         |         |              |
        //  900 |              |         |         |              |
        //      |              |         |         |              |
        //  800 |              |         |         |              |
        //      |              |         |         |              |
        //  700 |              |         |         |              |
        //      |              |         |         |              |
        //  600 |              |         |         |              |
        //      |              |         |         |              |
        //  500 |         4    |    3    |    2    |    1         |
        //      |              |         |         |              |
        //  400 |              |         |         |              |
        //      |              |         |         |              |
        //  300 |              |         |         |              |
        //      |              |         |         |              |
        //  200 |              |         |         |              |
        //      |              |         |         |              |
        //  100 |              |         |         |              |
        //      |              |         |         |              |
        //    0 W--------------F---------D---------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1000, 500, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 300, 1000, 300, 0), Is.True, "Expected: has edge E-F"); // E-F
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 700, 1000, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 1000, 300, 1000), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge W-F"); // W-F
        Assume.That(HasEdge(edges, 300, 0, 500, 0), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 500, 0, 700, 0), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 1000, 700, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        edge = FindEdge(edges, 500, 1000, 500, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 500, 1000)), Is.True, "Expected: edge C-D neighbours A-C"); // C-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 300, 1000)), Is.True, "Expected: edge C-D neighbours C-E"); // C-D neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 500, 0)), Is.True, "Expected: edge C-D neighbours F-D"); // C-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge C-D neighbours D-B"); // C-D neighbours D-B
        edge = FindEdge(edges, 300, 1000, 300, 0); // E-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 300, 1000)), Is.True, "Expected: edge E-F neighbours C-E"); // E-F neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge E-F neighbours E-Y"); // E-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge E-F neighbours W-F"); // E-F neighbours W-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 500, 0)), Is.True, "Expected: edge E-F neighbours F-D"); // E-F neighbours F-D
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 500, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 700, 1000, 500, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge A-C neighbours C-D"); // A-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 300, 1000)), Is.True, "Expected: edge A-C neighbours C-E"); // A-C neighbours C-E
        edge = FindEdge(edges, 500, 1000, 300, 1000); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge C-E neighbours C-D"); // C-E neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge C-E neighbours E-F"); // C-E neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 500, 1000)), Is.True, "Expected: edge C-E neighbours A-C"); // C-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge C-E neighbours E-Y"); // C-E neighbours E-Y
        edge = FindEdge(edges, 300, 1000, 0, 1000); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge E-Y neighbours E-F"); // E-Y neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 300, 1000)), Is.True, "Expected: edge E-Y neighbours C-E"); // E-Y neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge E-Y neighbours Y-W"); // E-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours E-Y"); // Y-W neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge Y-W neighbours W-F"); // Y-W neighbours W-F
        edge = FindEdge(edges, 0, 0, 300, 0); // W-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge W-F neighbours E-F"); // W-F neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-F neighbours Y-W"); // W-F neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 500, 0)), Is.True, "Expected: edge W-F neighbours F-D"); // W-F neighbours F-D
        edge = FindEdge(edges, 300, 0, 500, 0); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge F-D neighbours C-D"); // F-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 300, 0)), Is.True, "Expected: edge F-D neighbours E-F"); // F-D neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge F-D neighbours W-F"); // F-D neighbours W-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge F-D neighbours D-B"); // F-D neighbours D-B
        edge = FindEdge(edges, 500, 0, 700, 0); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 0)), Is.True, "Expected: edge D-B neighbours C-D"); // D-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 500, 0)), Is.True, "Expected: edge D-B neighbours F-D"); // D-B neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge D-B neighbours B-Z"); // D-B neighbours B-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 700, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge B-Z neighbours D-B"); // B-Z neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
    }

    [Test]
    public void TwoDiagonalPointsAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 300), // #2
        };

        // 1000 X------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |              1                  ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                  2              |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-B neighbours B-X"); // Y-B neighbours B-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours Y-B"); // B-X neighbours Y-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 300), // #2
        };

        // 1000 A#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                  1              |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |              2                  '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 1000, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours B-X"); // Y-B neighbours B-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-X neighbours Y-B"); // B-X neighbours Y-B
    }

    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(600, 400), // #2
        };

        // 1000 X--------------------------------------#B---------Z
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |         1                  ,·'                  |
        //      |                          ,'                     |
        //  700 |                       ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 |             ,·'                                 |
        //      |           ,'                                    |
        //  400 |        ,·'                  2                   |
        //      |      ,'                                         |
        //  300 |   ,·'                                           |
        //      | ,'                                              |
        //  200 A'                                                |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 800, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 200, 800, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 0, 1000, 0, 200); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 0, 200, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge W-Z neighbours Z-B"); // W-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours W-Z"); // Z-B neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 800, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 800, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(400, 400), // #2
        };

        // 1000 Y---------A#--------------------------------------X
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                  1         |
        //      |                     ',                          |
        //  700 |                       '·,                       |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                                 '·,             |
        //      |                                    ',           |
        //  400 |                   2                  '·,        |
        //      |                                         ',      |
        //  300 |                                           '·,   |
        //      |                                              ', |
        //  200 |                                                'B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1000, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 200, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 1000, 200, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 200, 1000, 1000, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 1000, 1000, 200, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 200, 1000, 0, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge W-Z neighbours Z-B"); // W-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 200); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours W-Z"); // Z-B neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 1000, 200, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 200)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(400, 600), // #2
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                ,A
        //      |                                              ,' |
        //  700 |                                           ,·'   |
        //      |                                         ,'      |
        //  600 |                   2                  ,·'        |
        //      |                                    ,'           |
        //  500 |                                 ,·'             |
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'                       |
        //      |                     ,'                          |
        //  200 |                  ,·'                  1         |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 Z---------B#--------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 800, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 800), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 800, 200, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 1000, 0, 1000, 800); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge W-Z neighbours Z-B"); // W-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 200, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-B neighbours W-Z"); // Z-B neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 200, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 200, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoDiagonalPointsOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoDiagonalPointsOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(600, 600), // #2
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B,                                                |
        //      | ',                                              |
        //  700 |   '·,                                           |
        //      |      ',                                         |
        //  600 |        '·,                  2                   |
        //      |           ',                                    |
        //  500 |             '·,                                 |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |                       '·,                       |
        //      |                          ',                     |
        //  200 |         1                  '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 X--------------------------------------#A---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 0, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 800, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 0, 800, 0, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 800, 0, 0, 800); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 0, 0, 800, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 800, 0, 1000, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-Z"); // Y-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours Y-W"); // W-Z neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge W-Z neighbours Z-B"); // W-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 800); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours W-Z"); // Z-B neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 0, 800, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 800)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    [Test]
    public void TwoPointsAgainstCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 400), // #1
            new VoronoiSite(600, 800), // #2
        };

        // 1000 A#------------------------------------------------Y
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                  2                   |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |         1                  '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-A"); // Y-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 1000, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-X neighbours X-B"); // A-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-X neighbours Y-A"); // A-X neighbours Y-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-B neighbours A-X"); // X-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Y neighbours Y-A"); // B-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-A neighbours A-X"); // Y-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours B-Y"); // Y-A neighbours B-Y
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(800, 400), // #2
        };

        // 1000 X------------------------------------------------#A
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                   1                  ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                  2         |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 B#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-A"); // Y-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-X neighbours X-B"); // A-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-X neighbours Y-A"); // A-X neighbours Y-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours A-X"); // X-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        edge = FindEdge(edges, 0, 0, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours Y-A"); // B-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-A neighbours A-X"); // Y-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-A neighbours B-Y"); // Y-A neighbours B-Y
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(400, 200), // #2
        };

        // 1000 B#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                  1         |
        //      |                     ',                          |
        //  500 |                       '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                   2                  '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-A"); // Y-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-X neighbours X-B"); // A-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-X neighbours Y-A"); // A-X neighbours Y-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-B neighbours A-X"); // X-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        edge = FindEdge(edges, 0, 1000, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-Y neighbours Y-A"); // B-Y neighbours Y-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours A-X"); // Y-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-A neighbours B-Y"); // Y-A neighbours B-Y
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(200, 600), // #2
        };

        // 1000 Y------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |         2                  ,·'                  |
        //      |                          ,'                     |
        //  500 |                       ,·'                       |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                  1                   |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 A#------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(5), "Expected: edge count 5");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-A"); // Y-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-X neighbours X-B"); // A-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-X neighbours Y-A"); // A-X neighbours Y-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours A-X"); // X-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours Y-A"); // B-Y neighbours Y-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-A neighbours A-X"); // Y-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-A neighbours B-Y"); // Y-A neighbours B-Y
    }

    [Test]
    public void TwoPointsAgainstCornerSlanted()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 900), // #2
        };

        // 1000 A##-----------------------------------------------Z
        //      |  ''·,,                                          |
        //  900 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  800 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  700 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  600 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  500 |                        1                      ''B
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 1000, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 300), // #2
        };

        // 1000 X-------------------------------------------------A
        //      |                                                '|
        //  900 |                                              ,' |
        //      |                                             ,   |
        //  800 |                                            ·    |
        //      |                                           '     |
        //  700 |                                         ,'      |
        //      |                                        ,        |
        //  600 |                                       ·         |
        //      |                                      '          |
        //  500 |                        1           ,'           |
        //      |                                   ,             |
        //  400 |                                  ·              |
        //      |                                 '               |
        //  300 |                               ,'           2    |
        //      |                              ,                  |
        //  200 |                             ·                   |
        //      |                            '                    |
        //  100 |                          ,'                     |
        //      |                         ,                       |
        //    0 Y------------------------B------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 500, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 500, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 500, 0, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 100), // #2
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 B,,                      1                        |
        //      |  ''·,,                                          |
        //  400 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //    0 Z-----------------------------------------------##A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 0, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 0, 1000, 0, 500); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 0, 500, 0, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 700), // #2
        };

        // 1000 Z------------------------B------------------------Y
        //      |                       '                         |
        //  900 |                     ,'                          |
        //      |                    ,                            |
        //  800 |                   ·                             |
        //      |                  '                              |
        //  700 |    2           ,'                               |
        //      |               ,                                 |
        //  600 |              ·                                  |
        //      |             '                                   |
        //  500 |           ,'           1                        |
        //      |          ,                                      |
        //  400 |         ·                                       |
        //      |        '                                        |
        //  300 |      ,'                                         |
        //      |     ,                                           |
        //  200 |    ·                                            |
        //      |   '                                             |
        //  100 | ,'                                              |
        //      |,                                                |
        //    0 A-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 500, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 0, 0, 1000, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 500, 1000, 0, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 900), // #2
        };

        // 1000 Z-----------------------------------------------##A
        //      |                                          ,,·''  |
        //  900 |              2                      ,,·''       |
        //      |                                ,,·''            |
        //  800 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  700 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  600 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  500 B''                      1                        |
        //      |                                                 |
        //  400 |                                                 |
        //      |                                                 |
        //  300 |                                                 |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 500, 0, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 0, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 0, 500); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 0, 500, 0, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(900, 700), // #2
        };

        // 1000 Y------------------------B------------------------Z
        //      |                         '                       |
        //  900 |                          ',                     |
        //      |                            ,                    |
        //  800 |                             ·                   |
        //      |                              '                  |
        //  700 |                               ',           2    |
        //      |                                 ,               |
        //  600 |                                  ·              |
        //      |                                   '             |
        //  500 |                        1           ',           |
        //      |                                      ,          |
        //  400 |                                       ·         |
        //      |                                        '        |
        //  300 |                                         ',      |
        //      |                                           ,     |
        //  200 |                                            ·    |
        //      |                                             '   |
        //  100 |                                              ', |
        //      |                                                ,|
        //    0 X-------------------------------------------------A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 500, 1000), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 500, 1000, 1000, 1000), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 500, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 0, 0); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 0, 0, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 0, 1000, 500, 1000); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 500, 1000, 1000, 1000); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 100), // #2
        };

        // 1000 X-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                 |
        //      |                                                 |
        //  600 |                                                 |
        //      |                                                 |
        //  500 |                        1                      ,,B
        //      |                                          ,,·''  |
        //  400 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                      2              |
        //      |  ,,·''                                          |
        //    0 A##-----------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 500), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1000, 500, 1000, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 1000, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 0, 0, 0, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 1000, 1000, 1000, 500); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 1000, 500, 1000, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 1000, 0, 0, 0); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="TwoPointsAgainstCornerSlanted"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void TwoPointsAgainstCornerSlanted_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(100, 300), // #2
        };

        // 1000 A-------------------------------------------------X
        //      |'                                                |
        //  900 | ',                                              |
        //      |   ,                                             |
        //  800 |    ·                                            |
        //      |     '                                           |
        //  700 |      ',                                         |
        //      |        ,                                        |
        //  600 |         ·                                       |
        //      |          '                                      |
        //  500 |           ',           1                        |
        //      |             ,                                   |
        //  400 |              ·                                  |
        //      |               '                                 |
        //  300 |    2           ',                               |
        //      |                  ,                              |
        //  200 |                   ·                             |
        //      |                    '                            |
        //  100 |                     ',                          |
        //      |                       ,                         |
        //    0 Z------------------------B------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(6), "Expected: edge count 6");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge A-X"); // A-X
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 500, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 500, 0, 0, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge Z-A"); // Z-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 500, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge A-X neighbours X-Y"); // A-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours A-X"); // X-Y neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        edge = FindEdge(edges, 1000, 0, 500, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge Y-B neighbours B-Z"); // Y-B neighbours B-Z
        edge = FindEdge(edges, 500, 0, 0, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge B-Z neighbours Y-B"); // B-Z neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge B-Z neighbours Z-A"); // B-Z neighbours Z-A
        edge = FindEdge(edges, 0, 0, 0, 1000); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge Z-A neighbours B-Z"); // Z-A neighbours B-Z
    }

    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(800, 200), // #3
        };

        // 1000 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  900 |                            ,·'                  |
        //      |                          ,'                     |
        //  800 |         1             ,·'                       |
        //      |                     ,'                          |
        //  700 |                  ,·'                           ,C
        //      |                ,'                            ,' |
        //  600 |             ,·'                           ,·'   |
        //      |           ,'                            ,'      |
        //  500 |        ,·'             2             ,·'        |
        //      |      ,'                            ,'           |
        //  400 |   ,·'                           ,·'             |
        //      | ,'                            ,'                |
        //  300 A'                           ,·'                  |
        //      |                          ,'                     |
        //  200 |                       ,·'             3         |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 Y--------------B#---------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 300, 700, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 0, 1000, 700), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 300), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 300, 0, 1000, 0), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 700), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 300, 700, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-D neighbours A-Y"); // A-D neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 300, 0, 1000, 700); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours B-W"); // B-C neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge B-C neighbours W-C"); // B-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 0, 1000, 0, 300); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 0, 300, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: edge A-Y neighbours A-D"); // A-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 300, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 300, 0, 1000, 0); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: edge B-W neighbours B-C"); // B-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge B-W neighbours W-C"); // B-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 1000, 700); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: edge W-C neighbours B-C"); // W-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours B-W"); // W-C neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 700)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 700, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 700, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(200, 200), // #3
        };

        // 1000 Y--------------A#---------------------------------X
        //      |                ',                               |
        //  900 |                  '·,                            |
        //      |                     ',                          |
        //  800 |                       '·,             1         |
        //      |                          ',                     |
        //  700 B,                           '·,                  |
        //      | ',                            ',                |
        //  600 |   '·,                           '·,             |
        //      |      ',                            ',           |
        //  500 |        '·,             2             '·,        |
        //      |           ',                            ',      |
        //  400 |             '·,                           '·,   |
        //      |                ',                            ', |
        //  300 |                  '·,                           'D
        //      |                     ',                          |
        //  200 |         3             '·,                       |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 W---------------------------------#C--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 1000, 1000, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 700, 700, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 1000, 300, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 0, 0, 700, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 300, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 1000, 1000, 300); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours A-Y"); // A-D neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 700, 700, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge B-C neighbours B-W"); // B-C neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge B-C neighbours W-C"); // B-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 1000, 1000, 300, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 300, 1000, 0, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: edge A-Y neighbours A-D"); // A-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 0, 1000, 0, 700); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 0, 700, 0, 0); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: edge B-W neighbours B-C"); // B-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge B-W neighbours W-C"); // B-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 700, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: edge W-C neighbours B-C"); // W-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge W-C neighbours B-W"); // W-C neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 700, 0)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 1000, 300, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 300)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
        };

        // 1000 X----------------------------#D------------------#C
        //      |                          ,'                  ,' |
        //  900 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  800 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  700 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  600 |        ,·'        2        ,·'                  |
        //      |      ,'                  ,'                     |
        //  500 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //  400 A'                 ,·'        3                   |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 B#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 600, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 400, 600, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 1000, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours B-Y"); // B-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours Y-C"); // B-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 0, 1000, 0, 400); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 0, 400, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 0, 0, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours B-C"); // B-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours B-C"); // Y-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge Y-C neighbours C-D"); // Y-C neighbours C-D
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-D neighbours Y-C"); // C-D neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 600, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
        };

        // 1000 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  900 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  800 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  700 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  600 |                  '·,        2        '·,        |
        //      |                     ',                  ',      |
        //  500 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //  400 |                   3        '·,                 'D
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 Y------------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 1000, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 1000, 1000, 400); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 1000, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-C neighbours B-Y"); // B-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours Y-C"); // B-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 400, 1000, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 0, 1000, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge B-Y neighbours B-C"); // B-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge Y-C neighbours B-C"); // Y-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge Y-C neighbours C-D"); // Y-C neighbours C-D
        edge = FindEdge(edges, 1000, 0, 1000, 400); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-D neighbours Y-C"); // C-D neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 200), // #1
            new VoronoiSite(600, 400), // #2
            new VoronoiSite(400, 600), // #3
        };

        // 1000 Y------------------------------------------------#B
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                   3        ,·'                 ,A
        //      |                          ,'                  ,' |
        //  500 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  400 |                  ,·'        2        ,·'        |
        //      |                ,'                  ,'           |
        //  300 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  200 |        ,·'                 ,·'        1         |
        //      |      ,'                  ,'                     |
        //  100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //    0 C#------------------D#----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 600, 400, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 600, 400, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 0, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours B-Y"); // B-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-C neighbours Y-C"); // B-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 1000, 0, 1000, 600); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours B-C"); // B-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-C"); // Y-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge Y-C neighbours C-D"); // Y-C neighbours C-D
        edge = FindEdge(edges, 0, 0, 400, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 0)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-D neighbours Y-C"); // C-D neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 400, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 400, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreeConcentricPointsDiagonalOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreeConcentricPointsDiagonalOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 200), // #1
            new VoronoiSite(400, 400), // #2
            new VoronoiSite(600, 600), // #3
        };

        // 1000 C#------------------------------------------------Y
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 D,                 '·,        3                   |
        //      | ',                  ',                          |
        //  500 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  400 |        '·,        2        '·,                  |
        //      |           ',                  ',                |
        //  300 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  200 |         1        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //    0 X----------------------------#A------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 0, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 0, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 0, 0, 600); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 0, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours B-Y"); // B-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours Y-C"); // B-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 0, 0, 600, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge X-A neighbours D-X"); // X-A neighbours D-X
        edge = FindEdge(edges, 600, 0, 1000, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge B-Y neighbours B-C"); // B-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge Y-C neighbours B-C"); // Y-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge Y-C neighbours C-D"); // Y-C neighbours C-D
        edge = FindEdge(edges, 0, 1000, 0, 600); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 1000)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-D neighbours Y-C"); // C-D neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 0, 600, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 600)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-X neighbours X-A"); // D-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
    }

    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(400, 600), // #2
            new VoronoiSite(600, 400), // #3
            new VoronoiSite(800, 200), // #4
        };

        // 1000 X----------------------------#F------------------#E
        //      |                          ,'                  ,' |
        //  900 |                       ,·'                 ,·'   |
        //      |                     ,'                  ,'      |
        //  800 |         1        ,·'                 ,·'        |
        //      |                ,'                  ,'           |
        //  700 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  600 |        ,·'        2        ,·'                 ,D
        //      |      ,'                  ,'                  ,' |
        //  500 |   ,·'                 ,·'                 ,·'   |
        //      | ,'                  ,'                  ,'      |
        //  400 A'                 ,·'        3        ,·'        |
        //      |                ,'                  ,'           |
        //  300 |             ,·'                 ,·'             |
        //      |           ,'                  ,'                |
        //  200 |        ,·'                 ,·'        4         |
        //      |      ,'                  ,'                     |
        //  100 |   ,·'                 ,·'                       |
        //      | ,'                  ,'                          |
        //    0 B#------------------C#----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(11), "Expected: edge count 11");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 400, 600, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 0, 1000, 1000), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 400, 0, 1000, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge D-E"); // D-E
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge E-F"); // E-F
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge F-X"); // F-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 400, 600, 1000); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-F neighbours X-A"); // A-F neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-F neighbours E-F"); // A-F neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-F neighbours F-X"); // A-F neighbours F-X
        edge = FindEdge(edges, 0, 0, 1000, 1000); // B-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge B-E neighbours A-B"); // B-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-E neighbours B-C"); // B-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge B-E neighbours D-E"); // B-E neighbours D-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-E neighbours E-F"); // B-E neighbours E-F
        edge = FindEdge(edges, 400, 0, 1000, 600); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge C-D neighbours C-Y"); // C-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge C-D neighbours Y-D"); // C-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge C-D neighbours D-E"); // C-D neighbours D-E
        edge = FindEdge(edges, 0, 1000, 0, 400); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge X-A neighbours A-F"); // X-A neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours F-X"); // X-A neighbours F-X
        edge = FindEdge(edges, 0, 400, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-E"); // A-B neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 0, 0, 400, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours B-E"); // B-C neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 400, 0, 1000, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: edge C-Y neighbours C-D"); // C-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 0, 1000, 600); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: edge Y-D neighbours C-D"); // Y-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours D-E"); // Y-D neighbours D-E
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // D-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge D-E neighbours B-E"); // D-E neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 600)), Is.True, "Expected: edge D-E neighbours C-D"); // D-E neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge D-E neighbours Y-D"); // D-E neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge D-E neighbours E-F"); // D-E neighbours E-F
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // E-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge E-F neighbours A-F"); // E-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 1000)), Is.True, "Expected: edge E-F neighbours B-E"); // E-F neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge E-F neighbours D-E"); // E-F neighbours D-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge E-F neighbours F-X"); // E-F neighbours F-X
        edge = FindEdge(edges, 600, 1000, 0, 1000); // F-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 600, 1000)), Is.True, "Expected: edge F-X neighbours A-F"); // F-X neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge F-X neighbours X-A"); // F-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge F-X neighbours E-F"); // F-X neighbours E-F
    }

    /// <summary>
    /// This test basically repeats <see cref="FourConcentricPointsDiagonalAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourConcentricPointsDiagonalAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(600, 600), // #2
            new VoronoiSite(400, 400), // #3
            new VoronoiSite(200, 200), // #4
        };

        // 1000 B#------------------A#----------------------------X
        //      | ',                  ',                          |
        //  900 |   '·,                 '·,                       |
        //      |      ',                  ',                     |
        //  800 |        '·,                 '·,        1         |
        //      |           ',                  ',                |
        //  700 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  600 C,                 '·,        2        '·,        |
        //      | ',                  ',                  ',      |
        //  500 |   '·,                 '·,                 '·,   |
        //      |      ',                  ',                  ', |
        //  400 |        '·,        3        '·,                 'F
        //      |           ',                  ',                |
        //  300 |             '·,                 '·,             |
        //      |                ',                  ',           |
        //  200 |         4        '·,                 '·,        |
        //      |                     ',                  ',      |
        //  100 |                       '·,                 '·,   |
        //      |                          ',                  ', |
        //    0 Y----------------------------#D------------------#E
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(11), "Expected: edge count 11");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 1000, 1000, 400), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 0, 1000, 1000, 0), Is.True, "Expected: has edge B-E"); // B-E
        Assume.That(HasEdge(edges, 0, 600, 600, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge D-E"); // D-E
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge E-F"); // E-F
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge F-X"); // F-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 1000, 1000, 400); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-F neighbours X-A"); // A-F neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-F neighbours E-F"); // A-F neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-F neighbours F-X"); // A-F neighbours F-X
        edge = FindEdge(edges, 0, 1000, 1000, 0); // B-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge B-E neighbours A-B"); // B-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-E neighbours B-C"); // B-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge B-E neighbours D-E"); // B-E neighbours D-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-E neighbours E-F"); // B-E neighbours E-F
        edge = FindEdge(edges, 0, 600, 600, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge C-D neighbours C-Y"); // C-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-D neighbours Y-D"); // C-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge C-D neighbours D-E"); // C-D neighbours D-E
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge X-A neighbours A-F"); // X-A neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge X-A neighbours F-X"); // X-A neighbours F-X
        edge = FindEdge(edges, 400, 1000, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-E"); // A-B neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 0, 1000, 0, 600); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge B-C neighbours B-E"); // B-C neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 0, 600, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: edge C-Y neighbours C-D"); // C-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 600, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: edge Y-D neighbours C-D"); // Y-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-E"); // Y-D neighbours D-E
        edge = FindEdge(edges, 600, 0, 1000, 0); // D-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge D-E neighbours B-E"); // D-E neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 600, 0)), Is.True, "Expected: edge D-E neighbours C-D"); // D-E neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-E neighbours Y-D"); // D-E neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge D-E neighbours E-F"); // D-E neighbours E-F
        edge = FindEdge(edges, 1000, 0, 1000, 400); // E-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge E-F neighbours A-F"); // E-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 0)), Is.True, "Expected: edge E-F neighbours B-E"); // E-F neighbours B-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge E-F neighbours D-E"); // E-F neighbours D-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge E-F neighbours F-X"); // E-F neighbours F-X
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // F-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 400)), Is.True, "Expected: edge F-X neighbours A-F"); // F-X neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge F-X neighbours X-A"); // F-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge F-X neighbours E-F"); // F-X neighbours E-F
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 X------------------------------------------------#D
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                                 ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 |              1        ,·'                       |
        //      |                     ,'                          |
        //  400 B-------------------A'                            |
        //      |                   |                             |
        //  300 |              2    |    3                        |
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 Y-------------------C-----------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 400, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 1000, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 400, 0, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 400, 400, 400, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 400, 400, 1000, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 400); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 400, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 400)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 400, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 400, 0, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 0)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-W neighbours W-D"); // C-W neighbours W-D
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge W-D neighbours C-W"); // W-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-D neighbours D-X"); // W-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge D-X neighbours W-D"); // D-X neighbours W-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 Y-------------------B-----------------------------X
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |              2    |    1                        |
        //      |                   |                             |
        //  600 C-------------------A,                            |
        //      |                     ',                          |
        //  500 |              3        '·,                       |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                                 '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 W------------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 400, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 600, 400, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 400, 600, 0, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 400, 600, 1000, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 400, 1000, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 0, 600); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 0, 600, 0, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 600)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-W neighbours W-D"); // C-W neighbours W-D
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge W-D neighbours C-W"); // W-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-D neighbours D-X"); // W-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge D-X neighbours W-D"); // D-X neighbours W-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 W-----------------------------C-------------------Y
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 |                        3    |    2              |
        //      |                             |                   |
        //  600 |                            ,A-------------------B
        //      |                          ,'                     |
        //  500 |                       ,·'        1              |
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'                                 |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 D#------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 600, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 0, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 600, 1000, 600); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 600, 600, 600, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 600, 600, 0, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 600); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 600)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 600, 1000, 0, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 1000)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-W neighbours W-D"); // C-W neighbours W-D
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge W-D neighbours C-W"); // W-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-D neighbours D-X"); // W-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge D-X neighbours W-D"); // D-X neighbours W-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 D#------------------------------------------------W
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,                                 |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |                       '·,        3              |
        //      |                          ',                     |
        //  400 |                            'A-------------------C
        //      |                             |                   |
        //  300 |                        1    |    2              |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 X-----------------------------B-------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 600, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 1000, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 0, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 400, 600, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 600, 400, 1000, 400); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 600, 400, 0, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 600, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 600, 0, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 1000, 400); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 400)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-W neighbours W-D"); // C-W neighbours W-D
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge W-D neighbours C-W"); // W-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-D neighbours D-X"); // W-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-X neighbours W-D"); // D-X neighbours W-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(100, 400), // #2
            new VoronoiSite(500, 400), // #3
        };

        // 1000 X---------------------------------#D--------------Z
        //      |                               ,'                |
        //  900 |                            ,·'                  |
        //      |                          ,'                     |
        //  800 |    1                  ,·'                       |
        //      |                     ,'                          |
        //  700 |                  ,·'                            |
        //      |                ,'                               |
        //  600 B--------------A'                                 |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 |    2         |         3                        |
        //      |              |                                  |
        //  300 |              |                                  |
        //      |              |                                  |
        //  200 |              |                                  |
        //      |              |                                  |
        //  100 |              |                                  |
        //      |              |                                  |
        //    0 Y--------------C----------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 600, 0, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 600, 300, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 600, 700, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 300, 0, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 600, 0, 600); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 300, 600, 300, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 300, 600, 700, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 600); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 600, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 0, 600)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 300, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 300, 0, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 300, 0)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 700, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 600, 700, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 900), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 500), // #3
        };

        // 1000 Y-----------------------------B-------------------X
        //      |                             |                   |
        //  900 |                   2         |         1         |
        //      |                             |                   |
        //  800 |                             |                   |
        //      |                             |                   |
        //  700 C-----------------------------A,                  |
        //      |                               ',                |
        //  600 |                                 '·,             |
        //      |                                    ',           |
        //  500 |                   3                  '·,        |
        //      |                                         ',      |
        //  400 |                                           '·,   |
        //      |                                              ', |
        //  300 |                                                'D
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 700, 600, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 700, 0, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 700, 1000, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 300, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 700, 600, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 600, 700, 0, 700); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 600, 700, 1000, 300); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 600, 1000, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 600, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 0, 700); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 0, 700, 0, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 0, 700)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 1000, 300, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 700, 1000, 300)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 200), // #1
            new VoronoiSite(900, 600), // #2
            new VoronoiSite(500, 600), // #3
        };

        // 1000 W----------------------------------C--------------Y
        //      |                                  |              |
        //  900 |                                  |              |
        //      |                                  |              |
        //  800 |                                  |              |
        //      |                                  |              |
        //  700 |                                  |              |
        //      |                                  |              |
        //  600 |                        3         |         2    |
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                                 ,A--------------B
        //      |                               ,'                |
        //  300 |                            ,·'                  |
        //      |                          ,'                     |
        //  200 |                       ,·'                  1    |
        //      |                     ,'                          |
        //  100 |                  ,·'                            |
        //      |                ,'                               |
        //    0 Z--------------D#---------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 400, 1000, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 400, 700, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 400, 300, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 300, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 400, 1000, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 700, 400, 700, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 700, 400, 300, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 400); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 1000, 400)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 700, 1000, 0, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 700, 1000)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 0, 300, 0); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 300, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 400, 300, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 100), // #1
            new VoronoiSite(600, 100), // #2
            new VoronoiSite(600, 500), // #3
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 D,                                                |
        //      | ',                                              |
        //  600 |   '·,                                           |
        //      |      ',                                         |
        //  500 |        '·,                  3                   |
        //      |           ',                                    |
        //  400 |             '·,                                 |
        //      |                ',                               |
        //  300 |                  'A-----------------------------C
        //      |                   |                             |
        //  200 |                   |                             |
        //      |                   |                             |
        //  100 |         1         |         2                   |
        //      |                   |                             |
        //    0 X-------------------B-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 300, 400, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 300, 1000, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 300, 0, 700), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 300, 1000, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 300, 400, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 400, 300, 1000, 300); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 400, 300, 0, 700); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 400, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 400, 0, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 400, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 1000, 300, 1000, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 1000, 300)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 1000, 0, 700); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 0, 700, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 300, 0, 700)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 800), // #1
            new VoronoiSite(900, 400), // #2
            new VoronoiSite(500, 400), // #3
        };

        // 1000 Z--------------D#---------------------------------X
        //      |                ',                               |
        //  900 |                  '·,                            |
        //      |                     ',                          |
        //  800 |                       '·,                  1    |
        //      |                          ',                     |
        //  700 |                            '·,                  |
        //      |                               ',                |
        //  600 |                                 'A--------------B
        //      |                                  |              |
        //  500 |                                  |              |
        //      |                                  |              |
        //  400 |                        3         |         2    |
        //      |                                  |              |
        //  300 |                                  |              |
        //      |                                  |              |
        //  200 |                                  |              |
        //      |                                  |              |
        //  100 |                                  |              |
        //      |                                  |              |
        //    0 W----------------------------------C--------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 600, 1000, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 600, 700, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 600, 300, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 600), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 600, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 700, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 700, 0, 0, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 300, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 300, 1000, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 600, 1000, 600); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 700, 600, 700, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 700, 600, 300, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 1000, 600); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 600, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 1000, 600)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 700, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 700, 0, 0, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 700, 0)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 1000, 300, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 300, 1000, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 600, 300, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(400, 100), // #2
            new VoronoiSite(400, 500), // #3
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                 |
        //      |                                                 |
        //  700 |                                                ,D
        //      |                                              ,' |
        //  600 |                                           ,·'   |
        //      |                                         ,'      |
        //  500 |                   3                  ,·'        |
        //      |                                    ,'           |
        //  400 |                                 ,·'             |
        //      |                               ,'                |
        //  300 C-----------------------------A'                  |
        //      |                             |                   |
        //  200 |                             |                   |
        //      |                             |                   |
        //  100 |                   2         |         1         |
        //      |                             |                   |
        //    0 Y-----------------------------B-------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 300, 600, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 300, 0, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 300, 1000, 700), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 600, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 600, 0, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 300), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 300, 0, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 700), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 700, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 300, 600, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 600, 300, 0, 300); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 600, 300, 1000, 700); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 600, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 600, 0, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 600, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 0, 300); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 0, 300, 0, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 0, 300)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 1000, 700); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 1000, 700, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 300, 1000, 700)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 200), // #1
            new VoronoiSite(100, 600), // #2
            new VoronoiSite(500, 600), // #3
        };

        // 1000 Y--------------C----------------------------------W
        //      |              |                                  |
        //  900 |              |                                  |
        //      |              |                                  |
        //  800 |              |                                  |
        //      |              |                                  |
        //  700 |              |                                  |
        //      |              |                                  |
        //  600 |    2         |         3                        |
        //      |              |                                  |
        //  500 |              |                                  |
        //      |              |                                  |
        //  400 B--------------A,                                 |
        //      |                ',                               |
        //  300 |                  '·,                            |
        //      |                     ',                          |
        //  200 |    1                  '·,                       |
        //      |                          ',                     |
        //  100 |                            '·,                  |
        //      |                               ',                |
        //    0 X---------------------------------#D--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 400, 0, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 400, 300, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 400, 700, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 0, 400), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 400, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 300, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 300, 1000, 1000, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 700, 0), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 700, 0, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 400, 0, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 300, 400, 300, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 300, 400, 700, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 0, 400); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 400, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 0, 400)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 300, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 300, 1000, 1000, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 300, 1000)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 700, 0); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 700, 0, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 400, 700, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsCornerOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsCornerOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 900), // #1
            new VoronoiSite(600, 900), // #2
            new VoronoiSite(600, 500), // #3
        };

        // 1000 X-------------------B-----------------------------Y
        //      |                   |                             |
        //  900 |         1         |         2                   |
        //      |                   |                             |
        //  800 |                   |                             |
        //      |                   |                             |
        //  700 |                  ,A-----------------------------C
        //      |                ,'                               |
        //  600 |             ,·'                                 |
        //      |           ,'                                    |
        //  500 |        ,·'                  3                   |
        //      |      ,'                                         |
        //  400 |   ,·'                                           |
        //      | ,'                                              |
        //  300 D'                                                |
        //      |                                                 |
        //  200 |                                                 |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 700, 400, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 700, 1000, 700), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 700, 0, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 400, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 400, 1000, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 700), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 700, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 0, 300), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 0, 300, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 700, 400, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 400, 700, 1000, 700); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 400, 700, 0, 300); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 400, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 400, 1000, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 400, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 1000, 700); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 1000, 700, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 1000, 700)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 0, 0, 300); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 0, 300, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 700, 0, 300)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 X------------------------D------------------------Y
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 B#-----------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 500, 1000, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 500, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-C"); // X-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-C neighbours X-B"); // B-C neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-D neighbours D-X"); // Y-D neighbours D-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge D-X neighbours Y-D"); // D-X neighbours Y-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 B#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        '·,                                      |
        //      |           ',                                    |
        //  700 |             '·,        3                        |
        //      |                ',                               |
        //  600 |                  '·,                            |
        //      |                     ',                          |
        //  500 |              1        #A------------------------D
        //      |                     ,'                          |
        //  400 |                  ,·'                            |
        //      |                ,'                               |
        //  300 |             ,·'        2                        |
        //      |           ,'                                    |
        //  200 |        ,·'                                      |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 C#------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 500, 0, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 1000, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-B neighbours B-C"); // X-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours X-B"); // B-C neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 0, 0, 1000, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours D-X"); // Y-D neighbours D-X
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-X neighbours Y-D"); // D-X neighbours Y-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 C#-----------------------------------------------#B
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'A'        3              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 1000, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 500, 0, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 500, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-C"); // X-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours X-B"); // B-C neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 0, 1000, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 500, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-X"); // Y-D neighbours D-X
        edge = FindEdge(edges, 500, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-X neighbours Y-D"); // D-X neighbours Y-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideAroundMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideAroundMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 Y------------------------------------------------#C
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                      ,·'        |
        //      |                                    ,'           |
        //  700 |                        2        ,·'             |
        //      |                               ,'                |
        //  600 |                            ,·'                  |
        //      |                          ,'                     |
        //  500 D------------------------A#        1              |
        //      |                          ',                     |
        //  400 |                            '·,                  |
        //      |                               ',                |
        //  300 |                        3        '·,             |
        //      |                                    ',           |
        //  200 |                                      '·,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 1000, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 500, 1000, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 0, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-C"); // X-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours X-B"); // B-C neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours C-Y"); // B-C neighbours C-Y
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-Y neighbours B-C"); // C-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 1000, 0, 500); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-D neighbours D-X"); // Y-D neighbours D-X
        edge = FindEdge(edges, 0, 500, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge D-X neighbours Y-D"); // D-X neighbours Y-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1000 X------------------------D------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 Y---------B#---------------------------#C---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 200, 0, 800, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 300, 200, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 300, 800, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 500, 300, 500, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours D-X"); // X-Y neighbours D-X
        edge = FindEdge(edges, 0, 0, 200, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        edge = FindEdge(edges, 200, 0, 800, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        edge = FindEdge(edges, 800, 0, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge D-X neighbours X-Y"); // D-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(300, 700), // #3
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B,                                                |
        //      | ',                                              |
        //  700 |   '·,        3                                  |
        //      |      ',                                         |
        //  600 |        '·,                                      |
        //      |           ',                                    |
        //  500 |    1        #A----------------------------------D
        //      |           ,'                                    |
        //  400 |        ,·'                                      |
        //      |      ,'                                         |
        //  300 |   ,·'        2                                  |
        //      | ,'                                              |
        //  200 C'                                                |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 W-------------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 800, 0, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 500, 0, 800); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 300, 500, 0, 200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 300, 500, 1000, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours D-X"); // X-Y neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 800); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        edge = FindEdge(edges, 0, 800, 0, 200); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        edge = FindEdge(edges, 0, 200, 0, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 0, 1000, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 1000, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-X neighbours X-Y"); // D-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1000 W---------C#---------------------------#B---------Y
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'A'        3              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Z------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 800, 1000, 200, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 700, 800, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 500, 700, 200, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 500, 700, 500, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours D-X"); // X-Y neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        edge = FindEdge(edges, 800, 1000, 200, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        edge = FindEdge(edges, 200, 1000, 0, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 0, 1000, 0, 0); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 0, 500, 0); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 500, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge D-X neighbours X-Y"); // D-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(700, 300), // #3
        };

        // 1000 Z-------------------------------------------------W
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                                ,C
        //      |                                              ,' |
        //  700 |                                  2        ,·'   |
        //      |                                         ,'      |
        //  600 |                                      ,·'        |
        //      |                                    ,'           |
        //  500 D----------------------------------A#        1    |
        //      |                                    ',           |
        //  400 |                                      '·,        |
        //      |                                         ',      |
        //  300 |                                  3        '·,   |
        //      |                                              ', |
        //  200 |                                                'B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1000, 200, 1000, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge W-Z"); // W-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 500, 1000, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-B neighbours Y-B"); // A-B neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 700, 500, 1000, 800); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-W"); // A-C neighbours C-W
        edge = FindEdge(edges, 700, 500, 0, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge X-Y neighbours Y-B"); // X-Y neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-Y neighbours D-X"); // X-Y neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 200); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge Y-B neighbours A-B"); // Y-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-B neighbours X-Y"); // Y-B neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge Y-B neighbours B-C"); // Y-B neighbours B-C
        edge = FindEdge(edges, 1000, 200, 1000, 800); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge B-C neighbours Y-B"); // B-C neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge C-W neighbours A-C"); // C-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-W neighbours W-Z"); // C-W neighbours W-Z
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // W-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge W-Z neighbours C-W"); // W-Z neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge W-Z neighbours Z-D"); // W-Z neighbours Z-D
        edge = FindEdge(edges, 0, 1000, 0, 500); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours W-Z"); // Z-D neighbours W-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 0, 500, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 0, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge D-X neighbours X-Y"); // D-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(300, 700), // #3
        };

        // 1000 X------------------------D------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              3        ,A,        2              |
        //      |                     ,'   ',                     |
        //  600 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 B'                                               'C
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 0, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 200, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 700, 0, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 500, 700, 1000, 200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 500, 700, 500, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 1000, 0, 200); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 0, 200, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 200)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-Y neighbours Y-W"); // B-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Y-W neighbours B-Y"); // Y-W neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 1000, 200); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 200, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 200)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 700), // #3
        };

        // 1000 Y---------B#--------------------------------------X
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                            |
        //      |                     ',                          |
        //  700 |                       '·,        3              |
        //      |                          ',                     |
        //  600 |                            '·,                  |
        //      |                               ',                |
        //  500 |                        1        #A--------------D
        //      |                               ,'                |
        //  400 |                            ,·'                  |
        //      |                          ,'                     |
        //  300 |                       ,·'        2              |
        //      |                     ,'                          |
        //  200 |                  ,·'                            |
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 W---------C#--------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 200, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 1000, 200, 1000), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 500, 200, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 700, 500, 200, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 700, 500, 1000, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 1000, 200, 1000); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 200, 1000, 0, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 1000)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-Y neighbours Y-W"); // B-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Y-W neighbours B-Y"); // Y-W neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 200, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 200, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 200, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
        };

        // 1000 W-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 C,                                               ,B
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  300 |              2        'A'        3              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Z------------------------D------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 1000, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 800), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 800, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 300, 1000, 800); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 500, 300, 0, 800); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 500, 300, 500, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 1000, 0, 1000, 800); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 800)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-Y neighbours Y-W"); // B-Y neighbours Y-W
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Y-W neighbours B-Y"); // Y-W neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 0, 1000, 0, 800); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 0, 800, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 800)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 0, 0, 500, 0); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 500, 0, 1000, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsInAWedgeTowardsSideOffsetIntoMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsInAWedgeTowardsSideOffsetIntoMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 300), // #3
        };

        // 1000 Z--------------------------------------#C---------W
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 |                            ,·'                  |
        //      |                          ,'                     |
        //  700 |              2        ,·'                       |
        //      |                     ,'                          |
        //  600 |                  ,·'                            |
        //      |                ,'                               |
        //  500 D--------------A#        1                        |
        //      |                ',                               |
        //  400 |                  '·,                            |
        //      |                     ',                          |
        //  300 |              3        '·,                       |
        //      |                          ',                     |
        //  200 |                            '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 X--------------------------------------#B---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 800, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 800, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 800, 0), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 800, 1000, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge D-X"); // D-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 500, 800, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        edge = FindEdge(edges, 300, 500, 800, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 300, 500, 0, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-D neighbours Z-D"); // A-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 0, 0, 800, 0); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-B neighbours D-X"); // X-B neighbours D-X
        edge = FindEdge(edges, 800, 0, 1000, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 0)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-Y neighbours Y-W"); // B-Y neighbours Y-W
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Y-W neighbours B-Y"); // Y-W neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 800, 1000, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 800, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Z neighbours Z-D"); // C-Z neighbours Z-D
        edge = FindEdge(edges, 0, 1000, 0, 500); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge Z-D neighbours A-D"); // Z-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours C-Z"); // Z-D neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Z-D neighbours D-X"); // Z-D neighbours D-X
        edge = FindEdge(edges, 0, 500, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge D-X neighbours X-B"); // D-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge D-X neighbours Z-D"); // D-X neighbours Z-D
    }

    [Test]
    public void FourPointsSurroundingAPointInMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 500), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1000 E#-----------------------------------------------#H
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  500 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  400 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 F#-----------------------------------------------#G
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 400, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 600, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 400, 600, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 600, 400, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 600, 0, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 400, 0, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 400, 1000, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 600, 1000, 1000), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge E-F"); // E-F
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge G-H"); // G-H
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge H-E"); // H-E

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 600, 400, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: edge A-B neighbours B-F"); // A-B neighbours B-F
        edge = FindEdge(edges, 400, 400, 600, 400); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: edge B-C neighbours B-F"); // B-C neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-G"); // B-C neighbours C-G
        edge = FindEdge(edges, 600, 400, 600, 600); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: edge C-D neighbours C-G"); // C-D neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: edge C-D neighbours D-H"); // C-D neighbours D-H
        edge = FindEdge(edges, 600, 600, 400, 600); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: edge D-A neighbours A-E"); // D-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: edge D-A neighbours D-H"); // D-A neighbours D-H
        edge = FindEdge(edges, 400, 600, 0, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: edge A-E neighbours D-A"); // A-E neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-E neighbours E-F"); // A-E neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours H-E"); // A-E neighbours H-E
        edge = FindEdge(edges, 400, 400, 0, 0); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 400, 400)), Is.True, "Expected: edge B-F neighbours A-B"); // B-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: edge B-F neighbours B-C"); // B-F neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-F neighbours E-F"); // B-F neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-F neighbours F-G"); // B-F neighbours F-G
        edge = FindEdge(edges, 600, 400, 1000, 0); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 400)), Is.True, "Expected: edge C-G neighbours B-C"); // C-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: edge C-G neighbours C-D"); // C-G neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-G neighbours F-G"); // C-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-G neighbours G-H"); // C-G neighbours G-H
        edge = FindEdge(edges, 600, 600, 1000, 1000); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 600, 600)), Is.True, "Expected: edge D-H neighbours C-D"); // D-H neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 600)), Is.True, "Expected: edge D-H neighbours D-A"); // D-H neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge D-H neighbours G-H"); // D-H neighbours G-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-H neighbours H-E"); // D-H neighbours H-E
        edge = FindEdge(edges, 0, 1000, 0, 0); // E-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: edge E-F neighbours A-E"); // E-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: edge E-F neighbours B-F"); // E-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge E-F neighbours F-G"); // E-F neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge E-F neighbours H-E"); // E-F neighbours H-E
        edge = FindEdge(edges, 0, 0, 1000, 0); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 0)), Is.True, "Expected: edge F-G neighbours B-F"); // F-G neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: edge F-G neighbours C-G"); // F-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge F-G neighbours E-F"); // F-G neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge F-G neighbours G-H"); // F-G neighbours G-H
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // G-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 0)), Is.True, "Expected: edge G-H neighbours C-G"); // G-H neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: edge G-H neighbours D-H"); // G-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge G-H neighbours F-G"); // G-H neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge G-H neighbours H-E"); // G-H neighbours H-E
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // H-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 1000)), Is.True, "Expected: edge H-E neighbours A-E"); // H-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 1000)), Is.True, "Expected: edge H-E neighbours D-H"); // H-E neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge H-E neighbours E-F"); // H-E neighbours E-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge H-E neighbours G-H"); // H-E neighbours G-H
    }

    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(500, 100), // #3
            new VoronoiSite(700, 300), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 X-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 E,                                               ,H
        //      | ',                                           ,' |
        //  700 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  600 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  500 |             '·,        5        ,·'             |
        //      |                ',             ,'                |
        //  400 |                  'A---------D'                  |
        //      |                   |         |                   |
        //  300 |              2    |    1    |    4              |
        //      |                   |         |                   |
        //  200 |                  ,B---------C,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //    0 Y---------F#---------------------------#G---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(16), "Expected: edge count 16");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 400, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 200, 600, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 200, 600, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 400, 400, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 400, 0, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 200, 200, 0), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 600, 200, 800, 0), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 400, 1000, 800), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 0, 800, 0, 0), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 200, 0, 800, 0), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge G-W"); // G-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 800), Is.True, "Expected: has edge W-H"); // W-H
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge H-Z"); // H-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 400, 400, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: edge A-B neighbours B-F"); // A-B neighbours B-F
        edge = FindEdge(edges, 400, 200, 600, 200); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: edge B-C neighbours B-F"); // B-C neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: edge B-C neighbours C-G"); // B-C neighbours C-G
        edge = FindEdge(edges, 600, 200, 600, 400); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: edge C-D neighbours C-G"); // C-D neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: edge C-D neighbours D-H"); // C-D neighbours D-H
        edge = FindEdge(edges, 600, 400, 400, 400); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: edge D-A neighbours A-E"); // D-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: edge D-A neighbours D-H"); // D-A neighbours D-H
        edge = FindEdge(edges, 400, 400, 0, 800); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: edge A-E neighbours D-A"); // A-E neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 400, 200, 200, 0); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 200)), Is.True, "Expected: edge B-F neighbours A-B"); // B-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: edge B-F neighbours B-C"); // B-F neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-F neighbours Y-F"); // B-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge B-F neighbours F-G"); // B-F neighbours F-G
        edge = FindEdge(edges, 600, 200, 800, 0); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 600, 200)), Is.True, "Expected: edge C-G neighbours B-C"); // C-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: edge C-G neighbours C-D"); // C-G neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge C-G neighbours F-G"); // C-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge C-G neighbours G-W"); // C-G neighbours G-W
        edge = FindEdge(edges, 600, 400, 1000, 800); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 600, 400)), Is.True, "Expected: edge D-H neighbours C-D"); // D-H neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 400)), Is.True, "Expected: edge D-H neighbours D-A"); // D-H neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge D-H neighbours W-H"); // D-H neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge D-H neighbours H-Z"); // D-H neighbours H-Z
        edge = FindEdge(edges, 0, 1000, 0, 800); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-E neighbours Z-X"); // X-E neighbours Z-X
        edge = FindEdge(edges, 0, 800, 0, 0); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 800)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 0, 0, 200, 0); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: edge Y-F neighbours B-F"); // Y-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 200, 0, 800, 0); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 200, 200, 0)), Is.True, "Expected: edge F-G neighbours B-F"); // F-G neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: edge F-G neighbours C-G"); // F-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge F-G neighbours G-W"); // F-G neighbours G-W
        edge = FindEdge(edges, 800, 0, 1000, 0); // G-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 200, 800, 0)), Is.True, "Expected: edge G-W neighbours C-G"); // G-W neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge G-W neighbours F-G"); // G-W neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge G-W neighbours W-H"); // G-W neighbours W-H
        edge = FindEdge(edges, 1000, 0, 1000, 800); // W-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: edge W-H neighbours D-H"); // W-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge W-H neighbours G-W"); // W-H neighbours G-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge W-H neighbours H-Z"); // W-H neighbours H-Z
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // H-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 800)), Is.True, "Expected: edge H-Z neighbours D-H"); // H-Z neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge H-Z neighbours W-H"); // H-Z neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge H-Z neighbours Z-X"); // H-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge Z-X neighbours X-E"); // Z-X neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Z-X neighbours H-Z"); // Z-X neighbours H-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(100, 500), // #3
            new VoronoiSite(300, 300), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 Y--------------------------------------#E---------X
        //      |                                    ,'           |
        //  900 |                                 ,·'             |
        //      |                               ,'                |
        //  800 F,                           ,·'                  |
        //      | ',                       ,'                     |
        //  700 |   '·,        2        ,·'                       |
        //      |      ',             ,'                          |
        //  600 |        'B---------A'                            |
        //      |         |         |                             |
        //  500 |    3    |    1    |    5                        |
        //      |         |         |                             |
        //  400 |        ,C---------D,                            |
        //      |      ,'             ',                          |
        //  300 |   ,·'        4        '·,                       |
        //      | ,'                       ',                     |
        //  200 G'                           '·,                  |
        //      |                               ',                |
        //  100 |                                 '·,             |
        //      |                                    ',           |
        //    0 W--------------------------------------#H---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(16), "Expected: edge count 16");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 200, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 600, 200, 400), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 400, 400, 400), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 400, 400, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 400, 600, 800, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 200, 600, 0, 800), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 200, 400, 0, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 400, 800, 0), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 800, 1000, 0, 1000), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 0, 800, 0, 200), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge G-W"); // G-W
        Assume.That(HasEdge(edges, 0, 0, 800, 0), Is.True, "Expected: has edge W-H"); // W-H
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge H-Z"); // H-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 600, 200, 600); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: edge A-B neighbours B-F"); // A-B neighbours B-F
        edge = FindEdge(edges, 200, 600, 200, 400); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: edge B-C neighbours B-F"); // B-C neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: edge B-C neighbours C-G"); // B-C neighbours C-G
        edge = FindEdge(edges, 200, 400, 400, 400); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: edge C-D neighbours C-G"); // C-D neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: edge C-D neighbours D-H"); // C-D neighbours D-H
        edge = FindEdge(edges, 400, 400, 400, 600); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: edge D-A neighbours A-E"); // D-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: edge D-A neighbours D-H"); // D-A neighbours D-H
        edge = FindEdge(edges, 400, 600, 800, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: edge A-E neighbours D-A"); // A-E neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 200, 600, 0, 800); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 600)), Is.True, "Expected: edge B-F neighbours A-B"); // B-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: edge B-F neighbours B-C"); // B-F neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge B-F neighbours Y-F"); // B-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge B-F neighbours F-G"); // B-F neighbours F-G
        edge = FindEdge(edges, 200, 400, 0, 200); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 200, 400)), Is.True, "Expected: edge C-G neighbours B-C"); // C-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: edge C-G neighbours C-D"); // C-G neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge C-G neighbours F-G"); // C-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge C-G neighbours G-W"); // C-G neighbours G-W
        edge = FindEdge(edges, 400, 400, 800, 0); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 400, 400)), Is.True, "Expected: edge D-H neighbours C-D"); // D-H neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 400, 600)), Is.True, "Expected: edge D-H neighbours D-A"); // D-H neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge D-H neighbours W-H"); // D-H neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge D-H neighbours H-Z"); // D-H neighbours H-Z
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-E neighbours Z-X"); // X-E neighbours Z-X
        edge = FindEdge(edges, 800, 1000, 0, 1000); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 800, 1000)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 0, 1000, 0, 800); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: edge Y-F neighbours B-F"); // Y-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 0, 800, 0, 200); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 600, 0, 800)), Is.True, "Expected: edge F-G neighbours B-F"); // F-G neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: edge F-G neighbours C-G"); // F-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge F-G neighbours G-W"); // F-G neighbours G-W
        edge = FindEdge(edges, 0, 200, 0, 0); // G-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 400, 0, 200)), Is.True, "Expected: edge G-W neighbours C-G"); // G-W neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge G-W neighbours F-G"); // G-W neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge G-W neighbours W-H"); // G-W neighbours W-H
        edge = FindEdge(edges, 0, 0, 800, 0); // W-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: edge W-H neighbours D-H"); // W-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge W-H neighbours G-W"); // W-H neighbours G-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge W-H neighbours H-Z"); // W-H neighbours H-Z
        edge = FindEdge(edges, 800, 0, 1000, 0); // H-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 800, 0)), Is.True, "Expected: edge H-Z neighbours D-H"); // H-Z neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge H-Z neighbours W-H"); // H-Z neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge H-Z neighbours Z-X"); // H-Z neighbours Z-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge Z-X neighbours X-E"); // Z-X neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Z-X neighbours H-Z"); // Z-X neighbours H-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(500, 900), // #3
            new VoronoiSite(300, 700), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 W---------G#---------------------------#F---------Y
        //      |           ',                       ,'           |
        //  900 |             '·,        3        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  'C---------B'                  |
        //      |                   |         |                   |
        //  700 |              4    |    1    |    2              |
        //      |                   |         |                   |
        //  600 |                  ,D---------A,                  |
        //      |                ,'             ',                |
        //  500 |             ,·'        5        '·,             |
        //      |           ,'                       ',           |
        //  400 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  300 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  200 H'                                               'E
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(16), "Expected: edge count 16");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 600, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 800, 400, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 400, 800, 400, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 400, 600, 600, 600), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 600, 1000, 200), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 800, 800, 1000), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 400, 800, 200, 1000), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 400, 600, 0, 200), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 1000, 200, 1000, 1000), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 800, 1000, 200, 1000), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge G-W"); // G-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge W-H"); // W-H
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge H-Z"); // H-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 600, 600, 800); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: edge A-B neighbours B-F"); // A-B neighbours B-F
        edge = FindEdge(edges, 600, 800, 400, 800); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: edge B-C neighbours B-F"); // B-C neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: edge B-C neighbours C-G"); // B-C neighbours C-G
        edge = FindEdge(edges, 400, 800, 400, 600); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: edge C-D neighbours C-G"); // C-D neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: edge C-D neighbours D-H"); // C-D neighbours D-H
        edge = FindEdge(edges, 400, 600, 600, 600); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: edge D-A neighbours A-E"); // D-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: edge D-A neighbours D-H"); // D-A neighbours D-H
        edge = FindEdge(edges, 600, 600, 1000, 200); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: edge A-E neighbours D-A"); // A-E neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 600, 800, 800, 1000); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 800)), Is.True, "Expected: edge B-F neighbours A-B"); // B-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: edge B-F neighbours B-C"); // B-F neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge B-F neighbours Y-F"); // B-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge B-F neighbours F-G"); // B-F neighbours F-G
        edge = FindEdge(edges, 400, 800, 200, 1000); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 400, 800)), Is.True, "Expected: edge C-G neighbours B-C"); // C-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: edge C-G neighbours C-D"); // C-G neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge C-G neighbours F-G"); // C-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge C-G neighbours G-W"); // C-G neighbours G-W
        edge = FindEdge(edges, 400, 600, 0, 200); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 400, 600)), Is.True, "Expected: edge D-H neighbours C-D"); // D-H neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 600)), Is.True, "Expected: edge D-H neighbours D-A"); // D-H neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge D-H neighbours W-H"); // D-H neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge D-H neighbours H-Z"); // D-H neighbours H-Z
        edge = FindEdge(edges, 1000, 0, 1000, 200); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-E neighbours Z-X"); // X-E neighbours Z-X
        edge = FindEdge(edges, 1000, 200, 1000, 1000); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 200)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: edge Y-F neighbours B-F"); // Y-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 800, 1000, 200, 1000); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 800, 800, 1000)), Is.True, "Expected: edge F-G neighbours B-F"); // F-G neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: edge F-G neighbours C-G"); // F-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge F-G neighbours G-W"); // F-G neighbours G-W
        edge = FindEdge(edges, 200, 1000, 0, 1000); // G-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 800, 200, 1000)), Is.True, "Expected: edge G-W neighbours C-G"); // G-W neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge G-W neighbours F-G"); // G-W neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge G-W neighbours W-H"); // G-W neighbours W-H
        edge = FindEdge(edges, 0, 1000, 0, 200); // W-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: edge W-H neighbours D-H"); // W-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge W-H neighbours G-W"); // W-H neighbours G-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge W-H neighbours H-Z"); // W-H neighbours H-Z
        edge = FindEdge(edges, 0, 200, 0, 0); // H-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 200)), Is.True, "Expected: edge H-Z neighbours D-H"); // H-Z neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge H-Z neighbours W-H"); // H-Z neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge H-Z neighbours Z-X"); // H-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge Z-X neighbours X-E"); // Z-X neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Z-X neighbours H-Z"); // Z-X neighbours H-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsSurroundingAPointOffsetFromMiddle"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsSurroundingAPointOffsetFromMiddle_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(900, 500), // #3
            new VoronoiSite(700, 700), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 Z---------H#--------------------------------------W
        //      |           ',                                    |
        //  900 |             '·,                                 |
        //      |                ',                               |
        //  800 |                  '·,                           ,G
        //      |                     ',                       ,' |
        //  700 |                       '·,        4        ,·'   |
        //      |                          ',             ,'      |
        //  600 |                            'D---------C'        |
        //      |                             |         |         |
        //  500 |                        5    |    1    |    3    |
        //      |                             |         |         |
        //  400 |                            ,A---------B,        |
        //      |                          ,'             ',      |
        //  300 |                       ,·'        2        '·,   |
        //      |                     ,'                       ', |
        //  200 |                  ,·'                           'F
        //      |                ,'                               |
        //  100 |             ,·'                                 |
        //      |           ,'                                    |
        //    0 X---------E#--------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(16), "Expected: edge count 16");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 800, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 400, 800, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 800, 600, 600, 600), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 600, 600, 600, 400), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 600, 400, 200, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 800, 400, 1000, 200), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 800, 600, 1000, 800), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 600, 600, 200, 1000), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 1000, 200, 1000, 800), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge G-W"); // G-W
        Assume.That(HasEdge(edges, 1000, 1000, 200, 1000), Is.True, "Expected: has edge W-H"); // W-H
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge H-Z"); // H-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 400, 800, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: edge A-B neighbours B-F"); // A-B neighbours B-F
        edge = FindEdge(edges, 800, 400, 800, 600); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: edge B-C neighbours B-F"); // B-C neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: edge B-C neighbours C-G"); // B-C neighbours C-G
        edge = FindEdge(edges, 800, 600, 600, 600); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: edge C-D neighbours C-G"); // C-D neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: edge C-D neighbours D-H"); // C-D neighbours D-H
        edge = FindEdge(edges, 600, 600, 600, 400); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: edge D-A neighbours A-E"); // D-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: edge D-A neighbours D-H"); // D-A neighbours D-H
        edge = FindEdge(edges, 600, 400, 200, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: edge A-E neighbours D-A"); // A-E neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 800, 400, 1000, 200); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 400)), Is.True, "Expected: edge B-F neighbours A-B"); // B-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: edge B-F neighbours B-C"); // B-F neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge B-F neighbours Y-F"); // B-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge B-F neighbours F-G"); // B-F neighbours F-G
        edge = FindEdge(edges, 800, 600, 1000, 800); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 800, 600)), Is.True, "Expected: edge C-G neighbours B-C"); // C-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: edge C-G neighbours C-D"); // C-G neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge C-G neighbours F-G"); // C-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge C-G neighbours G-W"); // C-G neighbours G-W
        edge = FindEdge(edges, 600, 600, 200, 1000); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 600, 600)), Is.True, "Expected: edge D-H neighbours C-D"); // D-H neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 600, 400)), Is.True, "Expected: edge D-H neighbours D-A"); // D-H neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge D-H neighbours W-H"); // D-H neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge D-H neighbours H-Z"); // D-H neighbours H-Z
        edge = FindEdge(edges, 0, 0, 200, 0); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-E neighbours Z-X"); // X-E neighbours Z-X
        edge = FindEdge(edges, 200, 0, 1000, 0); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 200, 0)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 0, 1000, 200); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: edge Y-F neighbours B-F"); // Y-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 1000, 200, 1000, 800); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 400, 1000, 200)), Is.True, "Expected: edge F-G neighbours B-F"); // F-G neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: edge F-G neighbours C-G"); // F-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge F-G neighbours G-W"); // F-G neighbours G-W
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // G-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 600, 1000, 800)), Is.True, "Expected: edge G-W neighbours C-G"); // G-W neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge G-W neighbours F-G"); // G-W neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge G-W neighbours W-H"); // G-W neighbours W-H
        edge = FindEdge(edges, 1000, 1000, 200, 1000); // W-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: edge W-H neighbours D-H"); // W-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge W-H neighbours G-W"); // W-H neighbours G-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge W-H neighbours H-Z"); // W-H neighbours H-Z
        edge = FindEdge(edges, 200, 1000, 0, 1000); // H-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 200, 1000)), Is.True, "Expected: edge H-Z neighbours D-H"); // H-Z neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge H-Z neighbours W-H"); // H-Z neighbours W-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge H-Z neighbours Z-X"); // H-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge Z-X neighbours X-E"); // Z-X neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Z-X neighbours H-Z"); // Z-X neighbours H-Z
    }

    [Test]
    public void FourEquidistantPointsInASquareAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(700, 700), // #4
        };

        // 1000 X------------------------B------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |              1         |         4              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 C------------------------A------------------------E
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              2         |         3              |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 500, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 500, 500, 0, 500); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 500, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 500, 500, 1000, 500); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 0, 500, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 500, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 500, 0, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 0, 1000, 500); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(400, 800), // #1
            new VoronoiSite(400, 200), // #2
            new VoronoiSite(600, 200), // #3
            new VoronoiSite(600, 800), // #4
        };

        // 1000 X------------------------B------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                   1    |    4                   |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 C------------------------A------------------------E
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                   2    |    3                   |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------D------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 500, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 500, 500, 0, 500); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 500, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 500, 500, 1000, 500); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 0, 500, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 500, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 500, 0, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 0, 1000, 500); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARectangleAroundMiddle"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARectangleAroundMiddle_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 600), // #1
            new VoronoiSite(200, 600), // #2
            new VoronoiSite(200, 400), // #3
            new VoronoiSite(800, 400), // #4
        };

        // 1000 Y------------------------C------------------------X
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 |         2              |              1         |
        //      |                        |                        |
        //  500 D------------------------A------------------------B
        //      |                        |                        |
        //  400 |         3              |              4         |
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 W------------------------E------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 500, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 1000, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 500, 500, 500, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 500, 500, 0, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 500, 500, 500, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 1000, 0, 500); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 0, 500, 0, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 500)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 0, 0, 500, 0); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 500, 0, 1000, 0); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 500, 0)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 500)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    [Test]
    public void FourEquidistantPointsInAKiteAroundMiddle()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(500, 300), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 B#-----------------------------------------------#E
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              4        #A#        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        3        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 C#-----------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge D-E"); // D-E
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge E-B"); // E-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 500, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours E-B"); // A-B neighbours E-B
        edge = FindEdge(edges, 500, 500, 0, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-D"); // A-C neighbours C-D
        edge = FindEdge(edges, 500, 500, 1000, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-E"); // A-D neighbours D-E
        edge = FindEdge(edges, 500, 500, 1000, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-E neighbours D-E"); // A-E neighbours D-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-B"); // A-E neighbours E-B
        edge = FindEdge(edges, 0, 1000, 0, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours E-B"); // B-C neighbours E-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge C-D neighbours A-C"); // C-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-D neighbours D-E"); // C-D neighbours D-E
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // D-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge D-E neighbours A-D"); // D-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge D-E neighbours A-E"); // D-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge D-E neighbours C-D"); // D-E neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-E neighbours E-B"); // D-E neighbours E-B
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // E-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge E-B neighbours A-B"); // E-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge E-B neighbours A-E"); // E-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge E-B neighbours B-C"); // E-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge E-B neighbours D-E"); // E-B neighbours D-E
    }

    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1000 X----B--------------------------------------------Z
        //      |     '                                           |
        //  900 |      ',                                         |
        //      |        ,                                        |
        //  800 |         ·                                       |
        //      |          '                                      |
        //  700 |           ',           4                      ,,E
        //      |             ,                            ,,·''  |
        //  600 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  500 |    1           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  400 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  300 |       ,,·''         ',           3              |
        //      |  ,,·''                ,                         |
        //  200 C''                      ·                        |
        //      |                         '                       |
        //  100 |              2           ',                     |
        //      |                            ,                    |
        //    0 Y-----------------------------D-------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 100, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 600, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, 1000, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 700), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 1000, 100, 1000), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 100, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 400, 100, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 100, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 400, 400, 0, 200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 400, 400, 600, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 400, 400, 1000, 700); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 1000, 0, 200); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1000, 0, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 0, 200, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 200)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 600, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 600, 0, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 600, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 0, 1000, 700); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 700)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 100, 1000)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 100, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 100, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 100, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 100, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1000 Y---------C---------------------------------------X
        //      |          '                                      |
        //  900 |           ',           1                      ,,B
        //      |             ,                            ,,·''  |
        //  800 |              ·                      ,,·''       |
        //      |               '                ,,·''            |
        //  700 |    2           ',         ,,·''                 |
        //      |                  ,   ,,·''                      |
        //  600 |                 ,,A''                           |
        //      |            ,,·''   '                            |
        //  500 |       ,,·''         ',           4              |
        //      |  ,,·''                ,                         |
        //  400 D''                      ·                        |
        //      |                         '                       |
        //  300 |              3           ',                     |
        //      |                            ,                    |
        //  200 |                             ·                   |
        //      |                              '                  |
        //  100 |                               ',                |
        //      |                                 ,               |
        //    0 W----------------------------------E--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 1000, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 0, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 600, 700, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 1000, 200, 1000), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 0, 700, 0), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 900), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 1000, 900, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 600, 1000, 900); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 900)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 900, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 400, 600, 200, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 400, 600, 0, 400); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 400, 600, 700, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 1000, 1000, 200, 1000); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 900, 1000, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 200, 1000, 0, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 200, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 1000, 0, 400); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 0, 400, 0, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 400)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 0, 0, 700, 0); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 700, 0)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 900)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 900); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 900, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 1000, 900, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 900)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 900)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(500, 300), // #4
        };

        // 1000 W-------------------D-----------------------------Y
        //      |                    '                            |
        //  900 |                     ',           2              |
        //      |                       ,                         |
        //  800 |                        ·                      ,,C
        //      |                         '                ,,·''  |
        //  700 |              3           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  600 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  500 |                 ,,·''         ',           1    |
        //      |            ,,·''                ,               |
        //  400 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  300 E''                      4           ',           |
        //      |                                      ,          |
        //  200 |                                       ·         |
        //      |                                        '        |
        //  100 |                                         ',      |
        //      |                                           ,     |
        //    0 Z--------------------------------------------B----X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 900, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 1000, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 400, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 0, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 0, 1000, 800), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 300), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 0, 0, 900, 0), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 900, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 600, 900, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 600, 600, 1000, 800); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 600, 600, 400, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 600, 600, 0, 300); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 1000, 0, 1000, 800); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1000, 0)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 800)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 400, 1000, 0, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 400, 1000)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 0, 1000, 0, 300); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 0, 300, 0, 0); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 300)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 900, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 900, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 900, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 Z--------------E----------------------------------W
        //      |               '                                 |
        //  900 |                ',                               |
        //      |                  ,                              |
        //  800 |                   ·                             |
        //      |                    '                            |
        //  700 |                     ',           3              |
        //      |                       ,                         |
        //  600 |                        ·                      ,,D
        //      |                         '                ,,·''  |
        //  500 |              4           ',         ,,·''       |
        //      |                            ,   ,,·''            |
        //  400 |                           ,,A''                 |
        //      |                      ,,·''   '                  |
        //  300 |                 ,,·''         ',           2    |
        //      |            ,,·''                ,               |
        //  200 |       ,,·''                      ·              |
        //      |  ,,·''                            '             |
        //  100 B''                      1           ',           |
        //      |                                      ,          |
        //    0 X---------------------------------------C---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 0, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 800, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 1000, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 400, 300, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 0, 800, 0), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 1000, 300, 1000), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 100), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 0, 100, 0, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 400, 0, 100); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 100)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 600, 400, 800, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 600, 400, 1000, 600); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 600, 400, 300, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 0, 800, 0); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 800, 0, 1000, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 800, 0)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 0, 1000, 600); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 600)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 1000, 300, 1000); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 300, 1000, 0, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 300, 1000)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 100)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 100); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 0, 100, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 100)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 100)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 100), // #2
            new VoronoiSite(300, 300), // #3
            new VoronoiSite(500, 700), // #4
        };

        // 1000 Z--------------------------------------------B----X
        //      |                                           '     |
        //  900 |                                         ,'      |
        //      |                                        ,        |
        //  800 |                                       ·         |
        //      |                                      '          |
        //  700 E,,                      4           ,'           |
        //      |  ''·,,                            ,             |
        //  600 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  500 |                 ''·,,         ,'           1    |
        //      |                      ''·,,   ,                  |
        //  400 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  300 |              3           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  200 |                        ·                      ''C
        //      |                       '                         |
        //  100 |                     ,'           2              |
        //      |                    ,                            |
        //    0 W-------------------D-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 400, 900, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 400, 1000, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 400, 400, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 400, 0, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 200), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 1000, 200, 1000, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 0, 400, 0), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 400, 0, 0, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 0, 0, 700), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 0, 700, 0, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 0, 1000, 900, 1000), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 900, 1000, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 400, 900, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 900, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 600, 400, 1000, 200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 200)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 600, 400, 400, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 400, 0)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 600, 400, 0, 700); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 700)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 1000, 1000, 1000, 200); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1000, 1000, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 1000, 200, 1000, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 1000, 200)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 200)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 400, 0)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 0, 400, 0); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 400, 0, 0, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 400, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 400, 0)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 700)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 0, 0, 0, 700); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 0, 700, 0, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 0, 700)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 700)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 900, 1000)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 900, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1000, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 900, 1000, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 400, 900, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 200)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 900, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(100, 300), // #2
            new VoronoiSite(300, 700), // #3
            new VoronoiSite(700, 500), // #4
        };

        // 1000 W----------------------------------E--------------Z
        //      |                                 '               |
        //  900 |                               ,'                |
        //      |                              ,                  |
        //  800 |                             ·                   |
        //      |                            '                    |
        //  700 |              3           ,'                     |
        //      |                         ,                       |
        //  600 D,,                      ·                        |
        //      |  ''·,,                '                         |
        //  500 |       ''·,,         ,'           4              |
        //      |            ''·,,   ,                            |
        //  400 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  300 |    2           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  200 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  100 |           ,'           1                      ''B
        //      |          ,                                      |
        //    0 Y---------C---------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 400, 1000, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 400, 200, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 400, 0, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 400, 700, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 0, 200, 0), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 200, 0, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 600), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 0, 600, 0, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 1000, 700, 1000), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 700, 1000, 1000, 1000), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 100), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 1000, 100, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 400, 1000, 100); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 100)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 100, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 400, 400, 200, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 200, 0)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 400, 400, 0, 600); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 600)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 400, 400, 700, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 700, 1000)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 1000, 0, 200, 0); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 0, 0)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 100, 1000, 0)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 200, 0, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 200, 0)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 200, 0)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 600)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 0, 0, 600); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 0, 0)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 1000)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 0, 600, 0, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 0, 600)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 600)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 700, 1000)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 0, 1000, 700, 1000); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 1000)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 1000, 1000)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 700, 1000, 1000, 1000); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 700, 1000)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 700, 1000)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 100)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 1000, 100); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 100, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 1000, 100, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 400, 1000, 100)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 200, 0)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 100)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 900), // #2
            new VoronoiSite(700, 700), // #3
            new VoronoiSite(500, 300), // #4
        };

        // 1000 Y-----------------------------D-------------------W
        //      |                            '                    |
        //  900 |              2           ,'                     |
        //      |                         ,                       |
        //  800 C,,                      ·                        |
        //      |  ''·,,                '                         |
        //  700 |       ''·,,         ,'           3              |
        //      |            ''·,,   ,                            |
        //  600 |                 ''A,,                           |
        //      |                  '   ''·,,                      |
        //  500 |    1           ,'         ''·,,                 |
        //      |               ,                ''·,,            |
        //  400 |              ·                      ''·,,       |
        //      |             '                            ''·,,  |
        //  300 |           ,'           4                      ''E
        //      |          ,                                      |
        //  200 |         ·                                       |
        //      |        '                                        |
        //  100 |      ,'                                         |
        //      |     ,                                           |
        //    0 X----B--------------------------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 600, 100, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 600, 0, 800), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 400, 600, 600, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 600, 1000, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 0, 0, 800), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 0, 800, 0, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 1000, 600, 1000), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 600, 1000, 1000, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 300), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 1000, 300, 1000, 0), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 1000, 0, 100, 0), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 100, 0, 0, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 600, 100, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 100, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 400, 600, 0, 800); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 800)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 400, 600, 600, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 600, 1000)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 400, 600, 1000, 300); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 300)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 0, 0, 800); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 1000)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 0, 0)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 0, 800, 0, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 0, 800)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 800)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 600, 1000)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 0, 1000, 600, 1000); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 600, 1000, 1000, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 600, 1000)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 600, 1000)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 300)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 1000, 1000, 300); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 1000)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 0)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 1000, 300, 1000, 0); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 1000, 300)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 300)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 100, 0)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 100, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 0)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 100, 0, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 600, 100, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 800)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 100, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    /// <summary>
    /// This test basically repeats <see cref="FourEquidistantPointsInARotatedSquareOffset"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourEquidistantPointsInARotatedSquareOffset_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(900, 700), // #2
            new VoronoiSite(700, 300), // #3
            new VoronoiSite(300, 500), // #4
        };

        // 1000 X---------------------------------------C---------Y
        //      |                                      '          |
        //  900 B,,                      1           ,'           |
        //      |  ''·,,                            ,             |
        //  800 |       ''·,,                      ·              |
        //      |            ''·,,                '               |
        //  700 |                 ''·,,         ,'           2    |
        //      |                      ''·,,   ,                  |
        //  600 |                           ''A,,                 |
        //      |                            '   ''·,,            |
        //  500 |              4           ,'         ''·,,       |
        //      |                         ,                ''·,,  |
        //  400 |                        ·                      ''D
        //      |                       '                         |
        //  300 |                     ,'           3              |
        //      |                    ,                            |
        //  200 |                   ·                             |
        //      |                  '                              |
        //  100 |                ,'                               |
        //      |               ,                                 |
        //    0 Z--------------E----------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 600, 0, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 600, 800, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 600, 1000, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 600, 300, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 0, 1000, 800, 1000), Is.True, "Expected: has edge X-C"); // X-C
        Assume.That(HasEdge(edges, 800, 1000, 1000, 1000), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 400), Is.True, "Expected: has edge Y-D"); // Y-D
        Assume.That(HasEdge(edges, 1000, 400, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 300, 0), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 300, 0, 0, 0), Is.True, "Expected: has edge E-Z"); // E-Z
        Assume.That(HasEdge(edges, 0, 0, 0, 900), Is.True, "Expected: has edge Z-B"); // Z-B
        Assume.That(HasEdge(edges, 0, 900, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 600, 0, 900); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 900)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 600, 600, 800, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: edge A-C neighbours A-E"); // A-C neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 800, 1000)), Is.True, "Expected: edge A-C neighbours X-C"); // A-C neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Y"); // A-C neighbours C-Y
        edge = FindEdge(edges, 600, 600, 1000, 400); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 400)), Is.True, "Expected: edge A-D neighbours Y-D"); // A-D neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 600, 600, 300, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: edge A-E neighbours A-C"); // A-E neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 300, 0)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 0, 0)), Is.True, "Expected: edge A-E neighbours E-Z"); // A-E neighbours E-Z
        edge = FindEdge(edges, 0, 1000, 800, 1000); // X-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: edge X-C neighbours A-C"); // X-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 1000, 1000)), Is.True, "Expected: edge X-C neighbours C-Y"); // X-C neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 1000)), Is.True, "Expected: edge X-C neighbours B-X"); // X-C neighbours B-X
        edge = FindEdge(edges, 800, 1000, 1000, 1000); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 800, 1000)), Is.True, "Expected: edge C-Y neighbours A-C"); // C-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 800, 1000)), Is.True, "Expected: edge C-Y neighbours X-C"); // C-Y neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 400)), Is.True, "Expected: edge C-Y neighbours Y-D"); // C-Y neighbours Y-D
        edge = FindEdge(edges, 1000, 1000, 1000, 400); // Y-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: edge Y-D neighbours A-D"); // Y-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 1000, 1000)), Is.True, "Expected: edge Y-D neighbours C-Y"); // Y-D neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 0)), Is.True, "Expected: edge Y-D neighbours D-W"); // Y-D neighbours D-W
        edge = FindEdge(edges, 1000, 400, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 1000, 400)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 400)), Is.True, "Expected: edge D-W neighbours Y-D"); // D-W neighbours Y-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 300, 0)), Is.True, "Expected: edge D-W neighbours W-E"); // D-W neighbours W-E
        edge = FindEdge(edges, 1000, 0, 300, 0); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 0)), Is.True, "Expected: edge W-E neighbours D-W"); // W-E neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 0, 0)), Is.True, "Expected: edge W-E neighbours E-Z"); // W-E neighbours E-Z
        edge = FindEdge(edges, 300, 0, 0, 0); // E-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 300, 0)), Is.True, "Expected: edge E-Z neighbours A-E"); // E-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 300, 0)), Is.True, "Expected: edge E-Z neighbours W-E"); // E-Z neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 900)), Is.True, "Expected: edge E-Z neighbours Z-B"); // E-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 0, 900); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 0, 0)), Is.True, "Expected: edge Z-B neighbours E-Z"); // Z-B neighbours E-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        edge = FindEdge(edges, 0, 900, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 600, 0, 900)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 800, 1000)), Is.True, "Expected: edge B-X neighbours X-C"); // B-X neighbours X-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 900)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
    }

    [Test]
    public void FivePointsInAForkedTallCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 900), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 700), // #5
        };

        // 1000 W---------C#---------------------------#D---------Z
        //      |           ',                       ,'           |
        //  900 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  800 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  700 |              2        'B'        5              |
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 E------------------------A------------------------F
        //      |                        |                        |
        //  300 |                        |                        |
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              3         |         4              |
        //      |                        |                        |
        //    0 X------------------------G------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(15), "Expected: edge count 15");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 400, 500, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 200, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 700, 800, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 400, 0, 400), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 400, 1000, 400), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 400, 500, 0), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge F-Z"); // F-Z
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 800, 1000, 200, 1000), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 400, 500, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 700, 200, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 700, 800, 1000); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge B-D neighbours Z-D"); // B-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 500, 400, 0, 400); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 500, 400, 1000, 400); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-F neighbours F-Z"); // A-F neighbours F-Z
        edge = FindEdge(edges, 500, 400, 500, 0); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 700)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 200, 1000, 0, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge C-W neighbours W-E"); // C-W neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge C-W neighbours D-C"); // C-W neighbours D-C
        edge = FindEdge(edges, 0, 1000, 0, 400); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge W-E neighbours C-W"); // W-E neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge W-E neighbours E-X"); // W-E neighbours E-X
        edge = FindEdge(edges, 0, 400, 0, 0); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 0, 400)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge E-X neighbours W-E"); // E-X neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 0, 0, 500, 0); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 500, 0, 1000, 0); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 500, 0)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 0, 1000, 400); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Y-F neighbours F-Z"); // Y-F neighbours F-Z
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // F-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 400, 1000, 400)), Is.True, "Expected: edge F-Z neighbours A-F"); // F-Z neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge F-Z neighbours Y-F"); // F-Z neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge F-Z neighbours Z-D"); // F-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge Z-D neighbours B-D"); // Z-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours F-Z"); // Z-D neighbours F-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 200, 1000)), Is.True, "Expected: edge Z-D neighbours D-C"); // Z-D neighbours D-C
        edge = FindEdge(edges, 800, 1000, 200, 1000); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 200, 1000)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 800, 1000)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge D-C neighbours C-W"); // D-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge D-C neighbours Z-D"); // D-C neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 500), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(700, 300), // #5
        };

        // 1000 X-------------------E-----------------------------W
        //      |                   |                             |
        //  900 |                   |                             |
        //      |                   |                             |
        //  800 |                   |                            ,C
        //      |                   |                          ,' |
        //  700 |    3              |              2        ,·'   |
        //      |                   |                     ,'      |
        //  600 |                   |                  ,·'        |
        //      |                   |                ,'           |
        //  500 G-------------------A--------------B#        1    |
        //      |                   |                ',           |
        //  400 |                   |                  '·,        |
        //      |                   |                     ',      |
        //  300 |    4              |              5        '·,   |
        //      |                   |                          ', |
        //  200 |                   |                            'D
        //      |                   |                             |
        //  100 |                   |                             |
        //      |                   |                             |
        //    0 Y-------------------F-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(15), "Expected: edge count 15");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 500, 700, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 1000, 800), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 500, 1000, 200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 400, 500, 400, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 400, 500, 400, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 400, 500, 0, 500), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge F-Z"); // F-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 200, 1000, 800), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 500, 700, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 700, 500, 1000, 800); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 700, 500, 1000, 200); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge B-D neighbours Z-D"); // B-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 400, 500, 400, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 400, 500, 400, 0); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-F neighbours F-Z"); // A-F neighbours F-Z
        edge = FindEdge(edges, 400, 500, 0, 500); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 700, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge C-W neighbours W-E"); // C-W neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge C-W neighbours D-C"); // C-W neighbours D-C
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge W-E neighbours C-W"); // W-E neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge W-E neighbours E-X"); // W-E neighbours E-X
        edge = FindEdge(edges, 400, 1000, 0, 1000); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 1000)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge E-X neighbours W-E"); // E-X neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 0, 500, 0, 0); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 0, 500)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 0, 0, 400, 0); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours F-Z"); // Y-F neighbours F-Z
        edge = FindEdge(edges, 400, 0, 1000, 0); // F-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 500, 400, 0)), Is.True, "Expected: edge F-Z neighbours A-F"); // F-Z neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge F-Z neighbours Y-F"); // F-Z neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge F-Z neighbours Z-D"); // F-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 0, 1000, 200); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge Z-D neighbours B-D"); // Z-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Z-D neighbours F-Z"); // Z-D neighbours F-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 800)), Is.True, "Expected: edge Z-D neighbours D-C"); // Z-D neighbours D-C
        edge = FindEdge(edges, 1000, 200, 1000, 800); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 800)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 200)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge D-C neighbours C-W"); // D-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge D-C neighbours Z-D"); // D-C neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 100), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 300), // #5
        };

        // 1000 Y------------------------G------------------------X
        //      |                        |                        |
        //  900 |              4         |         3              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 |                        |                        |
        //      |                        |                        |
        //  600 F------------------------A------------------------E
        //      |                        |                        |
        //  500 |                        |                        |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  200 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  100 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //    0 Z---------D#---------------------------#C---------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(15), "Expected: edge count 15");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 600, 500, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 300, 800, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 300, 200, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 600, 1000, 600), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 600, 0, 600), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 600, 500, 1000), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge F-Z"); // F-Z
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 200, 0, 800, 0), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 600, 500, 300); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 300, 800, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 300, 200, 0); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-D neighbours Z-D"); // B-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 500, 600, 1000, 600); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 500, 600, 0, 600); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-F neighbours F-Z"); // A-F neighbours F-Z
        edge = FindEdge(edges, 500, 600, 500, 1000); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 300)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 800, 0, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge C-W neighbours W-E"); // C-W neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge C-W neighbours D-C"); // C-W neighbours D-C
        edge = FindEdge(edges, 1000, 0, 1000, 600); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours C-W"); // W-E neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge W-E neighbours E-X"); // W-E neighbours E-X
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 1000, 600)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge E-X neighbours W-E"); // E-X neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 500, 1000, 0, 1000); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 500, 1000)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 0, 1000, 0, 600); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Y-F neighbours F-Z"); // Y-F neighbours F-Z
        edge = FindEdge(edges, 0, 600, 0, 0); // F-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 600, 0, 600)), Is.True, "Expected: edge F-Z neighbours A-F"); // F-Z neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge F-Z neighbours Y-F"); // F-Z neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge F-Z neighbours Z-D"); // F-Z neighbours Z-D
        edge = FindEdge(edges, 0, 0, 200, 0); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge Z-D neighbours B-D"); // Z-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Z-D neighbours F-Z"); // Z-D neighbours F-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 800, 0)), Is.True, "Expected: edge Z-D neighbours D-C"); // Z-D neighbours D-C
        edge = FindEdge(edges, 200, 0, 800, 0); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 800, 0)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 200, 0)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge D-C neighbours C-W"); // D-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge D-C neighbours Z-D"); // D-C neighbours Z-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedTallCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedTallCross_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 500), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(300, 700), // #5
        };

        // 1000 Z-----------------------------F-------------------Y
        //      |                             |                   |
        //  900 |                             |                   |
        //      |                             |                   |
        //  800 D,                            |                   |
        //      | ',                          |                   |
        //  700 |   '·,        5              |              4    |
        //      |      ',                     |                   |
        //  600 |        '·,                  |                   |
        //      |           ',                |                   |
        //  500 |    1        #B--------------A-------------------G
        //      |           ,'                |                   |
        //  400 |        ,·'                  |                   |
        //      |      ,'                     |                   |
        //  300 |   ,·'        2              |              3    |
        //      | ,'                          |                   |
        //  200 C'                            |                   |
        //      |                             |                   |
        //  100 |                             |                   |
        //      |                             |                   |
        //    0 W-----------------------------E-------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(15), "Expected: edge count 15");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 500, 300, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 300, 500, 0, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 500, 0, 800), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 600, 500, 600, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 600, 500, 600, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 600, 500, 1000, 500), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge W-E"); // W-E
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge F-Z"); // F-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 0, 800, 0, 200), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 500, 300, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 300, 500, 0, 200); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 300, 500, 0, 800); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge B-D neighbours Z-D"); // B-D neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 600, 500, 600, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-E neighbours W-E"); // A-E neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 600, 500, 600, 1000); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-F neighbours F-Z"); // A-F neighbours F-Z
        edge = FindEdge(edges, 600, 500, 1000, 500); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 300, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 0, 200, 0, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-W neighbours W-E"); // C-W neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge C-W neighbours D-C"); // C-W neighbours D-C
        edge = FindEdge(edges, 0, 0, 600, 0); // W-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: edge W-E neighbours A-E"); // W-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge W-E neighbours C-W"); // W-E neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge W-E neighbours E-X"); // W-E neighbours E-X
        edge = FindEdge(edges, 600, 0, 1000, 0); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 0)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge E-X neighbours W-E"); // E-X neighbours W-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 1000, 0, 1000, 500); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 1000, 500)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Y-F neighbours F-Z"); // Y-F neighbours F-Z
        edge = FindEdge(edges, 600, 1000, 0, 1000); // F-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 500, 600, 1000)), Is.True, "Expected: edge F-Z neighbours A-F"); // F-Z neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge F-Z neighbours Y-F"); // F-Z neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge F-Z neighbours Z-D"); // F-Z neighbours Z-D
        edge = FindEdge(edges, 0, 1000, 0, 800); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge Z-D neighbours B-D"); // Z-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Z-D neighbours F-Z"); // Z-D neighbours F-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 200)), Is.True, "Expected: edge Z-D neighbours D-C"); // Z-D neighbours D-C
        edge = FindEdge(edges, 0, 800, 0, 200); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 200)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 800)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge D-C neighbours C-W"); // D-C neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge D-C neighbours Z-D"); // D-C neighbours Z-D
    }

    [Test]
    public void FivePointsInAForkedStubbyCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(300, 100), // #3
            new VoronoiSite(700, 100), // #4
            new VoronoiSite(700, 500), // #5
        };

        // 1000 C#-----------------------------------------------#D
        //      | ',                                           ,' |
        //  900 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  800 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  700 |             '·,        1        ,·'             |
        //      |                ',             ,'                |
        //  600 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  500 |              2        'B'        5              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 E------------------------A------------------------F
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              3         |         4              |
        //      |                        |                        |
        //    0 X------------------------G------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 300, 0, 300), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 300, 1000, 300), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 0, 1000, 0, 300), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 1000, 300, 1000, 1000), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 300, 500, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 500, 0, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge B-C neighbours C-E"); // B-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 500, 1000, 1000); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge B-D neighbours F-D"); // B-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 500, 300, 0, 300); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge A-E neighbours C-E"); // A-E neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 500, 300, 1000, 300); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge A-F neighbours F-D"); // A-F neighbours F-D
        edge = FindEdge(edges, 500, 300, 500, 0); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 0, 1000, 0, 300); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge C-E neighbours B-C"); // C-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge C-E neighbours A-E"); // C-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge C-E neighbours E-X"); // C-E neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-E neighbours D-C"); // C-E neighbours D-C
        edge = FindEdge(edges, 0, 300, 0, 0); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge E-X neighbours C-E"); // E-X neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 0, 0, 500, 0); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 500, 0, 1000, 0); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge Y-F neighbours F-D"); // Y-F neighbours F-D
        edge = FindEdge(edges, 1000, 300, 1000, 1000); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge F-D neighbours B-D"); // F-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge F-D neighbours A-F"); // F-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge F-D neighbours Y-F"); // F-D neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge F-D neighbours D-C"); // F-D neighbours D-C
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 300)), Is.True, "Expected: edge D-C neighbours C-E"); // D-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge D-C neighbours F-D"); // D-C neighbours F-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 500), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 700), // #3
            new VoronoiSite(100, 300), // #4
            new VoronoiSite(500, 300), // #5
        };

        // 1000 X--------------E---------------------------------#C
        //      |              |                               ,' |
        //  900 |              |                            ,·'   |
        //      |              |                          ,'      |
        //  800 |              |                       ,·'        |
        //      |              |                     ,'           |
        //  700 |    3         |         2        ,·'             |
        //      |              |                ,'                |
        //  600 |              |             ,·'                  |
        //      |              |           ,'                     |
        //  500 G--------------A---------B#        1              |
        //      |              |           ',                     |
        //  400 |              |             '·,                  |
        //      |              |                ',                |
        //  300 |    4         |         5        '·,             |
        //      |              |                     ',           |
        //  200 |              |                       '·,        |
        //      |              |                          ',      |
        //  100 |              |                            '·,   |
        //      |              |                               ', |
        //    0 Y--------------F---------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 300, 500, 300, 1000), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 300, 500, 300, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 1000, 1000, 300, 1000), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 300, 0, 1000, 0), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 500, 500, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 500, 1000, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge B-C neighbours C-E"); // B-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 500, 1000, 0); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge B-D neighbours F-D"); // B-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 300, 500, 300, 1000); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge A-E neighbours C-E"); // A-E neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 300, 500, 300, 0); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge A-F neighbours F-D"); // A-F neighbours F-D
        edge = FindEdge(edges, 300, 500, 0, 500); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 500, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 1000, 1000, 300, 1000); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge C-E neighbours B-C"); // C-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge C-E neighbours A-E"); // C-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge C-E neighbours E-X"); // C-E neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-E neighbours D-C"); // C-E neighbours D-C
        edge = FindEdge(edges, 300, 1000, 0, 1000); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge E-X neighbours C-E"); // E-X neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 0, 500, 0, 0); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 0, 0, 300, 0); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours F-D"); // Y-F neighbours F-D
        edge = FindEdge(edges, 300, 0, 1000, 0); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge F-D neighbours B-D"); // F-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge F-D neighbours A-F"); // F-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge F-D neighbours Y-F"); // F-D neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge F-D neighbours D-C"); // F-D neighbours D-C
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 1000)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 300, 1000)), Is.True, "Expected: edge D-C neighbours C-E"); // D-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge D-C neighbours F-D"); // D-C neighbours F-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(700, 900), // #3
            new VoronoiSite(300, 900), // #4
            new VoronoiSite(300, 500), // #5
        };

        // 1000 Y------------------------G------------------------X
        //      |                        |                        |
        //  900 |              4         |         3              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 F------------------------A------------------------E
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              5        ,B,        2              |
        //      |                     ,'   ',                     |
        //  400 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  300 |             ,·'        1        '·,             |
        //      |           ,'                       ',           |
        //  200 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  100 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //    0 D#-----------------------------------------------#C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 700, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 500, 700, 1000, 700), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 700, 0, 700), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 1000, 0, 1000, 700), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 700, 500, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 500, 1000, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge B-C neighbours C-E"); // B-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 500, 0, 0); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge B-D neighbours F-D"); // B-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 500, 700, 1000, 700); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge A-E neighbours C-E"); // A-E neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 500, 700, 0, 700); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge A-F neighbours F-D"); // A-F neighbours F-D
        edge = FindEdge(edges, 500, 700, 500, 1000); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 1000, 0, 1000, 700); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge C-E neighbours B-C"); // C-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge C-E neighbours A-E"); // C-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge C-E neighbours E-X"); // C-E neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-E neighbours D-C"); // C-E neighbours D-C
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge E-X neighbours C-E"); // E-X neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 500, 1000, 0, 1000); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 0, 1000, 0, 700); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Y-F neighbours F-D"); // Y-F neighbours F-D
        edge = FindEdge(edges, 0, 700, 0, 0); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge F-D neighbours B-D"); // F-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge F-D neighbours A-F"); // F-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge F-D neighbours Y-F"); // F-D neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge F-D neighbours D-C"); // F-D neighbours D-C
        edge = FindEdge(edges, 0, 0, 1000, 0); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 1000, 0)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 700)), Is.True, "Expected: edge D-C neighbours C-E"); // D-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge D-C neighbours F-D"); // D-C neighbours F-D
    }

    /// <summary>
    /// This test basically repeats <see cref="FivePointsInAForkedStubbyCross"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FivePointsInAForkedStubbyCross_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 500), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 300), // #3
            new VoronoiSite(900, 700), // #4
            new VoronoiSite(500, 700), // #5
        };

        // 1000 D#---------------------------------F--------------Y
        //      | ',                               |              |
        //  900 |   '·,                            |              |
        //      |      ',                          |              |
        //  800 |        '·,                       |              |
        //      |           ',                     |              |
        //  700 |             '·,        5         |         4    |
        //      |                ',                |              |
        //  600 |                  '·,             |              |
        //      |                     ',           |              |
        //  500 |              1        #B---------A--------------G
        //      |                     ,'           |              |
        //  400 |                  ,·'             |              |
        //      |                ,'                |              |
        //  300 |             ,·'        2         |         3    |
        //      |           ,'                     |              |
        //  200 |        ,·'                       |              |
        //      |      ,'                          |              |
        //  100 |   ,·'                            |              |
        //      | ,'                               |              |
        //    0 C#---------------------------------E--------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(13), "Expected: edge count 13");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 500, 500, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 500, 0, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 500, 0, 1000), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 700, 500, 700, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 500, 700, 1000), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge A-G"); // A-G
        Assume.That(HasEdge(edges, 0, 0, 700, 0), Is.True, "Expected: has edge C-E"); // C-E
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge E-X"); // E-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge X-G"); // X-G
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge G-Y"); // G-Y
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge F-D"); // F-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge D-C"); // D-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 500, 500, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-D"); // A-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-G"); // A-B neighbours A-G
        edge = FindEdge(edges, 500, 500, 0, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge B-C neighbours B-D"); // B-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge B-C neighbours C-E"); // B-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-C neighbours D-C"); // B-C neighbours D-C
        edge = FindEdge(edges, 500, 500, 0, 1000); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: edge B-D neighbours A-B"); // B-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge B-D neighbours B-C"); // B-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge B-D neighbours F-D"); // B-D neighbours F-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-D neighbours D-C"); // B-D neighbours D-C
        edge = FindEdge(edges, 700, 500, 700, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-E neighbours A-G"); // A-E neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge A-E neighbours C-E"); // A-E neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-X"); // A-E neighbours E-X
        edge = FindEdge(edges, 700, 500, 700, 1000); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-F neighbours A-G"); // A-F neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-F neighbours F-D"); // A-F neighbours F-D
        edge = FindEdge(edges, 700, 500, 1000, 500); // A-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 500, 500)), Is.True, "Expected: edge A-G neighbours A-B"); // A-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge A-G neighbours A-E"); // A-G neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge A-G neighbours A-F"); // A-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-G neighbours X-G"); // A-G neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-G neighbours G-Y"); // A-G neighbours G-Y
        edge = FindEdge(edges, 0, 0, 700, 0); // C-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge C-E neighbours B-C"); // C-E neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge C-E neighbours A-E"); // C-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge C-E neighbours E-X"); // C-E neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-E neighbours D-C"); // C-E neighbours D-C
        edge = FindEdge(edges, 700, 0, 1000, 0); // E-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge E-X neighbours A-E"); // E-X neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge E-X neighbours C-E"); // E-X neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge E-X neighbours X-G"); // E-X neighbours X-G
        edge = FindEdge(edges, 1000, 0, 1000, 500); // X-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge X-G neighbours A-G"); // X-G neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge X-G neighbours E-X"); // X-G neighbours E-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-G neighbours G-Y"); // X-G neighbours G-Y
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // G-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge G-Y neighbours A-G"); // G-Y neighbours A-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge G-Y neighbours X-G"); // G-Y neighbours X-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge G-Y neighbours Y-F"); // G-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Y-F neighbours G-Y"); // Y-F neighbours G-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Y-F neighbours F-D"); // Y-F neighbours F-D
        edge = FindEdge(edges, 700, 1000, 0, 1000); // F-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge F-D neighbours B-D"); // F-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge F-D neighbours A-F"); // F-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge F-D neighbours Y-F"); // F-D neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge F-D neighbours D-C"); // F-D neighbours D-C
        edge = FindEdge(edges, 0, 1000, 0, 0); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 0)), Is.True, "Expected: edge D-C neighbours B-C"); // D-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 500, 0, 1000)), Is.True, "Expected: edge D-C neighbours B-D"); // D-C neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 700, 0)), Is.True, "Expected: edge D-C neighbours C-E"); // D-C neighbours C-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge D-C neighbours F-D"); // D-C neighbours F-D
    }

    [Test]
    public void SixPointsInADoubleCross()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(300, 500), // #3
            new VoronoiSite(700, 500), // #4
            new VoronoiSite(300, 100), // #5
            new VoronoiSite(700, 100), // #6
        };

        // 1000 W------------------------H------------------------Z
        //      |                        |                        |
        //  900 |              1         |         2              |
        //      |                        |                        |
        //  800 |                        |                        |
        //      |                        |                        |
        //  700 C------------------------B------------------------G
        //      |                        |                        |
        //  600 |                        |                        |
        //      |                        |                        |
        //  500 |              3         |         4              |
        //      |                        |                        |
        //  400 |                        |                        |
        //      |                        |                        |
        //  300 D------------------------A------------------------F
        //      |                        |                        |
        //  200 |                        |                        |
        //      |                        |                        |
        //  100 |              5         |         6              |
        //      |                        |                        |
        //    0 X------------------------E------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(17), "Expected: edge count 17");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 300, 500, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 700, 0, 700), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 700, 1000, 700), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 500, 300, 0, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 300, 1000, 300), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 500, 300, 500, 0), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 500, 700, 500, 1000), Is.True, "Expected: has edge B-H"); // B-H
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 700, 0, 300), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge D-X"); // D-X
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 1000, 300, 1000, 700), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 1000, 700, 1000, 1000), Is.True, "Expected: has edge G-Z"); // G-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-H"); // Z-H
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge H-W"); // H-W

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 300, 500, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge A-B neighbours B-G"); // A-B neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge A-B neighbours B-H"); // A-B neighbours B-H
        edge = FindEdge(edges, 500, 700, 0, 700); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge B-C neighbours B-G"); // B-C neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge B-C neighbours B-H"); // B-C neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge B-C neighbours W-C"); // B-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 500, 700, 1000, 700); // B-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge B-G neighbours A-B"); // B-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge B-G neighbours B-C"); // B-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge B-G neighbours B-H"); // B-G neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge B-G neighbours F-G"); // B-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge B-G neighbours G-Z"); // B-G neighbours G-Z
        edge = FindEdge(edges, 500, 300, 0, 300); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-D neighbours A-F"); // A-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 500, 300, 1000, 300); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-F neighbours A-D"); // A-F neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge A-F neighbours F-G"); // A-F neighbours F-G
        edge = FindEdge(edges, 500, 300, 500, 0); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 500, 700, 500, 1000); // B-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 700)), Is.True, "Expected: edge B-H neighbours A-B"); // B-H neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge B-H neighbours B-C"); // B-H neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge B-H neighbours B-G"); // B-H neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-H neighbours Z-H"); // B-H neighbours Z-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge B-H neighbours H-W"); // B-H neighbours H-W
        edge = FindEdge(edges, 0, 1000, 0, 700); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge W-C neighbours B-C"); // W-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours H-W"); // W-C neighbours H-W
        edge = FindEdge(edges, 0, 700, 0, 300); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 0, 700)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 0, 300, 0, 0); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 0, 300)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 300)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge D-X neighbours X-E"); // D-X neighbours X-E
        edge = FindEdge(edges, 0, 0, 500, 0); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge X-E neighbours D-X"); // X-E neighbours D-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        edge = FindEdge(edges, 500, 0, 1000, 0); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 500, 0)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 1000, 300, 1000, 700); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge F-G neighbours B-G"); // F-G neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 300, 1000, 300)), Is.True, "Expected: edge F-G neighbours A-F"); // F-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge F-G neighbours G-Z"); // F-G neighbours G-Z
        edge = FindEdge(edges, 1000, 700, 1000, 1000); // G-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 1000, 700)), Is.True, "Expected: edge G-Z neighbours B-G"); // G-Z neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 700)), Is.True, "Expected: edge G-Z neighbours F-G"); // G-Z neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge G-Z neighbours Z-H"); // G-Z neighbours Z-H
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge Z-H neighbours B-H"); // Z-H neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 1000)), Is.True, "Expected: edge Z-H neighbours G-Z"); // Z-H neighbours G-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-H neighbours H-W"); // Z-H neighbours H-W
        edge = FindEdge(edges, 500, 1000, 0, 1000); // H-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 700, 500, 1000)), Is.True, "Expected: edge H-W neighbours B-H"); // H-W neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge H-W neighbours W-C"); // H-W neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge H-W neighbours Z-H"); // H-W neighbours Z-H
    }

    /// <summary>
    /// This test basically repeats <see cref="SixPointsInADoubleCross"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void SixPointsInADoubleCross_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(500, 300), // #4
            new VoronoiSite(100, 700), // #5
            new VoronoiSite(100, 300), // #6
        };

        // 1000 X--------------D-------------------C--------------W
        //      |              |                   |              |
        //  900 |              |                   |              |
        //      |              |                   |              |
        //  800 |              |                   |              |
        //      |              |                   |              |
        //  700 |    5         |         3         |         1    |
        //      |              |                   |              |
        //  600 |              |                   |              |
        //      |              |                   |              |
        //  500 E--------------A-------------------B--------------H
        //      |              |                   |              |
        //  400 |              |                   |              |
        //      |              |                   |              |
        //  300 |    6         |         4         |         2    |
        //      |              |                   |              |
        //  200 |              |                   |              |
        //      |              |                   |              |
        //  100 |              |                   |              |
        //      |              |                   |              |
        //    0 Y--------------F-------------------G--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(17), "Expected: edge count 17");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 500, 700, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 700, 500, 700, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 700, 500, 700, 0), Is.True, "Expected: has edge B-G"); // B-G
        Assume.That(HasEdge(edges, 300, 500, 300, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 300, 500, 300, 0), Is.True, "Expected: has edge A-F"); // A-F
        Assume.That(HasEdge(edges, 300, 500, 0, 500), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 700, 500, 1000, 500), Is.True, "Expected: has edge B-H"); // B-H
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 700, 1000, 300, 1000), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 300, 1000, 0, 1000), Is.True, "Expected: has edge D-X"); // D-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-E"); // X-E
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge E-Y"); // E-Y
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Y-F"); // Y-F
        Assume.That(HasEdge(edges, 300, 0, 700, 0), Is.True, "Expected: has edge F-G"); // F-G
        Assume.That(HasEdge(edges, 700, 0, 1000, 0), Is.True, "Expected: has edge G-Z"); // G-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Z-H"); // Z-H
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge H-W"); // H-W

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 500, 700, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge A-B neighbours B-G"); // A-B neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-B neighbours A-F"); // A-B neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-B neighbours A-E"); // A-B neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge A-B neighbours B-H"); // A-B neighbours B-H
        edge = FindEdge(edges, 700, 500, 700, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge B-C neighbours B-G"); // B-C neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge B-C neighbours B-H"); // B-C neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge B-C neighbours W-C"); // B-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        edge = FindEdge(edges, 700, 500, 700, 0); // B-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge B-G neighbours A-B"); // B-G neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge B-G neighbours B-C"); // B-G neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge B-G neighbours B-H"); // B-G neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge B-G neighbours F-G"); // B-G neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge B-G neighbours G-Z"); // B-G neighbours G-Z
        edge = FindEdge(edges, 300, 500, 300, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-D neighbours A-F"); // A-D neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-D neighbours A-E"); // A-D neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-X"); // A-D neighbours D-X
        edge = FindEdge(edges, 300, 500, 300, 0); // A-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge A-F neighbours A-B"); // A-F neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-F neighbours A-D"); // A-F neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge A-F neighbours A-E"); // A-F neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-F neighbours Y-F"); // A-F neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge A-F neighbours F-G"); // A-F neighbours F-G
        edge = FindEdge(edges, 300, 500, 0, 500); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge A-E neighbours A-B"); // A-E neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge A-E neighbours A-D"); // A-E neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge A-E neighbours A-F"); // A-E neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-E neighbours X-E"); // A-E neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-E neighbours E-Y"); // A-E neighbours E-Y
        edge = FindEdge(edges, 700, 500, 1000, 500); // B-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 700, 500)), Is.True, "Expected: edge B-H neighbours A-B"); // B-H neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge B-H neighbours B-C"); // B-H neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge B-H neighbours B-G"); // B-H neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-H neighbours Z-H"); // B-H neighbours Z-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge B-H neighbours H-W"); // B-H neighbours H-W
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge W-C neighbours B-C"); // W-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-C neighbours H-W"); // W-C neighbours H-W
        edge = FindEdge(edges, 700, 1000, 300, 1000); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 1000)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge C-D neighbours D-X"); // C-D neighbours D-X
        edge = FindEdge(edges, 300, 1000, 0, 1000); // D-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 1000)), Is.True, "Expected: edge D-X neighbours A-D"); // D-X neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 300, 1000)), Is.True, "Expected: edge D-X neighbours C-D"); // D-X neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge D-X neighbours X-E"); // D-X neighbours X-E
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge X-E neighbours A-E"); // X-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 0, 1000)), Is.True, "Expected: edge X-E neighbours D-X"); // X-E neighbours D-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-E neighbours E-Y"); // X-E neighbours E-Y
        edge = FindEdge(edges, 0, 500, 0, 0); // E-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 0, 500)), Is.True, "Expected: edge E-Y neighbours A-E"); // E-Y neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge E-Y neighbours X-E"); // E-Y neighbours X-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge E-Y neighbours Y-F"); // E-Y neighbours Y-F
        edge = FindEdge(edges, 0, 0, 300, 0); // Y-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge Y-F neighbours A-F"); // Y-F neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-F neighbours E-Y"); // Y-F neighbours E-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge Y-F neighbours F-G"); // Y-F neighbours F-G
        edge = FindEdge(edges, 300, 0, 700, 0); // F-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge F-G neighbours B-G"); // F-G neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 500, 300, 0)), Is.True, "Expected: edge F-G neighbours A-F"); // F-G neighbours A-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge F-G neighbours Y-F"); // F-G neighbours Y-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge F-G neighbours G-Z"); // F-G neighbours G-Z
        edge = FindEdge(edges, 700, 0, 1000, 0); // G-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 700, 0)), Is.True, "Expected: edge G-Z neighbours B-G"); // G-Z neighbours B-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 700, 0)), Is.True, "Expected: edge G-Z neighbours F-G"); // G-Z neighbours F-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge G-Z neighbours Z-H"); // G-Z neighbours Z-H
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Z-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge Z-H neighbours B-H"); // Z-H neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1000, 0)), Is.True, "Expected: edge Z-H neighbours G-Z"); // Z-H neighbours G-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-H neighbours H-W"); // Z-H neighbours H-W
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // H-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 500, 1000, 500)), Is.True, "Expected: edge H-W neighbours B-H"); // H-W neighbours B-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge H-W neighbours W-C"); // H-W neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge H-W neighbours Z-H"); // H-W neighbours Z-H
    }

    [Test]
    public void FivePointsInAKite()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 800), // #1
            new VoronoiSite(200, 200), // #2
            new VoronoiSite(800, 200), // #3
            new VoronoiSite(800, 800), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 X------------------------A------------------------Z
        //      |                        |                        |
        //  900 |                        |                        |
        //      |                        |                        |
        //  800 |         1             ,E,             4         |
        //      |                     ,'   ',                     |
        //  700 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  600 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  500 B---------F#             5             #H---------D
        //      |           ',                       ,'           |
        //  400 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  300 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //  200 |         2             'G'             3         |
        //      |                        |                        |
        //  100 |                        |                        |
        //      |                        |                        |
        //    0 Y------------------------C------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(16), "Expected: edge count 16");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 500, 800), Is.True, "Expected: has edge A-E"); // A-E
        Assume.That(HasEdge(edges, 1000, 500, 800, 500), Is.True, "Expected: has edge D-H"); // D-H
        Assume.That(HasEdge(edges, 500, 0, 500, 200), Is.True, "Expected: has edge C-G"); // C-G
        Assume.That(HasEdge(edges, 0, 500, 200, 500), Is.True, "Expected: has edge B-F"); // B-F
        Assume.That(HasEdge(edges, 500, 800, 800, 500), Is.True, "Expected: has edge E-H"); // E-H
        Assume.That(HasEdge(edges, 800, 500, 500, 200), Is.True, "Expected: has edge H-G"); // H-G
        Assume.That(HasEdge(edges, 500, 200, 200, 500), Is.True, "Expected: has edge G-F"); // G-F
        Assume.That(HasEdge(edges, 200, 500, 500, 800), Is.True, "Expected: has edge F-E"); // F-E
        Assume.That(HasEdge(edges, 0, 1000, 500, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 500, 1000, 1000, 1000), Is.True, "Expected: has edge A-Z"); // A-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 500), Is.True, "Expected: has edge Z-D"); // Z-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 500, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 500, 0, 0, 0), Is.True, "Expected: has edge C-Y"); // C-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 500), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 500, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 1000, 500, 800); // A-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: edge A-E neighbours E-H"); // A-E neighbours E-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: edge A-E neighbours F-E"); // A-E neighbours F-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge A-E neighbours X-A"); // A-E neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge A-E neighbours A-Z"); // A-E neighbours A-Z
        edge = FindEdge(edges, 1000, 500, 800, 500); // D-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: edge D-H neighbours E-H"); // D-H neighbours E-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: edge D-H neighbours H-G"); // D-H neighbours H-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge D-H neighbours Z-D"); // D-H neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge D-H neighbours D-W"); // D-H neighbours D-W
        edge = FindEdge(edges, 500, 0, 500, 200); // C-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: edge C-G neighbours H-G"); // C-G neighbours H-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: edge C-G neighbours G-F"); // C-G neighbours G-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge C-G neighbours W-C"); // C-G neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge C-G neighbours C-Y"); // C-G neighbours C-Y
        edge = FindEdge(edges, 0, 500, 200, 500); // B-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: edge B-F neighbours G-F"); // B-F neighbours G-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: edge B-F neighbours F-E"); // B-F neighbours F-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge B-F neighbours Y-B"); // B-F neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge B-F neighbours B-X"); // B-F neighbours B-X
        edge = FindEdge(edges, 500, 800, 800, 500); // E-H
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: edge E-H neighbours A-E"); // E-H neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: edge E-H neighbours D-H"); // E-H neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: edge E-H neighbours H-G"); // E-H neighbours H-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: edge E-H neighbours F-E"); // E-H neighbours F-E
        edge = FindEdge(edges, 800, 500, 500, 200); // H-G
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: edge H-G neighbours D-H"); // H-G neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: edge H-G neighbours C-G"); // H-G neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: edge H-G neighbours E-H"); // H-G neighbours E-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: edge H-G neighbours G-F"); // H-G neighbours G-F
        edge = FindEdge(edges, 500, 200, 200, 500); // G-F
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: edge G-F neighbours C-G"); // G-F neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: edge G-F neighbours B-F"); // G-F neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 500, 500, 200)), Is.True, "Expected: edge G-F neighbours H-G"); // G-F neighbours H-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 500, 500, 800)), Is.True, "Expected: edge G-F neighbours F-E"); // G-F neighbours F-E
        edge = FindEdge(edges, 200, 500, 500, 800); // F-E
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: edge F-E neighbours A-E"); // F-E neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: edge F-E neighbours B-F"); // F-E neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 800, 800, 500)), Is.True, "Expected: edge F-E neighbours E-H"); // F-E neighbours E-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 200, 200, 500)), Is.True, "Expected: edge F-E neighbours G-F"); // F-E neighbours G-F
        edge = FindEdge(edges, 0, 1000, 500, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: edge X-A neighbours A-E"); // X-A neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-Z"); // X-A neighbours A-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 500, 1000, 1000, 1000); // A-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 500, 800)), Is.True, "Expected: edge A-Z neighbours A-E"); // A-Z neighbours A-E
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge A-Z neighbours X-A"); // A-Z neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge A-Z neighbours Z-D"); // A-Z neighbours Z-D
        edge = FindEdge(edges, 1000, 1000, 1000, 500); // Z-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: edge Z-D neighbours D-H"); // Z-D neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 1000)), Is.True, "Expected: edge Z-D neighbours A-Z"); // Z-D neighbours A-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge Z-D neighbours D-W"); // Z-D neighbours D-W
        edge = FindEdge(edges, 1000, 500, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 800, 500)), Is.True, "Expected: edge D-W neighbours D-H"); // D-W neighbours D-H
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 500)), Is.True, "Expected: edge D-W neighbours Z-D"); // D-W neighbours Z-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge D-W neighbours W-C"); // D-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 500, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: edge W-C neighbours C-G"); // W-C neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 0)), Is.True, "Expected: edge W-C neighbours D-W"); // W-C neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Y"); // W-C neighbours C-Y
        edge = FindEdge(edges, 500, 0, 0, 0); // C-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 500, 200)), Is.True, "Expected: edge C-Y neighbours C-G"); // C-Y neighbours C-G
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 0)), Is.True, "Expected: edge C-Y neighbours W-C"); // C-Y neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge C-Y neighbours Y-B"); // C-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 0, 500); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: edge Y-B neighbours B-F"); // Y-B neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 0)), Is.True, "Expected: edge Y-B neighbours C-Y"); // Y-B neighbours C-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 1000)), Is.True, "Expected: edge Y-B neighbours B-X"); // Y-B neighbours B-X
        edge = FindEdge(edges, 0, 500, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 200, 500)), Is.True, "Expected: edge B-X neighbours B-F"); // B-X neighbours B-F
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 500)), Is.True, "Expected: edge B-X neighbours Y-B"); // B-X neighbours Y-B
    }

    [Test]
    public void FivePointsInABorderTouchingKite()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(0, 1000), // #1
            new VoronoiSite(0, 0), // #2
            new VoronoiSite(1000, 0), // #3
            new VoronoiSite(1000, 1000), // #4
            new VoronoiSite(500, 500), // #5
        };

        // 1000 1-----------------------#A#-----------------------4
        //      |                     ,'   ',                     |
        //  900 |                  ,·'       '·,                  |
        //      |                ,'             ',                |
        //  800 |             ,·'                 '·,             |
        //      |           ,'                       ',           |
        //  700 |        ,·'                           '·,        |
        //      |      ,'                                 ',      |
        //  600 |   ,·'                                     '·,   |
        //      | ,'                                           ', |
        //  500 B#                       5                       #D
        //      | ',                                           ,' |
        //  400 |   '·,                                     ,·'   |
        //      |      ',                                 ,'      |
        //  300 |        '·,                           ,·'        |
        //      |           ',                       ,'           |
        //  200 |             '·,                 ,·'             |
        //      |                ',             ,'                |
        //  100 |                  '·,       ,·'                  |
        //      |                     ',   ,'                     |
        //    0 2-----------------------#C#-----------------------3
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(12), "Expected: edge count 12");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 500, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 500, 0, 1000, 500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1000, 500, 500, 1000), Is.True, "Expected: has edge D-A"); // D-A
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-B"); // X-B
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge B-Y"); // B-Y
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge C-W"); // C-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge D-Z"); // D-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-A"); // Z-A
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge A-X"); // A-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 1000, 0, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge A-B neighbours D-A"); // A-B neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours X-B"); // A-B neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Y"); // A-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Z-A"); // A-B neighbours Z-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-X"); // A-B neighbours A-X
        edge = FindEdge(edges, 0, 500, 500, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge B-C neighbours C-D"); // B-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-C neighbours X-B"); // B-C neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge B-C neighbours B-Y"); // B-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-C neighbours Y-C"); // B-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge B-C neighbours C-W"); // B-C neighbours C-W
        edge = FindEdge(edges, 500, 0, 1000, 500); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge C-D neighbours B-C"); // C-D neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge C-D neighbours D-A"); // C-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-D neighbours Y-C"); // C-D neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge C-D neighbours C-W"); // C-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-D neighbours W-D"); // C-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge C-D neighbours D-Z"); // C-D neighbours D-Z
        edge = FindEdge(edges, 1000, 500, 500, 1000); // D-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge D-A neighbours A-B"); // D-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge D-A neighbours C-D"); // D-A neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-A neighbours W-D"); // D-A neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge D-A neighbours D-Z"); // D-A neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge D-A neighbours Z-A"); // D-A neighbours Z-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge D-A neighbours A-X"); // D-A neighbours A-X
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge X-B neighbours A-B"); // X-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge X-B neighbours B-C"); // X-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-B neighbours B-Y"); // X-B neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-B neighbours A-X"); // X-B neighbours A-X
        edge = FindEdge(edges, 0, 500, 0, 0); // B-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge B-Y neighbours A-B"); // B-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge B-Y neighbours B-C"); // B-Y neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-Y neighbours X-B"); // B-Y neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-Y neighbours Y-C"); // B-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 500, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge Y-C neighbours B-C"); // Y-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge Y-C neighbours C-D"); // Y-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-C neighbours B-Y"); // Y-C neighbours B-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-W"); // Y-C neighbours C-W
        edge = FindEdge(edges, 500, 0, 1000, 0); // C-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 500, 0)), Is.True, "Expected: edge C-W neighbours B-C"); // C-W neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge C-W neighbours C-D"); // C-W neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-W neighbours Y-C"); // C-W neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-W neighbours W-D"); // C-W neighbours W-D
        edge = FindEdge(edges, 1000, 0, 1000, 500); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge W-D neighbours C-D"); // W-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge W-D neighbours D-A"); // W-D neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-D neighbours C-W"); // W-D neighbours C-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-D neighbours D-Z"); // W-D neighbours D-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // D-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 500)), Is.True, "Expected: edge D-Z neighbours C-D"); // D-Z neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge D-Z neighbours D-A"); // D-Z neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge D-Z neighbours W-D"); // D-Z neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge D-Z neighbours Z-A"); // D-Z neighbours Z-A
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge Z-A neighbours A-B"); // Z-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge Z-A neighbours D-A"); // Z-A neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-A neighbours D-Z"); // Z-A neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-A neighbours A-X"); // Z-A neighbours A-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // A-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 500)), Is.True, "Expected: edge A-X neighbours A-B"); // A-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 500, 1000)), Is.True, "Expected: edge A-X neighbours D-A"); // A-X neighbours D-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-X neighbours X-B"); // A-X neighbours X-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-X neighbours Z-A"); // A-X neighbours Z-A
    }

    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 X-----------------------------------------------##B
        //      |                                          ,,·''  |
        //  900 |              1                      ,,·''       |
        //      |                                ,,·''            |
        //  800 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  700 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  600 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  500 A##                      3                        |
        //      |  ''·,,                                          |
        //  400 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  300 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  200 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  100 |              2                      ''·,,       |
        //      |                                          ''·,,  |
        //    0 Y-----------------------------------------------##C
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 500, 1000, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 500, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 500, 1000, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 0, 500, 1000, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-B"); // A-C neighbours C-B
        edge = FindEdge(edges, 0, 1000, 0, 500); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 0, 500, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-Y neighbours Y-C"); // A-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 1000, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-C neighbours A-Y"); // Y-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours C-B"); // Y-C neighbours C-B
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 0)), Is.True, "Expected: edge C-B neighbours A-C"); // C-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-B neighbours Y-C"); // C-B neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-B neighbours B-X"); // C-B neighbours B-X
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 1000, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours C-B"); // B-X neighbours C-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(100, 700), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 Y------------------------A------------------------X
        //      |                       ' '                       |
        //  900 |                     ,'   ',                     |
        //      |                    ,       ,                    |
        //  800 |                   ·         ·                   |
        //      |                  '           '                  |
        //  700 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  600 |              ·                   ·              |
        //      |             '                     '             |
        //  500 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  400 |         ·                             ·         |
        //      |        '                               '        |
        //  300 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  200 |    ·                                       ·    |
        //      |   '                                         '   |
        //  100 | ,'                                           ', |
        //      |,                                               ,|
        //    0 C-------------------------------------------------B
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 1000, 1000, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 1000, 0, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 1000, 1000, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 500, 1000, 0, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-B"); // A-C neighbours C-B
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 500, 1000, 0, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-Y neighbours Y-C"); // A-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 0, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours A-Y"); // Y-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-B"); // Y-C neighbours C-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 0)), Is.True, "Expected: edge C-B neighbours A-C"); // C-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-B neighbours Y-C"); // C-B neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-B neighbours B-X"); // C-B neighbours B-X
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 1000, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-X neighbours C-B"); // B-X neighbours C-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(700, 900), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 C##-----------------------------------------------Y
        //      |  ''·,,                                          |
        //  900 |       ''·,,                      2              |
        //      |            ''·,,                                |
        //  800 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  700 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  600 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  500 |                        3                      ##A
        //      |                                          ,,·''  |
        //  400 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  300 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  200 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  100 |       ,,·''                      1              |
        //      |  ,,·''                                          |
        //    0 B##-----------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 500, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 500, 0, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 500, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 1000, 500, 0, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours C-B"); // A-C neighbours C-B
        edge = FindEdge(edges, 1000, 0, 1000, 500); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-Y neighbours Y-C"); // A-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours A-Y"); // Y-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-C neighbours C-B"); // Y-C neighbours C-B
        edge = FindEdge(edges, 0, 1000, 0, 0); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 1000)), Is.True, "Expected: edge C-B neighbours A-C"); // C-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-B neighbours Y-C"); // C-B neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-B neighbours B-X"); // C-B neighbours B-X
        edge = FindEdge(edges, 0, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 0, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-X neighbours C-B"); // B-X neighbours C-B
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(900, 300), // #2
            new VoronoiSite(500, 500), // #3
        };

        // 1000 B-------------------------------------------------C
        //      |'                                               '|
        //  900 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  800 |    ·                                       ·    |
        //      |     '                                     '     |
        //  700 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  600 |         ·                             ·         |
        //      |          '                           '          |
        //  500 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  400 |              ·                   ·              |
        //      |               '                 '               |
        //  300 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //  200 |                   ·         ·                   |
        //      |                    '       '                    |
        //  100 |                     ',   ,'                     |
        //      |                       , ,                       |
        //    0 X------------------------A------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(7), "Expected: edge count 7");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 500, 0, 1000, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge B-X"); // B-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 0, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        edge = FindEdge(edges, 500, 0, 1000, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours Y-C"); // A-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-B"); // A-C neighbours C-B
        edge = FindEdge(edges, 0, 0, 500, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        edge = FindEdge(edges, 500, 0, 1000, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-Y neighbours Y-C"); // A-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours A-C"); // Y-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours A-Y"); // Y-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours C-B"); // Y-C neighbours C-B
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 1000)), Is.True, "Expected: edge C-B neighbours A-C"); // C-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-B neighbours Y-C"); // C-B neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-B neighbours B-X"); // C-B neighbours B-X
        edge = FindEdge(edges, 0, 1000, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 0, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-X neighbours C-B"); // B-X neighbours C-B
    }

    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 900), // #1
            new VoronoiSite(100, 100), // #2
            new VoronoiSite(300, 500), // #3
        };

        // 1000 X-------------------------------------##B---------W
        //      |                                ,,·''            |
        //  900 |    1                      ,,·''                 |
        //      |                      ,,·''                      |
        //  800 |                 ,,·''                           |
        //      |            ,,·''                                |
        //  700 |       ,,·''                                     |
        //      |  ,,·''                                          |
        //  600 A''                                               |
        //      |                                                 |
        //  500 |              3                                  |
        //      |                                                 |
        //  400 D,,                                               |
        //      |  ''·,,                                          |
        //  300 |       ''·,,                                     |
        //      |            ''·,,                                |
        //  200 |                 ''·,,                           |
        //      |                      ''·,,                      |
        //  100 |    2                      ''·,,                 |
        //      |                                ''·,,            |
        //    0 Y-------------------------------------##C---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 800, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 400, 800, 0), Is.True, "Expected: has edge D-C"); // D-C
        Assume.That(HasEdge(edges, 800, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 600, 0, 400), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 0, 0, 800, 0), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 800, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge Z-W"); // Z-W
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge W-B"); // W-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 600, 800, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 400)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        edge = FindEdge(edges, 0, 400, 800, 0); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 400)), Is.True, "Expected: edge D-C neighbours A-D"); // D-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge D-C neighbours D-Y"); // D-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge D-C neighbours Y-C"); // D-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge D-C neighbours C-Z"); // D-C neighbours C-Z
        edge = FindEdge(edges, 800, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge B-X neighbours W-B"); // B-X neighbours W-B
        edge = FindEdge(edges, 0, 1000, 0, 600); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 400)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 0, 600, 0, 400); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: edge A-D neighbours D-C"); // A-D neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 0, 400, 0, 0); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: edge D-Y neighbours D-C"); // D-Y neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 400)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge D-Y neighbours Y-C"); // D-Y neighbours Y-C
        edge = FindEdge(edges, 0, 0, 800, 0); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: edge Y-C neighbours D-C"); // Y-C neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge Y-C neighbours D-Y"); // Y-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours C-Z"); // Y-C neighbours C-Z
        edge = FindEdge(edges, 800, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 800, 0)), Is.True, "Expected: edge C-Z neighbours D-C"); // C-Z neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 800, 0)), Is.True, "Expected: edge C-Z neighbours Y-C"); // C-Z neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge C-Z neighbours Z-W"); // C-Z neighbours Z-W
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // Z-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 1000, 0)), Is.True, "Expected: edge Z-W neighbours C-Z"); // Z-W neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge Z-W neighbours W-B"); // Z-W neighbours W-B
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 800, 1000)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge W-B neighbours B-X"); // W-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-B neighbours Z-W"); // W-B neighbours Z-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 900), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(500, 700), // #3
        };

        // 1000 Y-------------------D---------A-------------------X
        //      |                  '           '                  |
        //  900 |    2           ,'             ',           1    |
        //      |               ,                 ,               |
        //  800 |              ·                   ·              |
        //      |             '                     '             |
        //  700 |           ,'           3           ',           |
        //      |          ,                           ,          |
        //  600 |         ·                             ·         |
        //      |        '                               '        |
        //  500 |      ,'                                 ',      |
        //      |     ,                                     ,     |
        //  400 |    ·                                       ·    |
        //      |   '                                         '   |
        //  300 | ,'                                           ', |
        //      |,                                               ,|
        //  200 C                                                 B
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Z-------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1000, 1000, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 400, 1000, 0, 200), Is.True, "Expected: has edge D-C"); // D-C
        Assume.That(HasEdge(edges, 1000, 200, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 600, 1000, 400, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge Z-W"); // Z-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge W-B"); // W-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 1000, 1000, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 400, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        edge = FindEdge(edges, 400, 1000, 0, 200); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 400, 1000)), Is.True, "Expected: edge D-C neighbours A-D"); // D-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge D-C neighbours D-Y"); // D-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge D-C neighbours Y-C"); // D-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge D-C neighbours C-Z"); // D-C neighbours C-Z
        edge = FindEdge(edges, 1000, 200, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge B-X neighbours W-B"); // B-X neighbours W-B
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 400, 1000)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 600, 1000, 400, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: edge A-D neighbours D-C"); // A-D neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 400, 1000, 0, 1000); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: edge D-Y neighbours D-C"); // D-Y neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 400, 1000)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge D-Y neighbours Y-C"); // D-Y neighbours Y-C
        edge = FindEdge(edges, 0, 1000, 0, 200); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: edge Y-C neighbours D-C"); // Y-C neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours D-Y"); // Y-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Y-C neighbours C-Z"); // Y-C neighbours C-Z
        edge = FindEdge(edges, 0, 200, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 200)), Is.True, "Expected: edge C-Z neighbours D-C"); // C-Z neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge C-Z neighbours Y-C"); // C-Z neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge C-Z neighbours Z-W"); // C-Z neighbours Z-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // Z-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Z-W neighbours C-Z"); // Z-W neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge Z-W neighbours W-B"); // Z-W neighbours W-B
        edge = FindEdge(edges, 1000, 0, 1000, 200); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 1000, 200)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge W-B neighbours B-X"); // W-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours Z-W"); // W-B neighbours Z-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 100), // #1
            new VoronoiSite(900, 900), // #2
            new VoronoiSite(700, 500), // #3
        };

        // 1000 Z---------C##-------------------------------------Y
        //      |            ''·,,                                |
        //  900 |                 ''·,,                      2    |
        //      |                      ''·,,                      |
        //  800 |                           ''·,,                 |
        //      |                                ''·,,            |
        //  700 |                                     ''·,,       |
        //      |                                          ''·,,  |
        //  600 |                                               ''D
        //      |                                                 |
        //  500 |                                  3              |
        //      |                                                 |
        //  400 |                                               ,,A
        //      |                                          ,,·''  |
        //  300 |                                     ,,·''       |
        //      |                                ,,·''            |
        //  200 |                           ,,·''                 |
        //      |                      ,,·''                      |
        //  100 |                 ,,·''                      1    |
        //      |            ,,·''                                |
        //    0 W---------B##-------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 400, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 600, 200, 1000), Is.True, "Expected: has edge D-C"); // D-C
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 400, 1000, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 1000, 1000, 200, 1000), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 200, 1000, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge Z-W"); // Z-W
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge W-B"); // W-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 400, 200, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 600)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        edge = FindEdge(edges, 1000, 600, 200, 1000); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 600)), Is.True, "Expected: edge D-C neighbours A-D"); // D-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge D-C neighbours D-Y"); // D-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge D-C neighbours Y-C"); // D-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge D-C neighbours C-Z"); // D-C neighbours C-Z
        edge = FindEdge(edges, 200, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-X neighbours W-B"); // B-X neighbours W-B
        edge = FindEdge(edges, 1000, 0, 1000, 400); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 600)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 1000, 400, 1000, 600); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: edge A-D neighbours D-C"); // A-D neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: edge D-Y neighbours D-C"); // D-Y neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 600)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge D-Y neighbours Y-C"); // D-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 1000, 200, 1000); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: edge Y-C neighbours D-C"); // Y-C neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours D-Y"); // Y-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Y-C neighbours C-Z"); // Y-C neighbours C-Z
        edge = FindEdge(edges, 200, 1000, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 200, 1000)), Is.True, "Expected: edge C-Z neighbours D-C"); // C-Z neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 200, 1000)), Is.True, "Expected: edge C-Z neighbours Y-C"); // C-Z neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge C-Z neighbours Z-W"); // C-Z neighbours Z-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // Z-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 0, 1000)), Is.True, "Expected: edge Z-W neighbours C-Z"); // Z-W neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge Z-W neighbours W-B"); // Z-W neighbours W-B
        edge = FindEdge(edges, 0, 0, 200, 0); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 200, 0)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours B-X"); // W-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-B neighbours Z-W"); // W-B neighbours Z-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(900, 100), // #2
            new VoronoiSite(500, 300), // #3
        };

        // 1000 W-------------------------------------------------Z
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 B                                                 C
        //      |'                                               '|
        //  700 | ',                                           ,' |
        //      |   ,                                         ,   |
        //  600 |    ·                                       ·    |
        //      |     '                                     '     |
        //  500 |      ',                                 ,'      |
        //      |        ,                               ,        |
        //  400 |         ·                             ·         |
        //      |          '                           '          |
        //  300 |           ',           3           ,'           |
        //      |             ,                     ,             |
        //  200 |              ·                   ·              |
        //      |               '                 '               |
        //  100 |    1           ',             ,'           2    |
        //      |                  ,           ,                  |
        //    0 X-------------------A---------D-------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 400, 0, 0, 800), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 600, 0, 1000, 800), Is.True, "Expected: has edge D-C"); // D-C
        Assume.That(HasEdge(edges, 0, 800, 0, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 400, 0, 600, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 800), Is.True, "Expected: has edge Y-C"); // Y-C
        Assume.That(HasEdge(edges, 1000, 800, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge Z-W"); // Z-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge W-B"); // W-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 400, 0, 0, 800); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        edge = FindEdge(edges, 600, 0, 1000, 800); // D-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 600, 0)), Is.True, "Expected: edge D-C neighbours A-D"); // D-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge D-C neighbours D-Y"); // D-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge D-C neighbours Y-C"); // D-C neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge D-C neighbours C-Z"); // D-C neighbours C-Z
        edge = FindEdge(edges, 0, 800, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge B-X neighbours W-B"); // B-X neighbours W-B
        edge = FindEdge(edges, 0, 0, 400, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 600, 0)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 400, 0, 600, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: edge A-D neighbours D-C"); // A-D neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 600, 0, 1000, 0); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: edge D-Y neighbours D-C"); // D-Y neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 600, 0)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge D-Y neighbours Y-C"); // D-Y neighbours Y-C
        edge = FindEdge(edges, 1000, 0, 1000, 800); // Y-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: edge Y-C neighbours D-C"); // Y-C neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge Y-C neighbours D-Y"); // Y-C neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Y-C neighbours C-Z"); // Y-C neighbours C-Z
        edge = FindEdge(edges, 1000, 800, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 800)), Is.True, "Expected: edge C-Z neighbours D-C"); // C-Z neighbours D-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 800)), Is.True, "Expected: edge C-Z neighbours Y-C"); // C-Z neighbours Y-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge C-Z neighbours Z-W"); // C-Z neighbours Z-W
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // Z-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 1000)), Is.True, "Expected: edge Z-W neighbours C-Z"); // Z-W neighbours C-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge Z-W neighbours W-B"); // Z-W neighbours W-B
        edge = FindEdge(edges, 0, 1000, 0, 800); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 0, 800)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge W-B neighbours B-X"); // W-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-B neighbours Z-W"); // W-B neighbours Z-W
    }

    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(500, 600), // #1
            new VoronoiSite(400, 900), // #2
            new VoronoiSite(400, 300), // #3
        };

        // 1200 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1100 |                                                           |
        //      |                                                           |
        // 1000 |                                                        ,,,C
        //      |                                                ,,,··'''   |
        //  900 |                   2                     ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  800 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  700 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  600 A###                     1                                  |
        //      |   '''··,,,                                                |
        //  500 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  400 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  300 |                   3                     '''·,,,           |
        //      |                                                '''··,,,   |
        //  200 |                                                        '''B
        //      |                                                           |
        //  100 |                                                           |
        //      |                                                           |
        //    0 Y-----------------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 600, 1200, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 600, 1200, 200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1200, 0, 600), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 1200, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1200, 0, 1200, 200), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 1200, 200, 1200, 1000), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1200, 1000, 1200, 1200), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1200, 1200, 0, 1200), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 600, 1200, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 200, 1200, 1000)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1000, 1200, 1200)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 0, 600, 1200, 200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 200)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 200, 1200, 1000)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 0, 1200, 0, 600); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 0, 600, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1200, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 200)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 1200, 0, 1200, 200); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 200, 1200, 1000)), Is.True, "Expected: edge W-B neighbours B-C"); // W-B neighbours B-C
        edge = FindEdge(edges, 1200, 200, 1200, 1000); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 200)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 200)), Is.True, "Expected: edge B-C neighbours W-B"); // B-C neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1000, 1200, 1200)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 1200, 1000, 1200, 1200); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 1200, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 200, 1200, 1000)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge C-Z neighbours Z-X"); // C-Z neighbours Z-X
        edge = FindEdge(edges, 1200, 1200, 0, 1200); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1000, 1200, 1200)), Is.True, "Expected: edge Z-X neighbours C-Z"); // Z-X neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 700), // #1
            new VoronoiSite(900, 800), // #2
            new VoronoiSite(300, 800), // #3
        };

        // 1200 Y-----------------------------A-----------------------------X
        //      |                            · ·                            |
        // 1100 |                           ·   ·                           |
        //      |                          ·     ·                          |
        // 1000 |                          ·     ·                          |
        //      |                         ·       ·                         |
        //  900 |                        ·         ·                        |
        //      |                       ·           ·                       |
        //  800 |              3       ·             ·       2              |
        //      |                     ·               ·                     |
        //  700 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  600 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  500 |                 ·                       ·                 |
        //      |                ·                         ·                |
        //  400 |                ·                         ·                |
        //      |               ·                           ·               |
        //  300 |              ·                             ·              |
        //      |             ·                               ·             |
        //  200 |            ·                                 ·            |
        //      |           ·                                   ·           |
        //  100 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //    0 W---------B---------------------------------------C---------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 1200, 1000, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 1200, 200, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 1200, 600, 1200), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 600, 1200, 0, 1200), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1200, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 1000, 0, 1200, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1200, 0, 1200, 1200), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 1200, 1000, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1200, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 600, 1200, 200, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 1200, 1200, 600, 1200); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 600, 1200, 0, 1200); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1200, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 0, 0, 200, 0); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge W-B neighbours B-C"); // W-B neighbours B-C
        edge = FindEdge(edges, 200, 0, 1000, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 200, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge B-C neighbours W-B"); // B-C neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1200, 0)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 1000, 0, 1200, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 1000, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge C-Z neighbours Z-X"); // C-Z neighbours Z-X
        edge = FindEdge(edges, 1200, 0, 1200, 1200); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1200, 0)), Is.True, "Expected: edge Z-X neighbours C-Z"); // Z-X neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 600), // #1
            new VoronoiSite(800, 300), // #2
            new VoronoiSite(800, 900), // #3
        };

        // 1200 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1100 |                                                           |
        //      |                                                           |
        // 1000 B,,,                                                        |
        //      |   '''··,,,                                                |
        //  900 |           '''·,,,                     3                   |
        //      |                  '''··,,,                                 |
        //  800 |                          '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  700 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  600 |                                  1                     ###A
        //      |                                                ,,,··'''   |
        //  500 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  400 |                          ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  300 |           ,,,·'''                     2                   |
        //      |   ,,,··'''                                                |
        //  200 C'''                                                        |
        //      |                                                           |
        //  100 |                                                           |
        //      |                                                           |
        //    0 Z-----------------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 600, 0, 200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1200, 600, 0, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 0, 1200, 600), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1200, 600, 1200, 1200), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1200, 1200, 0, 1200), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1200, 0, 1000), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 0, 1000, 0, 200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 200, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 1200, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1200, 600, 0, 200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 1200, 600, 0, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1000)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 1200, 0, 1200, 600); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 1200, 600, 1200, 1200); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 1200, 1200, 0, 1200); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1000)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 0, 1200, 0, 1000); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge W-B neighbours B-C"); // W-B neighbours B-C
        edge = FindEdge(edges, 0, 1000, 0, 200); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 1000)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1000)), Is.True, "Expected: edge B-C neighbours W-B"); // B-C neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 0, 200, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 0, 200)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 200)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge C-Z neighbours Z-X"); // C-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1200, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 0)), Is.True, "Expected: edge Z-X neighbours C-Z"); // Z-X neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyAtBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyAtBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 500), // #1
            new VoronoiSite(300, 400), // #2
            new VoronoiSite(900, 400), // #3
        };

        // 1200 Z---------C---------------------------------------B---------W
        //      |          ·                                     ·          |
        // 1100 |           ·                                   ·           |
        //      |           ·                                   ·           |
        // 1000 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  900 |              ·                             ·              |
        //      |               ·                           ·               |
        //  800 |                ·                         ·                |
        //      |                ·                         ·                |
        //  700 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  600 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  500 |                     ·       1       ·                     |
        //      |                     ·               ·                     |
        //  400 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //  300 |                        ·         ·                        |
        //      |                         ·       ·                         |
        //  200 |                          ·     ·                          |
        //      |                          ·     ·                          |
        //  100 |                           ·   ·                           |
        //      |                            · ·                            |
        //    0 X-----------------------------A-----------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 600, 0, 200, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 600, 0, 1000, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 600, 0, 1200, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1200, 0, 1200, 1200), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1200, 1200, 1000, 1200), Is.True, "Expected: has edge W-B"); // W-B
        Assume.That(HasEdge(edges, 1000, 1200, 200, 1200), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 200, 1200, 0, 1200), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1200, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 600, 0, 200, 1200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1200, 200, 1200)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1200, 0, 1200)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 600, 0, 1000, 1200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge A-B neighbours A-Y"); // A-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1000, 1200)), Is.True, "Expected: edge A-B neighbours W-B"); // A-B neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1200, 200, 1200)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        edge = FindEdge(edges, 0, 0, 600, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        edge = FindEdge(edges, 600, 0, 1200, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: edge A-Y neighbours A-B"); // A-Y neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge A-Y neighbours Y-W"); // A-Y neighbours Y-W
        edge = FindEdge(edges, 1200, 0, 1200, 1200); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge Y-W neighbours A-Y"); // Y-W neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1000, 1200)), Is.True, "Expected: edge Y-W neighbours W-B"); // Y-W neighbours W-B
        edge = FindEdge(edges, 1200, 1200, 1000, 1200); // W-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: edge W-B neighbours A-B"); // W-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge W-B neighbours Y-W"); // W-B neighbours Y-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1200, 200, 1200)), Is.True, "Expected: edge W-B neighbours B-C"); // W-B neighbours B-C
        edge = FindEdge(edges, 1000, 1200, 200, 1200); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 1200)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1000, 1200)), Is.True, "Expected: edge B-C neighbours W-B"); // B-C neighbours W-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1200, 0, 1200)), Is.True, "Expected: edge B-C neighbours C-Z"); // B-C neighbours C-Z
        edge = FindEdge(edges, 200, 1200, 0, 1200); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 200, 1200)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1200, 200, 1200)), Is.True, "Expected: edge C-Z neighbours B-C"); // C-Z neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge C-Z neighbours Z-X"); // C-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1200, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1200, 0, 1200)), Is.True, "Expected: edge Z-X neighbours C-Z"); // Z-X neighbours C-Z
    }

    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(200, 600), // #1
            new VoronoiSite(100, 900), // #2
            new VoronoiSite(100, 300), // #3
        };

        // 1200 X-----------------------------------------------------------Z
        //      |                                                           |
        // 1100 |                                                        ,,,B
        //      |                                                ,,,··'''   |
        // 1000 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  900 |    2                     ,,,·'''                          |
        //      |                  ,,,··'''                                 |
        //  800 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  700 A'''                                                        |
        //      |                                                           |
        //  600 |         1                                                 |
        //      |                                                           |
        //  500 D,,,                                                        |
        //      |   '''··,,,                                                |
        //  400 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  300 |    3                     '''·,,,                          |
        //      |                                 '''··,,,                  |
        //  200 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  100 |                                                        '''C
        //      |                                                           |
        //    0 Y-----------------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 700, 1200, 1100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1200, 100, 0, 500), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1200, 100, 1200, 1100), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 1200, 1100, 1200, 1200), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1200, 1200, 0, 1200), Is.True, "Expected: has edge Z-X"); // Z-X
        Assume.That(HasEdge(edges, 0, 1200, 0, 700), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 700, 0, 500), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 0, 0, 1200, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1200, 0, 1200, 100), Is.True, "Expected: has edge W-C"); // W-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 700, 1200, 1100); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 1200, 1100)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1100, 1200, 1200)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 700)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        edge = FindEdge(edges, 1200, 100, 0, 500); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 1200, 1100)), Is.True, "Expected: edge C-D neighbours C-B"); // C-D neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge C-D neighbours D-Y"); // C-D neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 100)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        edge = FindEdge(edges, 1200, 100, 1200, 1100); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: edge C-B neighbours C-D"); // C-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1100, 1200, 1200)), Is.True, "Expected: edge C-B neighbours B-Z"); // C-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 100)), Is.True, "Expected: edge C-B neighbours W-C"); // C-B neighbours W-C
        edge = FindEdge(edges, 1200, 1100, 1200, 1200); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 1200, 1100)), Is.True, "Expected: edge B-Z neighbours C-B"); // B-Z neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1200, 1200, 0, 1200); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1100, 1200, 1200)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 700)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        edge = FindEdge(edges, 0, 1200, 0, 700); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 0, 700, 0, 500); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 1200, 1100)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 700)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 0, 500, 0, 0); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: edge D-Y neighbours C-D"); // D-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 500)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge D-Y neighbours Y-W"); // D-Y neighbours Y-W
        edge = FindEdge(edges, 0, 0, 1200, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Y-W neighbours D-Y"); // Y-W neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 100)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 1200, 0, 1200, 100); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 0, 500)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 100, 1200, 1100)), Is.True, "Expected: edge W-C neighbours C-B"); // W-C neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 1000), // #1
            new VoronoiSite(900, 1100), // #2
            new VoronoiSite(300, 1100), // #3
        };

        // 1200 Y------------------------D---------A------------------------X
        //      |                       ·           ·                       |
        // 1100 |              3       ·             ·       2              |
        //      |                      ·              ·                     |
        // 1000 |                     ·       1       ·                     |
        //      |                    ·                 ·                    |
        //  900 |                   ·                   ·                   |
        //      |                  ·                     ·                  |
        //  800 |                 ·                       ·                 |
        //      |                 ·                        ·                |
        //  700 |                ·                         ·                |
        //      |               ·                           ·               |
        //  600 |              ·                             ·              |
        //      |             ·                               ·             |
        //  500 |            ·                                 ·            |
        //      |            ·                                  ·           |
        //  400 |           ·                                   ·           |
        //      |          ·                                     ·          |
        //  300 |         ·                                       ·         |
        //      |        ·                                         ·        |
        //  200 |       ·                                           ·       |
        //      |       ·                                            ·      |
        //  100 |      ·                                             ·      |
        //      |     ·                                               ·     |
        //    0 W----C-------------------------------------------------B----Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 700, 1200, 1100, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 100, 0, 500, 1200), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 100, 0, 1100, 0), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 1100, 0, 1200, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 1200, 0, 1200, 1200), Is.True, "Expected: has edge Z-X"); // Z-X
        Assume.That(HasEdge(edges, 1200, 1200, 700, 1200), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 700, 1200, 500, 1200), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 500, 1200, 0, 1200), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 0, 1200, 0, 0), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 0, 100, 0), Is.True, "Expected: has edge W-C"); // W-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 700, 1200, 1100, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 1100, 0)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 0, 1200, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 700, 1200)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 500, 1200)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        edge = FindEdge(edges, 100, 0, 500, 1200); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 1100, 0)), Is.True, "Expected: edge C-D neighbours C-B"); // C-D neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 500, 1200)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1200, 0, 1200)), Is.True, "Expected: edge C-D neighbours D-Y"); // C-D neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 100, 0)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        edge = FindEdge(edges, 100, 0, 1100, 0); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: edge C-B neighbours C-D"); // C-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 0, 1200, 0)), Is.True, "Expected: edge C-B neighbours B-Z"); // C-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 100, 0)), Is.True, "Expected: edge C-B neighbours W-C"); // C-B neighbours W-C
        edge = FindEdge(edges, 1100, 0, 1200, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 1100, 0)), Is.True, "Expected: edge B-Z neighbours C-B"); // B-Z neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 1200, 0, 1200, 1200); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 0, 1200, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 700, 1200)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        edge = FindEdge(edges, 1200, 1200, 700, 1200); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 500, 1200)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 700, 1200, 500, 1200); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 1100, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 700, 1200)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1200, 0, 1200)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 500, 1200, 0, 1200); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: edge D-Y neighbours C-D"); // D-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1200, 500, 1200)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge D-Y neighbours Y-W"); // D-Y neighbours Y-W
        edge = FindEdge(edges, 0, 1200, 0, 0); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1200, 0, 1200)), Is.True, "Expected: edge Y-W neighbours D-Y"); // Y-W neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 100, 0)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 100, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 500, 1200)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 0, 1100, 0)), Is.True, "Expected: edge W-C neighbours C-B"); // W-C neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1000, 600), // #1
            new VoronoiSite(1100, 300), // #2
            new VoronoiSite(1100, 900), // #3
        };

        // 1200 W-----------------------------------------------------------Y
        //      |                                                           |
        // 1100 C,,,                                                        |
        //      |   '''··,,,                                                |
        // 1000 |           '''·,,,                                         |
        //      |                  '''··,,,                                 |
        //  900 |                          '''·,,,                     3    |
        //      |                                 '''··,,,                  |
        //  800 |                                         '''·,,,           |
        //      |                                                '''··,,,   |
        //  700 |                                                        '''D
        //      |                                                           |
        //  600 |                                                 1         |
        //      |                                                           |
        //  500 |                                                        ,,,A
        //      |                                                ,,,··'''   |
        //  400 |                                         ,,,·'''           |
        //      |                                 ,,,··'''                  |
        //  300 |                          ,,,·'''                     2    |
        //      |                  ,,,··'''                                 |
        //  200 |           ,,,·'''                                         |
        //      |   ,,,··'''                                                |
        //  100 B'''                                                        |
        //      |                                                           |
        //    0 Z-----------------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 500, 0, 100), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1100, 1200, 700), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 0, 1100, 0, 100), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 0, 100, 0, 0), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 0, 1200, 0), Is.True, "Expected: has edge Z-X"); // Z-X
        Assume.That(HasEdge(edges, 1200, 0, 1200, 500), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1200, 500, 1200, 700), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1200, 700, 1200, 1200), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 1200, 1200, 0, 1200), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 0, 1200, 0, 1100), Is.True, "Expected: has edge W-C"); // W-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1200, 500, 0, 100); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 0, 100)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 500)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 1200, 700)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        edge = FindEdge(edges, 0, 1100, 1200, 700); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 0, 100)), Is.True, "Expected: edge C-D neighbours C-B"); // C-D neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 1200, 700)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 700, 1200, 1200)), Is.True, "Expected: edge C-D neighbours D-Y"); // C-D neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1100)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        edge = FindEdge(edges, 0, 1100, 0, 100); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: edge C-B neighbours C-D"); // C-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge C-B neighbours B-Z"); // C-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1100)), Is.True, "Expected: edge C-B neighbours W-C"); // C-B neighbours W-C
        edge = FindEdge(edges, 0, 100, 0, 0); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 0, 100)), Is.True, "Expected: edge B-Z neighbours C-B"); // B-Z neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 0, 0, 1200, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 100, 0, 0)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 500)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        edge = FindEdge(edges, 1200, 0, 1200, 500); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1200, 0)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 1200, 700)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 1200, 500, 1200, 700); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 0, 100)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 500)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 700, 1200, 1200)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 1200, 700, 1200, 1200); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: edge D-Y neighbours C-D"); // D-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 500, 1200, 700)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge D-Y neighbours Y-W"); // D-Y neighbours Y-W
        edge = FindEdge(edges, 1200, 1200, 0, 1200); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 700, 1200, 1200)), Is.True, "Expected: edge Y-W neighbours D-Y"); // Y-W neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 1100)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 0, 1200, 0, 1100); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 1200, 700)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1100, 0, 100)), Is.True, "Expected: edge W-C neighbours C-B"); // W-C neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 0, 1200)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyPastBorderPerpendicularly"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyPastBorderPerpendicularly_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(600, 200), // #1
            new VoronoiSite(300, 100), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1200 Z----B-------------------------------------------------C----W
        //      |     ·                                               ·     |
        // 1100 |      ·                                             ·      |
        //      |      ·                                            ·       |
        // 1000 |       ·                                           ·       |
        //      |        ·                                         ·        |
        //  900 |         ·                                       ·         |
        //      |          ·                                     ·          |
        //  800 |           ·                                   ·           |
        //      |           ·                                  ·            |
        //  700 |            ·                                 ·            |
        //      |             ·                               ·             |
        //  600 |              ·                             ·              |
        //      |               ·                           ·               |
        //  500 |                ·                         ·                |
        //      |                ·                        ·                 |
        //  400 |                 ·                       ·                 |
        //      |                  ·                     ·                  |
        //  300 |                   ·                   ·                   |
        //      |                    ·                 ·                    |
        //  200 |                     ·       1       ·                     |
        //      |                     ·              ·                      |
        //  100 |              2       ·             ·       3              |
        //      |                       ·           ·                       |
        //    0 X------------------------A---------D------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 500, 0, 100, 1200), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1100, 1200, 700, 0), Is.True, "Expected: has edge C-D"); // C-D
        Assume.That(HasEdge(edges, 1100, 1200, 100, 1200), Is.True, "Expected: has edge C-B"); // C-B
        Assume.That(HasEdge(edges, 100, 1200, 0, 1200), Is.True, "Expected: has edge B-Z"); // B-Z
        Assume.That(HasEdge(edges, 0, 1200, 0, 0), Is.True, "Expected: has edge Z-X"); // Z-X
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 500, 0, 700, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 700, 0, 1200, 0), Is.True, "Expected: has edge D-Y"); // D-Y
        Assume.That(HasEdge(edges, 1200, 0, 1200, 1200), Is.True, "Expected: has edge Y-W"); // Y-W
        Assume.That(HasEdge(edges, 1200, 1200, 1100, 1200), Is.True, "Expected: has edge W-C"); // W-C

        // Assert

        VoronoiEdge edge = FindEdge(edges, 500, 0, 100, 1200); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 100, 1200)), Is.True, "Expected: edge A-B neighbours C-B"); // A-B neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1200, 0, 1200)), Is.True, "Expected: edge A-B neighbours B-Z"); // A-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        edge = FindEdge(edges, 1100, 1200, 700, 0); // C-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 100, 1200)), Is.True, "Expected: edge C-D neighbours C-B"); // C-D neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge C-D neighbours A-D"); // C-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1200, 0)), Is.True, "Expected: edge C-D neighbours D-Y"); // C-D neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1100, 1200)), Is.True, "Expected: edge C-D neighbours W-C"); // C-D neighbours W-C
        edge = FindEdge(edges, 1100, 1200, 100, 1200); // C-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: edge C-B neighbours A-B"); // C-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: edge C-B neighbours C-D"); // C-B neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1200, 0, 1200)), Is.True, "Expected: edge C-B neighbours B-Z"); // C-B neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1100, 1200)), Is.True, "Expected: edge C-B neighbours W-C"); // C-B neighbours W-C
        edge = FindEdge(edges, 100, 1200, 0, 1200); // B-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: edge B-Z neighbours A-B"); // B-Z neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 100, 1200)), Is.True, "Expected: edge B-Z neighbours C-B"); // B-Z neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge B-Z neighbours Z-X"); // B-Z neighbours Z-X
        edge = FindEdge(edges, 0, 1200, 0, 0); // Z-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 100, 1200, 0, 1200)), Is.True, "Expected: edge Z-X neighbours B-Z"); // Z-X neighbours B-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge Z-X neighbours X-A"); // Z-X neighbours X-A
        edge = FindEdge(edges, 0, 0, 500, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 0)), Is.True, "Expected: edge X-A neighbours Z-X"); // X-A neighbours Z-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        edge = FindEdge(edges, 500, 0, 700, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 100, 1200)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: edge A-D neighbours C-D"); // A-D neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1200, 0)), Is.True, "Expected: edge A-D neighbours D-Y"); // A-D neighbours D-Y
        edge = FindEdge(edges, 700, 0, 1200, 0); // D-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: edge D-Y neighbours C-D"); // D-Y neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 700, 0)), Is.True, "Expected: edge D-Y neighbours A-D"); // D-Y neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge D-Y neighbours Y-W"); // D-Y neighbours Y-W
        edge = FindEdge(edges, 1200, 0, 1200, 1200); // Y-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 1200, 0)), Is.True, "Expected: edge Y-W neighbours D-Y"); // Y-W neighbours D-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 1100, 1200)), Is.True, "Expected: edge Y-W neighbours W-C"); // Y-W neighbours W-C
        edge = FindEdge(edges, 1200, 1200, 1100, 1200); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 700, 0)), Is.True, "Expected: edge W-C neighbours C-D"); // W-C neighbours C-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1100, 1200, 100, 1200)), Is.True, "Expected: edge W-C neighbours C-B"); // W-C neighbours C-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 1200)), Is.True, "Expected: edge W-C neighbours Y-W"); // W-C neighbours Y-W
    }

    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 900), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(900, 300), // #3
        };

        // 1000 X-----------------------------B-------------------Z
        //      |                            '                    |
        //  900 |              1           ,'                     |
        //      |                         ,                       |
        //  800 |                        ·                        |
        //      |                       '                         |
        //  700 |                     ,'           2              |
        //      |                    ,                            |
        //  600 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  500 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  400 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  300 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //  200 |        ,A''                                     |
        //      |      ,'                                         |
        //  100 |   ,·'                                           |
        //      | ,'                                              |
        //    0 D#------------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 200, 600, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 200, 1000, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 200, 0, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-D"); // X-D
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 600), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 600, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 200, 200, 600, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 200, 200, 1000, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 200, 200, 0, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-D neighbours X-D"); // A-D neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 600, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-X neighbours X-D"); // B-X neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: edge X-D neighbours A-D"); // X-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge X-D neighbours B-X"); // X-D neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-D neighbours D-W"); // X-D neighbours D-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 0, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge D-W neighbours X-D"); // D-W neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge D-W neighbours W-C"); // D-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 1000, 600); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours D-W"); // W-C neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 600, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 1000, 600)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 600)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 200, 600, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 700), // #1
            new VoronoiSite(700, 300), // #2
            new VoronoiSite(300, 100), // #3
        };

        // 1000 D#------------------------------------------------X
        //      | ',                                              |
        //  900 |   '·,                                           |
        //      |      ',                                         |
        //  800 |        'A,,                                     |
        //      |          ' ''·,,                                |
        //  700 |           ',    ''·,,                      1    |
        //      |             ,        ''·,,                      |
        //  600 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  500 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  400 |                   ·                           ''B
        //      |                    '                            |
        //  300 |                     ',           2              |
        //      |                       ,                         |
        //  200 |                        ·                        |
        //      |                         '                       |
        //  100 |              3           ',                     |
        //      |                            ,                    |
        //    0 W-----------------------------C-------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 800, 1000, 400), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 800, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 200, 800, 0, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-D"); // X-D
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 600, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 200, 800, 1000, 400); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 200, 800, 600, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 200, 800, 0, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours X-D"); // A-D neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-X neighbours X-D"); // B-X neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: edge X-D neighbours A-D"); // X-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge X-D neighbours B-X"); // X-D neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-D neighbours D-W"); // X-D neighbours D-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 0, 1000)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge D-W neighbours X-D"); // D-W neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-W neighbours W-C"); // D-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 600, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-C neighbours D-W"); // W-C neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 600, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 600, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 400); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 800, 1000, 400)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 100), // #1
            new VoronoiSite(300, 300), // #2
            new VoronoiSite(100, 700), // #3
        };

        // 1000 W------------------------------------------------#D
        //      |                                              ,' |
        //  900 |                                           ,·'   |
        //      |                                         ,'      |
        //  800 |                                     ,,A'        |
        //      |                                ,,·'' '          |
        //  700 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  600 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  500 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  400 C''                           ·                   |
        //      |                            '                    |
        //  300 |              2           ,'                     |
        //      |                         ,                       |
        //  200 |                        ·                        |
        //      |                       '                         |
        //  100 |                     ,'           1              |
        //      |                    ,                            |
        //    0 Z-------------------B-----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 800, 400, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 800, 0, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 800, 1000, 1000), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-D"); // X-D
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 400), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 400, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 800, 800, 400, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 800, 800, 0, 400); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 800, 800, 1000, 1000); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-D neighbours X-D"); // A-D neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 400, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours X-D"); // B-X neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: edge X-D neighbours A-D"); // X-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge X-D neighbours B-X"); // X-D neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-D neighbours D-W"); // X-D neighbours D-W
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 1000, 1000)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge D-W neighbours X-D"); // D-W neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge D-W neighbours W-C"); // D-W neighbours W-C
        edge = FindEdge(edges, 0, 1000, 0, 400); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours D-W"); // W-C neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 0, 400, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 0, 400)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 400)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 400, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 800, 400, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingSharplyTowardsCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingSharplyTowardsCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 300), // #1
            new VoronoiSite(300, 700), // #2
            new VoronoiSite(700, 900), // #3
        };

        // 1000 Z-------------------C-----------------------------W
        //      |                    '                            |
        //  900 |                     ',           3              |
        //      |                       ,                         |
        //  800 |                        ·                        |
        //      |                         '                       |
        //  700 |              2           ',                     |
        //      |                            ,                    |
        //  600 B,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  500 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  400 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  300 |    1                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //  200 |                                     ''A,        |
        //      |                                         ',      |
        //  100 |                                           '·,   |
        //      |                                              ', |
        //    0 X------------------------------------------------#D
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 200, 0, 600), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 200, 400, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 800, 200, 1000, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-D"); // X-D
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge D-W"); // D-W
        Assume.That(HasEdge(edges, 1000, 1000, 400, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 400, 1000, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 800, 200, 0, 600); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 800, 200, 400, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 800, 200, 1000, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-D neighbours X-D"); // A-D neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-D neighbours D-W"); // A-D neighbours D-W
        edge = FindEdge(edges, 0, 600, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-X neighbours X-D"); // B-X neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: edge X-D neighbours A-D"); // X-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge X-D neighbours B-X"); // X-D neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-D neighbours D-W"); // X-D neighbours D-W
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // D-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 1000, 0)), Is.True, "Expected: edge D-W neighbours A-D"); // D-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge D-W neighbours X-D"); // D-W neighbours X-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge D-W neighbours W-C"); // D-W neighbours W-C
        edge = FindEdge(edges, 1000, 1000, 400, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-C neighbours D-W"); // W-C neighbours D-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 400, 1000, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 400, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 400, 1000)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 600); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 200, 0, 600)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    [Test]
    public void ThreePointsMeetingAtCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 700), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(700, 100), // #3
        };

        // 1000 X------------------------B------------------------Z
        //      |                       '                         |
        //  900 |                     ,'                          |
        //      |                    ,                            |
        //  800 |                   ·                             |
        //      |                  '                              |
        //  700 |    1           ,'                               |
        //      |               ,                                 |
        //  600 |              ·                                  |
        //      |             '                                   |
        //  500 |           ,'           2                      ,,C
        //      |          ,                               ,,·''  |
        //  400 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  300 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  200 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  100 | ,'    ,,·''                      3              |
        //      |, ,,·''                                          |
        //    0 A##-----------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 500, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 1000, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 500, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 0, 0, 1000, 500); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 500, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        edge = FindEdge(edges, 0, 0, 1000, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 1000, 500); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 500)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 900), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 300), // #3
        };

        // 1000 A##-----------------------------------------------X
        //      |' ''·,,                                          |
        //  900 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  800 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  700 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  600 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  500 |           ',           2                      ''B
        //      |             ,                                   |
        //  400 |              ·                                  |
        //      |               '                                 |
        //  300 |    3           ',                               |
        //      |                  ,                              |
        //  200 |                   ·                             |
        //      |                    '                            |
        //  100 |                     ',                          |
        //      |                       ,                         |
        //    0 W------------------------C------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 1000, 1000, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 1000, 500, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 500, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 500), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 1000, 1000, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 500, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 1000, 500, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        edge = FindEdge(edges, 0, 1000, 0, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 500, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 500, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 500, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 500)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 500); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 500)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 500, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(900, 300), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(300, 900), // #3
        };

        // 1000 W-----------------------------------------------##A
        //      |                                          ,,·'' '|
        //  900 |              3                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  800 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  700 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  600 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  500 C''                      2           ,'           |
        //      |                                   ,             |
        //  400 |                                  ·              |
        //      |                                 '               |
        //  300 |                               ,'           1    |
        //      |                              ,                  |
        //  200 |                             ·                   |
        //      |                            '                    |
        //  100 |                          ,'                     |
        //      |                         ,                       |
        //    0 Z------------------------B------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 1000, 500, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 1000, 0, 500), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 500, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 500, 0), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 1000, 500, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 0, 500); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 500, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 1000, 0, 500); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 0, 500, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 500)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 500, 0)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 500, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(900, 700), // #3
        };

        // 1000 Z------------------------C------------------------W
        //      |                         '                       |
        //  900 |                          ',                     |
        //      |                            ,                    |
        //  800 |                             ·                   |
        //      |                              '                  |
        //  700 |                               ',           3    |
        //      |                                 ,               |
        //  600 |                                  ·              |
        //      |                                   '             |
        //  500 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  400 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  300 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  200 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  100 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //    0 X-----------------------------------------------##A
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(8), "Expected: edge count 8");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 0, 0, 500), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 0, 500, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 500, 0, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 1000, 500, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 500, 1000, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 500), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 0, 0, 500); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 500, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 0, 500, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-X neighbours X-A"); // B-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge X-A neighbours B-X"); // X-A neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 1000, 500, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 500, 1000, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 500, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 500, 1000)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 500)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 500); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 500)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 500, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 500, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    [Test]
    public void ThreePointsMeetingAtBorderAngled()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1000 X----------------------------------B--------------Z
        //      |                                 '               |
        //  900 |                               ,'                |
        //      |                              ,                  |
        //  800 |                             ·                   |
        //      |                            '                    |
        //  700 |              1           ,'                     |
        //      |                         ,                       |
        //  600 |                        ·                        |
        //      |                       '                         |
        //  500 |                     ,'           2              |
        //      |                    ,                            |
        //  400 |                   ·                           ,,C
        //      |                  '                       ,,·''  |
        //  300 |                ,'                   ,,·''       |
        //      |               ,                ,,·''            |
        //  200 |              ·            ,,·''                 |
        //      |             '        ,,·''                      |
        //  100 |           ,'    ,,·''                      3    |
        //      |          , ,,·''                                |
        //    0 Y---------A##-------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 0, 700, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 0, 1000, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 1000, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 1000, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 200, 0), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 200, 0, 1000, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 0, 1000, 400), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 400, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 700, 1000), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 200, 0, 700, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 200, 0, 1000, 400); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 700, 1000, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 0, 0, 200, 0); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 0)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 200, 0, 1000, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 200, 0)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 1000, 400); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 400, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 1000, 400)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 400)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 700, 1000)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 700, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 0, 700, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 400, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1000 Y-------------------------------------------------X
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 A,,                                               |
        //      |' ''·,,                                          |
        //  700 | ',    ''·,,                      1              |
        //      |   ,        ''·,,                                |
        //  600 |    ·            ''·,,                           |
        //      |     '                ''·,,                      |
        //  500 |      ',                   ''·,,                 |
        //      |        ,                       ''·,,            |
        //  400 |         ·                           ''·,,       |
        //      |          '                               ''·,,  |
        //  300 |           ',           2                      ''B
        //      |             ,                                   |
        //  200 |              ·                                  |
        //      |               '                                 |
        //  100 |    3           ',                               |
        //      |                  ,                              |
        //    0 W-------------------C-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 800, 1000, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 800, 400, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 300, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 1000, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 0, 800), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 0, 800, 0, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 0, 400, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 400, 0, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 1000, 300), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 800, 1000, 300); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 0, 800, 400, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 1000, 300, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 0, 1000, 0, 800); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 0, 1000)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 0, 800, 0, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 800)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 400, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 0, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 400, 0, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 400, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 400, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 300)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 300); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 800, 1000, 300)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 300, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 900), // #3
        };

        // 1000 W-------------------------------------##A---------Y
        //      |                                ,,·'' '          |
        //  900 |    3                      ,,·''    ,'           |
        //      |                      ,,·''        ,             |
        //  800 |                 ,,·''            ·              |
        //      |            ,,·''                '               |
        //  700 |       ,,·''                   ,'                |
        //      |  ,,·''                       ,                  |
        //  600 C''                           ·                   |
        //      |                            '                    |
        //  500 |              2           ,'                     |
        //      |                         ,                       |
        //  400 |                        ·                        |
        //      |                       '                         |
        //  300 |                     ,'           1              |
        //      |                    ,                            |
        //  200 |                   ·                             |
        //      |                  '                              |
        //  100 |                ,'                               |
        //      |               ,                                 |
        //    0 Z--------------B----------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 1000, 300, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 1000, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 0, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 0, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 800, 1000), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 800, 1000, 0, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 1000, 0, 600), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 800, 1000, 300, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 800, 1000, 0, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 300, 0, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 1000, 800, 1000); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 800, 1000, 0, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 800, 1000)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 1000, 0, 600); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 0, 600, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 0, 600)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 600)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 300, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 1000, 300, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1000 Z-----------------------------C-------------------W
        //      |                              '                  |
        //  900 |                               ',           3    |
        //      |                                 ,               |
        //  800 |                                  ·              |
        //      |                                   '             |
        //  700 B,,                      2           ',           |
        //      |  ''·,,                               ,          |
        //  600 |       ''·,,                           ·         |
        //      |            ''·,,                       '        |
        //  500 |                 ''·,,                   ',      |
        //      |                      ''·,,                ,     |
        //  400 |                           ''·,,            ·    |
        //      |                                ''·,,        '   |
        //  300 |              1                      ''·,,    ', |
        //      |                                          ''·,, ,|
        //  200 |                                               ''A
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 X-------------------------------------------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 200, 0, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 200, 600, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 700, 0, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 0, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 1000, 200), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 1000, 200, 1000, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 1000, 600, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 600, 1000, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 0, 700), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 200, 0, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 1000, 200, 600, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 0, 700, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 0, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 0, 1000, 200); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 1000, 0)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 1000, 200, 1000, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 1000, 200)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 1000, 600, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 1000, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 600, 1000, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 600, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 600, 1000)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 0, 700)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 0, 700); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 200, 0, 700)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 700, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1000, 0, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_Mirrored()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 700), // #1
            new VoronoiSite(300, 500), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1000 Z--------------B----------------------------------X
        //      |               '                                 |
        //  900 |                ',                               |
        //      |                  ,                              |
        //  800 |                   ·                             |
        //      |                    '                            |
        //  700 |                     ',           1              |
        //      |                       ,                         |
        //  600 |                        ·                        |
        //      |                         '                       |
        //  500 |              2           ',                     |
        //      |                            ,                    |
        //  400 C,,                           ·                   |
        //      |  ''·,,                       '                  |
        //  300 |       ''·,,                   ',                |
        //      |            ''·,,                ,               |
        //  200 |                 ''·,,            ·              |
        //      |                      ''·,,        '             |
        //  100 |    3                      ''·,,    ',           |
        //      |                                ''·,, ,          |
        //    0 W-------------------------------------##A---------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 800, 0, 300, 1000), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 800, 0, 0, 400), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 1000, 1000, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 0, 800, 0), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 800, 0, 0, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 0, 0, 400), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 0, 400, 0, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 1000, 300, 1000), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 800, 0, 300, 1000); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 800, 0)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 800, 0, 0, 400); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 800, 0)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 300, 1000, 1000, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 1000, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 800, 0)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 0, 800, 0); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 0)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 0)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 800, 0, 0, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 800, 0)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 0, 0, 400); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 0, 400, 0, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 0, 400)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 400)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 300, 1000)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 300, 1000); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 800, 0, 300, 1000)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1000, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 400, 0, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(700, 300), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(100, 900), // #3
        };

        // 1000 W-------------------C-----------------------------Z
        //      |                  '                              |
        //  900 |    3           ,'                               |
        //      |               ,                                 |
        //  800 |              ·                                  |
        //      |             '                                   |
        //  700 |           ,'           2                      ,,B
        //      |          ,                               ,,·''  |
        //  600 |         ·                           ,,·''       |
        //      |        '                       ,,·''            |
        //  500 |      ,'                   ,,·''                 |
        //      |     ,                ,,·''                      |
        //  400 |    ·            ,,·''                           |
        //      |   '        ,,·''                                |
        //  300 | ,'    ,,·''                      1              |
        //      |, ,,·''                                          |
        //  200 A''                                               |
        //      |                                                 |
        //  100 |                                                 |
        //      |                                                 |
        //    0 Y-------------------------------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 200, 1000, 700), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 200, 400, 1000), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1000, 700, 1000, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 1000, 0, 0, 0), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 0, 0, 200), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 0, 200, 0, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 1000, 400, 1000), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 400, 1000, 1000, 1000), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 700), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 200, 1000, 700); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 200)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 0, 200, 400, 1000); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 200)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 1000, 700, 1000, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 0, 0); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 200)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 0, 0, 0, 200); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 0, 0)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 1000)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 0, 200, 0, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 200)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 0, 1000, 400, 1000); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 0, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 400, 1000, 1000, 1000); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 400, 1000)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 400, 1000)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 700)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 1000, 1000, 700); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 200, 1000, 700)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 700, 1000, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 400, 1000, 1000, 1000)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 300), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(900, 900), // #3
        };

        // 1000 Y---------A##-------------------------------------W
        //      |          ' ''·,,                                |
        //  900 |           ',    ''·,,                      3    |
        //      |             ,        ''·,,                      |
        //  800 |              ·            ''·,,                 |
        //      |               '                ''·,,            |
        //  700 |                ',                   ''·,,       |
        //      |                  ,                       ''·,,  |
        //  600 |                   ·                           ''C
        //      |                    '                            |
        //  500 |                     ',           2              |
        //      |                       ,                         |
        //  400 |                        ·                        |
        //      |                         '                       |
        //  300 |              1           ',                     |
        //      |                            ,                    |
        //  200 |                             ·                   |
        //      |                              '                  |
        //  100 |                               ',                |
        //      |                                 ,               |
        //    0 X----------------------------------B--------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 200, 1000, 700, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 200, 1000, 1000, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 700, 0, 0, 0), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 0, 0, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 0, 1000, 200, 1000), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 200, 1000, 1000, 1000), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 600), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 1000, 600, 1000, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 1000, 0, 700, 0), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 200, 1000, 700, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 200, 1000)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 1000)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 200, 1000, 1000, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 200, 1000)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 1000)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 700, 0, 0, 0); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 0, 0, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 200, 1000)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 0, 1000, 200, 1000); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 1000)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 200, 1000, 1000, 1000); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 200, 1000)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 1000, 1000, 600); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 1000)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 1000, 600, 1000, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 1000, 600)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 600)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 700, 0)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 1000, 0, 700, 0); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 200, 1000, 700, 0)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 700, 0, 0, 0)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 600, 1000, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingAtBorderAngled"/> above,
    /// but all coordinates are mirrored horizontally and then rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingAtBorderAngled_MirroredAndRotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(300, 700), // #1
            new VoronoiSite(500, 300), // #2
            new VoronoiSite(900, 100), // #3
        };

        // 1000 X-------------------------------------------------Y
        //      |                                                 |
        //  900 |                                                 |
        //      |                                                 |
        //  800 |                                               ,,A
        //      |                                          ,,·'' '|
        //  700 |              1                      ,,·''    ,' |
        //      |                                ,,·''        ,   |
        //  600 |                           ,,·''            ·    |
        //      |                      ,,·''                '     |
        //  500 |                 ,,·''                   ,'      |
        //      |            ,,·''                       ,        |
        //  400 |       ,,·''                           ·         |
        //      |  ,,·''                               '          |
        //  300 B''                      2           ,'           |
        //      |                                   ,             |
        //  200 |                                  ·              |
        //      |                                 '               |
        //  100 |                               ,'           3    |
        //      |                              ,                  |
        //    0 Z-----------------------------C-------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1000, 1000);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1000, 800, 0, 300), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 1000, 800, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 300, 0, 1000), Is.True, "Expected: has edge B-X"); // B-X
        Assume.That(HasEdge(edges, 0, 1000, 1000, 1000), Is.True, "Expected: has edge X-Y"); // X-Y
        Assume.That(HasEdge(edges, 1000, 1000, 1000, 800), Is.True, "Expected: has edge Y-A"); // Y-A
        Assume.That(HasEdge(edges, 1000, 800, 1000, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 1000, 0, 600, 0), Is.True, "Expected: has edge W-C"); // W-C
        Assume.That(HasEdge(edges, 600, 0, 0, 0), Is.True, "Expected: has edge C-Z"); // C-Z
        Assume.That(HasEdge(edges, 0, 0, 0, 300), Is.True, "Expected: has edge Z-B"); // Z-B

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1000, 800, 0, 300); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge A-B neighbours B-X"); // A-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 800)), Is.True, "Expected: edge A-B neighbours Y-A"); // A-B neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge A-B neighbours Z-B"); // A-B neighbours Z-B
        edge = FindEdge(edges, 1000, 800, 600, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 800)), Is.True, "Expected: edge A-C neighbours Y-A"); // A-C neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge A-C neighbours W-C"); // A-C neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge A-C neighbours C-Z"); // A-C neighbours C-Z
        edge = FindEdge(edges, 0, 300, 0, 1000); // B-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: edge B-X neighbours A-B"); // B-X neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge B-X neighbours X-Y"); // B-X neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge B-X neighbours Z-B"); // B-X neighbours Z-B
        edge = FindEdge(edges, 0, 1000, 1000, 1000); // X-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(2), "Expected: edge neighbour count 2");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge X-Y neighbours B-X"); // X-Y neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 800)), Is.True, "Expected: edge X-Y neighbours Y-A"); // X-Y neighbours Y-A
        edge = FindEdge(edges, 1000, 1000, 1000, 800); // Y-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: edge Y-A neighbours A-B"); // Y-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: edge Y-A neighbours A-C"); // Y-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1000, 1000, 1000)), Is.True, "Expected: edge Y-A neighbours X-Y"); // Y-A neighbours X-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 0)), Is.True, "Expected: edge Y-A neighbours A-W"); // Y-A neighbours A-W
        edge = FindEdge(edges, 1000, 800, 1000, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 1000, 1000, 800)), Is.True, "Expected: edge A-W neighbours Y-A"); // A-W neighbours Y-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge A-W neighbours W-C"); // A-W neighbours W-C
        edge = FindEdge(edges, 1000, 0, 600, 0); // W-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: edge W-C neighbours A-C"); // W-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 1000, 0)), Is.True, "Expected: edge W-C neighbours A-W"); // W-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge W-C neighbours C-Z"); // W-C neighbours C-Z
        edge = FindEdge(edges, 600, 0, 0, 0); // C-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 600, 0)), Is.True, "Expected: edge C-Z neighbours A-C"); // C-Z neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 0, 600, 0)), Is.True, "Expected: edge C-Z neighbours W-C"); // C-Z neighbours W-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 0, 300)), Is.True, "Expected: edge C-Z neighbours Z-B"); // C-Z neighbours Z-B
        edge = FindEdge(edges, 0, 0, 0, 300); // Z-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1000, 800, 0, 300)), Is.True, "Expected: edge Z-B neighbours A-B"); // Z-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 1000)), Is.True, "Expected: edge Z-B neighbours B-X"); // Z-B neighbours B-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 0, 0)), Is.True, "Expected: edge Z-B neighbours C-Z"); // Z-B neighbours C-Z
    }

    [Test]
    public void ThreePointsMeetingPastCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 1100), // #1
            new VoronoiSite(700, 700), // #2
            new VoronoiSite(1100, 100), // #3
        };

        // 1200 X-----------------------------C-----------------------------Z
        //      |                           ,'                              |
        // 1100 |    1                    ,'                                |
        //      |                        ·                                  |
        // 1000 |                      ,'                                   |
        //      |                    ,'                                     |
        //  900 |                   ·                                       |
        //      |                 ,'                                        |
        //  800 |               ,'                                          |
        //      |              ·                                            |
        //  700 |            ,'                    2                        |
        //      |          ,'                                               |
        //  600 |         ·                                                ,D
        //      |       ,'                                             ,·'' |
        //  500 |     ,'                                           ,,''     |
        //      |    ·                                         ,,·'         |
        //  400 |  ,'                                       ,·'             |
        //      |,'                                     ,·''                |
        //  300 A                                   ,,''                    |
        //      |                               ,,·'                        |
        //  200 |                            ,·'                            |
        //      |                        ,·''                               |
        //  100 |                    ,,''                              3    |
        //      |                ,,·'                                       |
        //    0 Y--------------B#-------------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 300, 600, 1200), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 300, 0, 1200, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, 1200, 0, 300), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 300, 0, 1200, 0), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 1200, 0, 1200, 600), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 1200, 600, 1200, 1200), Is.True, "Expected: has edge D-Z"); // D-Z
        Assume.That(HasEdge(edges, 1200, 1200, 600, 1200), Is.True, "Expected: has edge Z-C"); // Z-C
        Assume.That(HasEdge(edges, 600, 1200, 0, 1200), Is.True, "Expected: has edge C-X"); // C-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 300, 600, 1200); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 300)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge A-C neighbours Z-C"); // A-C neighbours Z-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        edge = FindEdge(edges, 300, 0, 1200, 600); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-D neighbours Y-B"); // B-D neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 0)), Is.True, "Expected: edge B-D neighbours B-W"); // B-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge B-D neighbours W-D"); // B-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge B-D neighbours D-Z"); // B-D neighbours D-Z
        edge = FindEdge(edges, 0, 1200, 0, 300); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
        edge = FindEdge(edges, 0, 300, 0, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 300)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 0, 0, 300, 0); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: edge Y-B neighbours B-D"); // Y-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 0)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 300, 0, 1200, 0); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: edge B-W neighbours B-D"); // B-W neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge B-W neighbours W-D"); // B-W neighbours W-D
        edge = FindEdge(edges, 1200, 0, 1200, 600); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: edge W-D neighbours B-D"); // W-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 0)), Is.True, "Expected: edge W-D neighbours B-W"); // W-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge W-D neighbours D-Z"); // W-D neighbours D-Z
        edge = FindEdge(edges, 1200, 600, 1200, 1200); // D-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 1200, 600)), Is.True, "Expected: edge D-Z neighbours B-D"); // D-Z neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge D-Z neighbours W-D"); // D-Z neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge D-Z neighbours Z-C"); // D-Z neighbours Z-C
        edge = FindEdge(edges, 1200, 1200, 600, 1200); // Z-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: edge Z-C neighbours A-C"); // Z-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge Z-C neighbours D-Z"); // Z-C neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge Z-C neighbours C-X"); // Z-C neighbours C-X
        edge = FindEdge(edges, 600, 1200, 0, 1200); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 600, 1200)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 300)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge C-X neighbours Z-C"); // C-X neighbours Z-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 1100), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(100, 100), // #3
        };

        // 1200 Y--------------A#-------------------------------------------X
        //      |                ''·,                                       |
        // 1100 |                    '',,                              1    |
        //      |                        '·,,                               |
        // 1000 |                            '·,                            |
        //      |                               ''·,                        |
        //  900 B                                   '',,                    |
        //      |',                                     '·,,                |
        //  800 |  ',                                       '·,             |
        //      |    ·                                         ''·,         |
        //  700 |     ',                                           '',,     |
        //      |       ',                                             '·,, |
        //  600 |         ·                                                'C
        //      |          ',                                               |
        //  500 |            ',                    2                        |
        //      |              ·                                            |
        //  400 |               ',                                          |
        //      |                 ',                                        |
        //  300 |                   ·                                       |
        //      |                    ',                                     |
        //  200 |                      ',                                   |
        //      |                        ·                                  |
        //  100 |    3                    ',                                |
        //      |                           ',                              |
        //    0 W-----------------------------D-----------------------------Z
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 300, 1200, 1200, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 900, 600, 0), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 1200, 1200, 300, 1200), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 300, 1200, 0, 1200), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 0, 1200, 0, 900), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 0, 900, 0, 0), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 600, 0, 1200, 0), Is.True, "Expected: has edge D-Z"); // D-Z
        Assume.That(HasEdge(edges, 1200, 0, 1200, 600), Is.True, "Expected: has edge Z-C"); // Z-C
        Assume.That(HasEdge(edges, 1200, 600, 1200, 1200), Is.True, "Expected: has edge C-X"); // C-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 300, 1200, 1200, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 300, 1200)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 0, 1200)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge A-C neighbours Z-C"); // A-C neighbours Z-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        edge = FindEdge(edges, 0, 900, 600, 0); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 900)), Is.True, "Expected: edge B-D neighbours Y-B"); // B-D neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge B-D neighbours B-W"); // B-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge B-D neighbours W-D"); // B-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge B-D neighbours D-Z"); // B-D neighbours D-Z
        edge = FindEdge(edges, 1200, 1200, 300, 1200); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 0, 1200)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
        edge = FindEdge(edges, 300, 1200, 0, 1200); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 300, 1200)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 900)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 0, 1200, 0, 900); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: edge Y-B neighbours B-D"); // Y-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 0, 1200)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 0, 900, 0, 0); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: edge B-W neighbours B-D"); // B-W neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 900)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge B-W neighbours W-D"); // B-W neighbours W-D
        edge = FindEdge(edges, 0, 0, 600, 0); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: edge W-D neighbours B-D"); // W-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge W-D neighbours B-W"); // W-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge W-D neighbours D-Z"); // W-D neighbours D-Z
        edge = FindEdge(edges, 600, 0, 1200, 0); // D-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 600, 0)), Is.True, "Expected: edge D-Z neighbours B-D"); // D-Z neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-Z neighbours W-D"); // D-Z neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge D-Z neighbours Z-C"); // D-Z neighbours Z-C
        edge = FindEdge(edges, 1200, 0, 1200, 600); // Z-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: edge Z-C neighbours A-C"); // Z-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge Z-C neighbours D-Z"); // Z-C neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 600, 1200, 1200)), Is.True, "Expected: edge Z-C neighbours C-X"); // Z-C neighbours C-X
        edge = FindEdge(edges, 1200, 600, 1200, 1200); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 1200, 1200, 600)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 300, 1200)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 600)), Is.True, "Expected: edge C-X neighbours Z-C"); // C-X neighbours Z-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(1100, 100), // #1
            new VoronoiSite(500, 500), // #2
            new VoronoiSite(100, 1100), // #3
        };

        // 1200 W-------------------------------------------#B--------------Y
        //      |                                       ,·''                |
        // 1100 |    3                              ,,''                    |
        //      |                               ,,·'                        |
        // 1000 |                            ,·'                            |
        //      |                        ,·''                               |
        //  900 |                    ,,''                                   A
        //      |                ,,·'                                     ,'|
        //  800 |             ,·'                                       ,'  |
        //      |         ,·''                                         ·    |
        //  700 |     ,,''                                           ,'     |
        //      | ,,·'                                             ,'       |
        //  600 D'                                                ·         |
        //      |                                               ,'          |
        //  500 |                        2                    ,'            |
        //      |                                            ·              |
        //  400 |                                          ,'               |
        //      |                                        ,'                 |
        //  300 |                                       ·                   |
        //      |                                     ,'                    |
        //  200 |                                   ,'                      |
        //      |                                  ·                        |
        //  100 |                                ,'                    1    |
        //      |                              ,'                           |
        //    0 Z-----------------------------C-----------------------------X
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 1200, 900, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 1200, 0, 600), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 1200, 0, 1200, 900), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 1200, 900, 1200, 1200), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1200, 1200, 900, 1200), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 900, 1200, 0, 1200), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 0, 1200, 0, 600), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge D-Z"); // D-Z
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge Z-C"); // Z-C
        Assume.That(HasEdge(edges, 600, 0, 1200, 0), Is.True, "Expected: has edge C-X"); // C-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 1200, 900, 600, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 900)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 1200, 1200)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-C neighbours Z-C"); // A-C neighbours Z-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        edge = FindEdge(edges, 900, 1200, 0, 600); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 900, 1200)), Is.True, "Expected: edge B-D neighbours Y-B"); // B-D neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 1200)), Is.True, "Expected: edge B-D neighbours B-W"); // B-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge B-D neighbours W-D"); // B-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge B-D neighbours D-Z"); // B-D neighbours D-Z
        edge = FindEdge(edges, 1200, 0, 1200, 900); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 1200, 1200)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
        edge = FindEdge(edges, 1200, 900, 1200, 1200); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 900)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 900, 1200)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 1200, 1200, 900, 1200); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: edge Y-B neighbours B-D"); // Y-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 1200, 1200)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 1200)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 900, 1200, 0, 1200); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: edge B-W neighbours B-D"); // B-W neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 900, 1200)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge B-W neighbours W-D"); // B-W neighbours W-D
        edge = FindEdge(edges, 0, 1200, 0, 600); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: edge W-D neighbours B-D"); // W-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 1200)), Is.True, "Expected: edge W-D neighbours B-W"); // W-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge W-D neighbours D-Z"); // W-D neighbours D-Z
        edge = FindEdge(edges, 0, 600, 0, 0); // D-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 1200, 0, 600)), Is.True, "Expected: edge D-Z neighbours B-D"); // D-Z neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge D-Z neighbours W-D"); // D-Z neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-Z neighbours Z-C"); // D-Z neighbours Z-C
        edge = FindEdge(edges, 0, 0, 600, 0); // Z-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: edge Z-C neighbours A-C"); // Z-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Z-C neighbours D-Z"); // Z-C neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 1200, 0)), Is.True, "Expected: edge Z-C neighbours C-X"); // Z-C neighbours C-X
        edge = FindEdge(edges, 600, 0, 1200, 0); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 900, 600, 0)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 900)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-X neighbours Z-C"); // C-X neighbours Z-C
    }

    /// <summary>
    /// This test basically repeats <see cref="ThreePointsMeetingPastCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void ThreePointsMeetingPastCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(500, 700), // #2
            new VoronoiSite(1100, 1100), // #3
        };

        // 1200 Z-----------------------------D-----------------------------W
        //      |                              ',                           |
        // 1100 |                                ',                    3    |
        //      |                                  ·                        |
        // 1000 |                                   ',                      |
        //      |                                     ',                    |
        //  900 |                                       ·                   |
        //      |                                        ',                 |
        //  800 |                                          ',               |
        //      |                                            ·              |
        //  700 |                        2                    ',            |
        //      |                                               ',          |
        //  600 C,                                                ·         |
        //      | ''·,                                             ',       |
        //  500 |     '',,                                           ',     |
        //      |         '·,,                                         ·    |
        //  400 |             '·,                                       ',  |
        //      |                ''·,                                     ',|
        //  300 |                    '',,                                   B
        //      |                        '·,,                               |
        //  200 |                            '·,                            |
        //      |                               ''·,                        |
        //  100 |    1                              '',,                    |
        //      |                                       '·,,                |
        //    0 X-------------------------------------------#A--------------Y
        //       0  100  200  300  400  500  600  700  800  900 1000 1100 1200 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 1200, 1200);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(10), "Expected: edge count 10");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 0, 0, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 1200, 300, 600, 1200), Is.True, "Expected: has edge B-D"); // B-D
        Assume.That(HasEdge(edges, 0, 0, 900, 0), Is.True, "Expected: has edge X-A"); // X-A
        Assume.That(HasEdge(edges, 900, 0, 1200, 0), Is.True, "Expected: has edge A-Y"); // A-Y
        Assume.That(HasEdge(edges, 1200, 0, 1200, 300), Is.True, "Expected: has edge Y-B"); // Y-B
        Assume.That(HasEdge(edges, 1200, 300, 1200, 1200), Is.True, "Expected: has edge B-W"); // B-W
        Assume.That(HasEdge(edges, 1200, 1200, 600, 1200), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 600, 1200, 0, 1200), Is.True, "Expected: has edge D-Z"); // D-Z
        Assume.That(HasEdge(edges, 0, 1200, 0, 600), Is.True, "Expected: has edge Z-C"); // Z-C
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge C-X"); // C-X

        // Assert

        VoronoiEdge edge = FindEdge(edges, 900, 0, 0, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1200, 0)), Is.True, "Expected: edge A-C neighbours A-Y"); // A-C neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge A-C neighbours Z-C"); // A-C neighbours Z-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        edge = FindEdge(edges, 1200, 300, 600, 1200); // B-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 300)), Is.True, "Expected: edge B-D neighbours Y-B"); // B-D neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 1200, 1200)), Is.True, "Expected: edge B-D neighbours B-W"); // B-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge B-D neighbours W-D"); // B-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge B-D neighbours D-Z"); // B-D neighbours D-Z
        edge = FindEdge(edges, 0, 0, 900, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1200, 0)), Is.True, "Expected: edge X-A neighbours A-Y"); // X-A neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
        edge = FindEdge(edges, 900, 0, 1200, 0); // A-Y
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: edge A-Y neighbours A-C"); // A-Y neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-Y neighbours X-A"); // A-Y neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 300)), Is.True, "Expected: edge A-Y neighbours Y-B"); // A-Y neighbours Y-B
        edge = FindEdge(edges, 1200, 0, 1200, 300); // Y-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: edge Y-B neighbours B-D"); // Y-B neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 1200, 0)), Is.True, "Expected: edge Y-B neighbours A-Y"); // Y-B neighbours A-Y
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 1200, 1200)), Is.True, "Expected: edge Y-B neighbours B-W"); // Y-B neighbours B-W
        edge = FindEdge(edges, 1200, 300, 1200, 1200); // B-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: edge B-W neighbours B-D"); // B-W neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 0, 1200, 300)), Is.True, "Expected: edge B-W neighbours Y-B"); // B-W neighbours Y-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge B-W neighbours W-D"); // B-W neighbours W-D
        edge = FindEdge(edges, 1200, 1200, 600, 1200); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: edge W-D neighbours B-D"); // W-D neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 1200, 1200)), Is.True, "Expected: edge W-D neighbours B-W"); // W-D neighbours B-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge W-D neighbours D-Z"); // W-D neighbours D-Z
        edge = FindEdge(edges, 600, 1200, 0, 1200); // D-Z
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 300, 600, 1200)), Is.True, "Expected: edge D-Z neighbours B-D"); // D-Z neighbours B-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 1200, 1200, 600, 1200)), Is.True, "Expected: edge D-Z neighbours W-D"); // D-Z neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge D-Z neighbours Z-C"); // D-Z neighbours Z-C
        edge = FindEdge(edges, 0, 1200, 0, 600); // Z-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: edge Z-C neighbours A-C"); // Z-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 1200, 0, 1200)), Is.True, "Expected: edge Z-C neighbours D-Z"); // Z-C neighbours D-Z
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge Z-C neighbours C-X"); // Z-C neighbours C-X
        edge = FindEdge(edges, 0, 600, 0, 0); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 600)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 1200, 0, 600)), Is.True, "Expected: edge C-X neighbours Z-C"); // C-X neighbours Z-C
    }

    [Test]
    public void FourPointsMeetingAtCorner()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 800), // #1
            new VoronoiSite(400, 700), // #2
            new VoronoiSite(700, 400), // #3
            new VoronoiSite(800, 100), // #4
        };

        //  900 X--------------C----------------------------#B
        //      |             ·                           ,' |
        //  800 |    1       ·                         ,·'   |
        //      |            ·                       ,'      |
        //  700 |           ·       2             ,·'        |
        //      |          ·                    ,'           |
        //  600 |         ·                  ,·'             |
        //      |        ·                 ,'                |
        //  500 |       ·               ,·'                  |
        //      |       ·             ,'                     |
        //  400 |      ·           ,·'             3         |
        //      |     ·          ,'                          |
        //  300 |    ·        ,·'                         ,,,D
        //      |   ·       ,'                    ,,,··'''   |
        //  200 |  ·     ,·'               ,,,·'''           |
        //      |  ·   ,'          ,,,··'''                  |
        //  100 | · ,·'     ,,,·'''                     4    |
        //      |·,',,,··'''                                 |
        //    0 A###-----------------------------------------W
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 0, 900, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 0, 300, 900), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 0, 900, 300), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 0, 900, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 900, 0, 900, 300), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 900, 300, 900, 900), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 900, 900, 300, 900), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 300, 900, 0, 900), Is.True, "Expected: has edge C-X"); // C-X
        Assume.That(HasEdge(edges, 0, 900, 0, 0), Is.True, "Expected: has edge X-A"); // X-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 0, 900, 900); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 300, 900, 900)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 300, 900)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        edge = FindEdge(edges, 0, 0, 300, 900); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 300, 900)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 900, 0, 900)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        edge = FindEdge(edges, 0, 0, 900, 300); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-D neighbours A-W"); // A-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 300)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 300, 900, 900)), Is.True, "Expected: edge A-D neighbours D-B"); // A-D neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        edge = FindEdge(edges, 0, 0, 900, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge A-W neighbours A-D"); // A-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 300)), Is.True, "Expected: edge A-W neighbours W-D"); // A-W neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        edge = FindEdge(edges, 900, 0, 900, 300); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge W-D neighbours A-W"); // W-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 300, 900, 900)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 900, 300, 900, 900); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge D-B neighbours A-D"); // D-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 300)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 300, 900)), Is.True, "Expected: edge D-B neighbours B-C"); // D-B neighbours B-C
        edge = FindEdge(edges, 900, 900, 300, 900); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 300, 900, 900)), Is.True, "Expected: edge B-C neighbours D-B"); // B-C neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 900, 0, 900)), Is.True, "Expected: edge B-C neighbours C-X"); // B-C neighbours C-X
        edge = FindEdge(edges, 300, 900, 0, 900); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 300, 900)), Is.True, "Expected: edge C-X neighbours B-C"); // C-X neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        edge = FindEdge(edges, 0, 900, 0, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 900)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 900)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 300)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 900, 0, 900)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 90° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated90()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 800), // #1
            new VoronoiSite(700, 500), // #2
            new VoronoiSite(400, 200), // #3
            new VoronoiSite(100, 100), // #4
        };

        //  900 A###-----------------------------------------X
        //      |·','''··,,,                                 |
        //  800 | · '·,     '''·,,,                     1    |
        //      |  ·   ',          '''··,,,                  |
        //  700 |  ·     '·,               '''·,,,           |
        //      |   ·       ',                    '''··,,,   |
        //  600 |    ·        '·,                         '''C
        //      |     ·          ',                          |
        //  500 |      ·           '·,             2         |
        //      |       ·             ',                     |
        //  400 |       ·               '·,                  |
        //      |        ·                 ',                |
        //  300 |         ·                  '·,             |
        //      |          ·                    ',           |
        //  200 |           ·       3             '·,        |
        //      |            ·                       ',      |
        //  100 |    4       ·                         '·,   |
        //      |             ·                           ', |
        //    0 W--------------D----------------------------#B
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 0, 900, 900, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 0, 900, 900, 600), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 0, 900, 300, 0), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 0, 900, 0, 0), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 0, 300, 0), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 300, 0, 900, 0), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 900, 0, 900, 600), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 900, 600, 900, 900), Is.True, "Expected: has edge C-X"); // C-X
        Assume.That(HasEdge(edges, 900, 900, 0, 900), Is.True, "Expected: has edge X-A"); // X-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 0, 900, 900, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 900, 0)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 600)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        edge = FindEdge(edges, 0, 900, 900, 600); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 600)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 600, 900, 900)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        edge = FindEdge(edges, 0, 900, 300, 0); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge A-D neighbours A-W"); // A-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 900, 0)), Is.True, "Expected: edge A-D neighbours D-B"); // A-D neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        edge = FindEdge(edges, 0, 900, 0, 0); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge A-W neighbours A-D"); // A-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge A-W neighbours W-D"); // A-W neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        edge = FindEdge(edges, 0, 0, 300, 0); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge W-D neighbours A-W"); // W-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 900, 0)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 300, 0, 900, 0); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge D-B neighbours A-D"); // D-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 300, 0)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 600)), Is.True, "Expected: edge D-B neighbours B-C"); // D-B neighbours B-C
        edge = FindEdge(edges, 900, 0, 900, 600); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 300, 0, 900, 0)), Is.True, "Expected: edge B-C neighbours D-B"); // B-C neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 600, 900, 900)), Is.True, "Expected: edge B-C neighbours C-X"); // B-C neighbours C-X
        edge = FindEdge(edges, 900, 600, 900, 900); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 600)), Is.True, "Expected: edge C-X neighbours B-C"); // C-X neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        edge = FindEdge(edges, 900, 900, 0, 900); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 900, 600)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 300, 0)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 0)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 600, 900, 900)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 180° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated180()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(800, 100), // #1
            new VoronoiSite(500, 200), // #2
            new VoronoiSite(200, 500), // #3
            new VoronoiSite(100, 800), // #4
        };

        //  900 W-----------------------------------------###A
        //      |                                 ,,,··''','·|
        //  800 |    4                     ,,,·'''     ,·' · |
        //      |                  ,,,··'''          ,'   ·  |
        //  700 |           ,,,·'''               ,·'     ·  |
        //      |   ,,,··'''                    ,'       ·   |
        //  600 D'''                         ,·'        ·    |
        //      |                          ,'          ·     |
        //  500 |         3             ,·'           ·      |
        //      |                     ,'             ·       |
        //  400 |                  ,·'               ·       |
        //      |                ,'                 ·        |
        //  300 |             ,·'                  ·         |
        //      |           ,'                    ·          |
        //  200 |        ,·'             2       ·           |
        //      |      ,'                       ·            |
        //  100 |   ,·'                         ·       1    |
        //      | ,'                           ·             |
        //    0 B#----------------------------C--------------X
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 900, 0, 0), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 900, 600, 0), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 900, 0, 600), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 900, 900, 0, 900), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 0, 900, 0, 600), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 0, 600, 0, 0), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 0, 0, 600, 0), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 600, 0, 900, 0), Is.True, "Expected: has edge C-X"); // C-X
        Assume.That(HasEdge(edges, 900, 0, 900, 900), Is.True, "Expected: has edge X-A"); // X-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 900, 900, 0, 0); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        edge = FindEdge(edges, 900, 900, 600, 0); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 900, 0)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        edge = FindEdge(edges, 900, 900, 0, 600); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge A-D neighbours A-W"); // A-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 600)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge A-D neighbours D-B"); // A-D neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        edge = FindEdge(edges, 900, 900, 0, 900); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge A-W neighbours A-D"); // A-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 600)), Is.True, "Expected: edge A-W neighbours W-D"); // A-W neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        edge = FindEdge(edges, 0, 900, 0, 600); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge W-D neighbours A-W"); // W-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 0, 600, 0, 0); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge D-B neighbours A-D"); // D-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 600)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge D-B neighbours B-C"); // D-B neighbours B-C
        edge = FindEdge(edges, 0, 0, 600, 0); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 600, 0, 0)), Is.True, "Expected: edge B-C neighbours D-B"); // B-C neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 900, 0)), Is.True, "Expected: edge B-C neighbours C-X"); // B-C neighbours C-X
        edge = FindEdge(edges, 600, 0, 900, 0); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 600, 0)), Is.True, "Expected: edge C-X neighbours B-C"); // C-X neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        edge = FindEdge(edges, 900, 0, 900, 900); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 0)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 0)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 600)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 0, 900)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 0, 900, 0)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
    }

    /// <summary>
    /// This test basically repeats <see cref="FourPointsMeetingAtCorner"/> above,
    /// but all coordinates are rotated 270° around the center of the boundary.
    /// </summary>
    [Test]
    public void FourPointsMeetingAtCorner_Rotated270()
    {
        // Arrange

        List<VoronoiSite> sites = new List<VoronoiSite>
        {
            new VoronoiSite(100, 100), // #1
            new VoronoiSite(200, 400), // #2
            new VoronoiSite(500, 700), // #3
            new VoronoiSite(800, 800), // #4
        };

        //  900 B#----------------------------D--------------W
        //      | ',                           ·             |
        //  800 |   '·,                         ·       4    |
        //      |      ',                       ·            |
        //  700 |        '·,             3       ·           |
        //      |           ',                    ·          |
        //  600 |             '·,                  ·         |
        //      |                ',                 ·        |
        //  500 |                  '·,               ·       |
        //      |                     ',             ·       |
        //  400 |         2             '·,           ·      |
        //      |                          ',          ·     |
        //  300 C,,,                         '·,        ·    |
        //      |   '''··,,,                    ',       ·   |
        //  200 |           '''·,,,               '·,     ·  |
        //      |                  '''··,,,          ',   ·  |
        //  100 |    1                     '''·,,,     '·, · |
        //      |                                 '''··,,,',·|
        //    0 X-----------------------------------------###A
        //       0  100  200  300  400  500  600  700  800  900 

        // Act

        List<VoronoiEdge> edges = VoronoiPlane.TessellateOnce(sites, 0, 0, 900, 900);

        // Assume

        Assume.That(edges.Count, Is.EqualTo(9), "Expected: edge count 9");
        Assume.That(edges, Is.Not.Null);
        Assume.That(HasEdge(edges, 900, 0, 0, 900), Is.True, "Expected: has edge A-B"); // A-B
        Assume.That(HasEdge(edges, 900, 0, 0, 300), Is.True, "Expected: has edge A-C"); // A-C
        Assume.That(HasEdge(edges, 900, 0, 600, 900), Is.True, "Expected: has edge A-D"); // A-D
        Assume.That(HasEdge(edges, 900, 0, 900, 900), Is.True, "Expected: has edge A-W"); // A-W
        Assume.That(HasEdge(edges, 900, 900, 600, 900), Is.True, "Expected: has edge W-D"); // W-D
        Assume.That(HasEdge(edges, 600, 900, 0, 900), Is.True, "Expected: has edge D-B"); // D-B
        Assume.That(HasEdge(edges, 0, 900, 0, 300), Is.True, "Expected: has edge B-C"); // B-C
        Assume.That(HasEdge(edges, 0, 300, 0, 0), Is.True, "Expected: has edge C-X"); // C-X
        Assume.That(HasEdge(edges, 0, 0, 900, 0), Is.True, "Expected: has edge X-A"); // X-A

        // Assert

        VoronoiEdge edge = FindEdge(edges, 900, 0, 0, 900); // A-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge A-B neighbours A-C"); // A-B neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge A-B neighbours A-D"); // A-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-B neighbours A-W"); // A-B neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 900, 0, 900)), Is.True, "Expected: edge A-B neighbours D-B"); // A-B neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 300)), Is.True, "Expected: edge A-B neighbours B-C"); // A-B neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-B neighbours X-A"); // A-B neighbours X-A
        edge = FindEdge(edges, 900, 0, 0, 300); // A-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge A-C neighbours A-B"); // A-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge A-C neighbours A-D"); // A-C neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-C neighbours A-W"); // A-C neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 300)), Is.True, "Expected: edge A-C neighbours B-C"); // A-C neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge A-C neighbours C-X"); // A-C neighbours C-X
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-C neighbours X-A"); // A-C neighbours X-A
        edge = FindEdge(edges, 900, 0, 600, 900); // A-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(6), "Expected: edge neighbour count 6");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge A-D neighbours A-B"); // A-D neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge A-D neighbours A-C"); // A-D neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge A-D neighbours A-W"); // A-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 900)), Is.True, "Expected: edge A-D neighbours W-D"); // A-D neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 900, 0, 900)), Is.True, "Expected: edge A-D neighbours D-B"); // A-D neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-D neighbours X-A"); // A-D neighbours X-A
        edge = FindEdge(edges, 900, 0, 900, 900); // A-W
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge A-W neighbours A-B"); // A-W neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge A-W neighbours A-C"); // A-W neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge A-W neighbours A-D"); // A-W neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 900)), Is.True, "Expected: edge A-W neighbours W-D"); // A-W neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge A-W neighbours X-A"); // A-W neighbours X-A
        edge = FindEdge(edges, 900, 900, 600, 900); // W-D
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge W-D neighbours A-D"); // W-D neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge W-D neighbours A-W"); // W-D neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 900, 0, 900)), Is.True, "Expected: edge W-D neighbours D-B"); // W-D neighbours D-B
        edge = FindEdge(edges, 600, 900, 0, 900); // D-B
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge D-B neighbours A-B"); // D-B neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge D-B neighbours A-D"); // D-B neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 900, 600, 900)), Is.True, "Expected: edge D-B neighbours W-D"); // D-B neighbours W-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 300)), Is.True, "Expected: edge D-B neighbours B-C"); // D-B neighbours B-C
        edge = FindEdge(edges, 0, 900, 0, 300); // B-C
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(4), "Expected: edge neighbour count 4");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge B-C neighbours A-B"); // B-C neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge B-C neighbours A-C"); // B-C neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 600, 900, 0, 900)), Is.True, "Expected: edge B-C neighbours D-B"); // B-C neighbours D-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge B-C neighbours C-X"); // B-C neighbours C-X
        edge = FindEdge(edges, 0, 300, 0, 0); // C-X
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(3), "Expected: edge neighbour count 3");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge C-X neighbours A-C"); // C-X neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 900, 0, 300)), Is.True, "Expected: edge C-X neighbours B-C"); // C-X neighbours B-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 0, 900, 0)), Is.True, "Expected: edge C-X neighbours X-A"); // C-X neighbours X-A
        edge = FindEdge(edges, 0, 0, 900, 0); // X-A
        Assert.That(edge.Neighbours, Is.Not.Null);
        Assert.That(edge.Neighbours.Count(), Is.EqualTo(5), "Expected: edge neighbour count 5");
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 900)), Is.True, "Expected: edge X-A neighbours A-B"); // X-A neighbours A-B
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 0, 300)), Is.True, "Expected: edge X-A neighbours A-C"); // X-A neighbours A-C
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 600, 900)), Is.True, "Expected: edge X-A neighbours A-D"); // X-A neighbours A-D
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 900, 0, 900, 900)), Is.True, "Expected: edge X-A neighbours A-W"); // X-A neighbours A-W
        Assert.That(edge.Neighbours.Contains(FindEdge(edges, 0, 300, 0, 0)), Is.True, "Expected: edge X-A neighbours C-X"); // X-A neighbours C-X
    }

}
