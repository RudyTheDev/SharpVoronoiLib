using System;
using System.Collections.Generic;
using System.IO;

namespace SharpVoronoiLib.UnitTestGenerator;

public static class UnitTestGenerator
{
    public static void Main()
    {
        TestLayoutParser testLayoutParser = new TestLayoutParser(
            50, 100,
            20, 50
        );
        
        TestCaseLayouts.AddLayouts(testLayoutParser);

        List<(string, TestPurpose)> variants =
        [
            ("GeneratedTest_Edges", TestPurpose.AssertEdges),
            ("GeneratedTest_SiteEdges", TestPurpose.AssertSiteEdges),
            ("GeneratedTest_SiteEdgesClockwise", TestPurpose.AssertSiteEdgesClockwise),
            ("GeneratedTest_EdgeSites", TestPurpose.AssertEdgeSites),
            ("GeneratedTest_EdgeNeighbours", TestPurpose.AssertEdgeNeighbours),
            ("GeneratedTest_SiteNeighbours", TestPurpose.AssertSiteNeighbours),
            ("GeneratedTest_SitePoints", TestPurpose.AssertSitePoints),
            ("GeneratedTest_SitePointsClockwise", TestPurpose.AssertSitePointsClockwise),
            ("GeneratedTest_PointBorderLocation", TestPurpose.AssertPointBorderLocation),
            ("GeneratedTest_LiesOnEdgeOrCorner", TestPurpose.AssertLiesOnEdgeOrCorner),
            ("GeneratedTest_SiteCentroids", TestPurpose.AssertSiteCentroids)
        ];

        // todo: edge length

        for (int i = 0; i < 2; i++)
        {
            TestBorderLogic borderLogic = i == 0 ? TestBorderLogic.UnclosedBorders : TestBorderLogic.ClosedBorders;

            foreach ((string testName, TestPurpose testPurpose) in variants)
            {
                string fullTestName = testName + "_" + (borderLogic == TestBorderLogic.UnclosedBorders ? "OpenBorders" : "ClosedBorders");

                Console.WriteLine("Outputting test " + fullTestName + "...");

                string output = testLayoutParser.GenerateCode(fullTestName, testPurpose, borderLogic);

                File.WriteAllText("../../../../UnitTests/Fortune/AutoGenerated/" + fullTestName + ".g.cs", output);

                //Console.OutputEncoding = Encoding.UTF8;
                //Console.WriteLine(output);
            }
        }

        Console.WriteLine("Done.");
    }
}