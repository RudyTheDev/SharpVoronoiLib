namespace SharpVoronoiLib.UnitTestGenerator;

public static class UnitTestGenerator
{
    public static void Main()
    {
        TestLayoutParser testLayoutParser = new TestLayoutParser(
            50, 100,
            20, 50
        );

        IEnumerable<TestCaseLayouts.RawTestLayout> layouts = TestCaseLayouts.GetLayouts();

        foreach (TestCaseLayouts.RawTestLayout layout in layouts)
            testLayoutParser.AddTestLayout(layout.Name, layout.Layout, layout.Transform);

        List<(string, TestPurpose)> variants =
        [
            ("GeneratedTest_Edges", TestPurpose.AssertEdges),
            ("GeneratedTest_Points", TestPurpose.AssertPoints),
            ("GeneratedTest_SiteEdges", TestPurpose.AssertSiteEdges),
            ("GeneratedTest_SiteEdgesClockwise", TestPurpose.AssertSiteEdgesClockwise),
            ("GeneratedTest_SiteEdgesClockwiseWound", TestPurpose.AssertSiteEdgesClockwiseWound),
            ("GeneratedTest_EdgeSites", TestPurpose.AssertEdgeSites),
            ("GeneratedTest_EdgeNeighbours", TestPurpose.AssertEdgeNeighbours),
            ("GeneratedTest_SiteNeighbours", TestPurpose.AssertSiteNeighbours),
            ("GeneratedTest_SitePoints", TestPurpose.AssertSitePoints),
            ("GeneratedTest_PointEdges", TestPurpose.AssertPointEdges),
            ("GeneratedTest_PointSites", TestPurpose.AssertPointSites),
            ("GeneratedTest_SitePointsClockwise", TestPurpose.AssertSitePointsClockwise),
            ("GeneratedTest_PointBorderLocation", TestPurpose.AssertPointBorderLocation),
            ("GeneratedTest_LiesOnEdgeOrCorner", TestPurpose.AssertLiesOnEdgeOrCorner),
            ("GeneratedTest_SiteCentroids", TestPurpose.AssertSiteCentroids)
        ];
        
        List<TestBorderLogic> borders = [ 
            TestBorderLogic.UnclosedBorders, 
            TestBorderLogic.ClosedBorders 
        ];

        // todo: edge length

        foreach (TestBorderLogic border in borders)
        {
            foreach ((string testName, TestPurpose testPurpose) in variants)
            {
                string fullTestName = testName + "_" + BorderToName();

                Console.WriteLine("Outputting test " + fullTestName + "...");

                string output = testLayoutParser.GenerateCode(fullTestName, testPurpose, border);

                File.WriteAllText($"../../../../UnitTests/Fortune/AutoGenerated/{fullTestName}.g.cs", output);
                    
                //Console.OutputEncoding = Encoding.UTF8;
                //Console.WriteLine(output);

                continue;
                    

                [Pure] string BorderToName() => border == TestBorderLogic.UnclosedBorders ? "OpenBorders" : "ClosedBorders";
            }
        }

        Console.WriteLine("Done.");
    }
}